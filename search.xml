<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>计网实验报告</title>
      <link href="/2020/12/12/%E8%AE%A1%E7%BD%91%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/"/>
      <url>/2020/12/12/%E8%AE%A1%E7%BD%91%E5%AE%9E%E9%AA%8C%E6%8A%A5%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><table><thead><tr><th><strong><em>\</em>实验名称**</strong></th><th>实验1  WireShark的使用</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong><em>\</em>实验时间**</strong></td><td>2020年10月7日 10:00-11:40时</td><td><strong><em>\</em>实验地点**</strong></td><td>计通楼210</td><td><strong><em>\</em>实验学时**</strong></td><td>2学时</td></tr><tr><td><strong><em>\</em>实验类型**</strong></td><td>验证</td><td><strong><em>\</em>实验性质**</strong></td><td>必修</td><td></td><td></td></tr><tr><td><strong><em>\</em>实验环境**</strong></td><td>网络环境：如实验室以太网、寝室无线局域网等硬件配置：包括CPU、主存容量、网络适配器数据率等操作系统：windows实验软件：如wireshark、IE等</td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验目的**</strong></td><td>1. 认识协议分析软件WireShark。2. 初步熟悉WireShark的使用方法。</td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验原理*****</strong>*（预备知识）****</td><td>Wireshark 是网络包分析工具。网络包分析工具的主要作用是尝试捕获网络包， 并尝试显示包的尽可能详细的情况。 你可以把网络包分析工具当成是一种用来测量有什么东西从网线上进出的测量工具，就好像使电工用来测量进入电信的电量的电度表一样。（当然比那个更高级） 过去的此类工具要么是过于昂贵，要么是属于某人私有，或者是二者兼顾。 Wireshark出现以后，这种现状得以改变。 Wireshark可能算得上是今天能使用的最好的开元网络分析软件。 主要应用于网络管理员用来解决网络问题、网络安全工程师用来检测安全隐患、开发人员用来测试协议执行情况和用来学习网络协议等场合。</td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验内容（实验步骤和方法）**</strong></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1、熟悉界面      （1）第一部分是菜单和工具栏，wireshark提供的所有功能都可以在这一部分中找到。（2）第二部分是被捕获包的列表，其中包含被捕获包的一般信息，如被捕获的时间、源和目的IP地址、所属的协议类型，以及包的类型等信息。（3）第三部分显示第二部分已选中的包的每个域的具体信息，从以太网帧的首部到该包中负载内容，都显示得清清楚楚。（4）第四部分显示已选中包的16进制和ASCII表示，帮助用户了解一个包的本来样子。 2、抓包 （1）选择“Capture”菜单项中的 “Option”,这时会弹出一个对话框，如下所示。        这个对话框中的栏目虽然很多，但一般只需配置其中两项。一项是 “Capture Filter”栏。在这个栏中，可以输入过滤规则，用于规定wireshark捕获包的种类；如果不输入过滤规则，则wireshark将捕获所有从网卡发送或收到的包。另外一项是 “Update list of packets in real time”选项，请大家一定要选中这一项，这样可以使Ethereal在捕获包的同时，实时地把捕获的包显示出来。(2)在完成如上配置后，点击　“Start”按钮，Ethereal便开始捕获包。3、对所抓取的TCP数据包解释    帧号 时间  源地址        目的地址       高层协议 包内信息概况    No.  Time   Source         Destination      Protocol  Info   1 0.000000  202.203.44.225  202.203.208.32  TCP   2764 &gt; http [SYN]  Seq=0 Len=0 MSS=1460  源端口&gt;目的端口[请求建立TCP链接]—————————————————————————————————           以下为物理层的数据帧概况   Frame 1 (62 bytes on wire, 62 bytes captured) 1号帧，线路62字节，实际捕获62字节   Arrival Time: Jan 21, 2008 15:17:33.910261000   捕获日期和时间    [Time delta from previous packet:0.00000 seconds]此包与前一包的时间间隔    [Time since reference or first frame: 0.00 seconds]此包与第1帧的间隔时间    Frame Number: 1                  帧序号    Packet Length: 62 bytes              帧长度    Capture Length: 62 bytes              捕获长度    [Frame is marked: False]              此帧是否做了标记：否    [Protocols in frame: eth:ip:tcp]          帧内封装的协议层次结构    [Coloring Rule Name: HTTP]      用不同颜色染色标记的协议名称：HTTP    [Coloring Rule String: http || tcp.port == 80]   染色显示规则的字符串：—————————————————————————————————          以下为数据链路层以太网帧头部信息   Ethernet II, Src: AcerTech_5b:d4:61 (00:00:e2:5b:d4:61), Dst: Jetcell_e5:1d:0a (00:d0:2b:e5:1d:0a)   以太网协议版本II，源地址：厂名_序号（网卡地址），目的：厂名_序号（网卡地址）   Destination: Jetcell_e5:1d:0a (00:d0:2b:e5:1d:0a) 目的：厂名_序号（网卡地址）   Source: AcerTech_5b:d4:61 (00:00:e2:5b:d4:61) 源：厂名_序号（网卡地址）   Type: IP (0x0800) 帧内封装的上层协议类型为IP（十六进制码0800）—————————————————————————————————          以下为互联网层IP包头部信息   Internet Protocol, Src: 202.203.44.225 (202.203.44.225), Dst: 202.203.208.32   (202.203.208.32)              互联网协议，源IP地址，目的IP地址   Version: 4 互联网协议IPv4（请参考书上P122页IPv4数据报字段结构）   Header length: 20 bytes           IP包头部长度   Differentiated Services Field:0x00(DSCP 0x00:Default;ECN:0x00)差分服务字段   Total Length: 48         IP包的总长度   Identification:0x8360 (33632)        标志字段   Flags:    标记字段（在路由传输时，是否允许将此IP包分段，教材125页）   Fragment offset: 0  分段偏移量（将一个IP包分段后传输时，本段的标识）   Time to live: 128                 生存期TTL   Protocol: TCP (0x06)         此包内封装的上层协议为TCP   Header checksum: 0xe4ce [correct]     头部数据的校验和   Source: 202.203.44.225 (202.203.44.225)    源IP地址    描述一下WireShark的设置选项，比如如何设置选定网卡，如何设置过滤器等；</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验结果（根据实验内容回答问题）**</strong></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1.WireShark协议分析软件的功能有哪些？Wireshark的常用功能分为四个方面： 一般分析任务 （1）找出在一个网络内发送数据包最多的主机 （2）查看网络通信 （3）查看某个主机使用了哪些程序 （4）基本正常的网络通信 （5）验证特有的网络操作 （6）了解尝试连接无线网络的用户 （7）同时捕获多个网络的数据 （8）实施无人值守数据捕获 （9）捕获并分析到/来自一个特定主机或子网的数据 （10）通过FTP或HTTP查看和重新配置文件传输 （11）从其他捕获工具导入跟踪文件 （12）使用最少的资源捕获数据 故障任务 （1）为故障创建一个自定义的分析环境 （2）确定路径，客户端和服务延迟 （3）确定TCP问题 （4）检查HTTP代理问题 （5）检查应用程序错误响应 （6）通过查看图形显示的结果，找到相关的网络问题 （7）确定重载的缓冲区 （8）比较缓慢的通信到正常通信的一个基准 （9）找出重复的IP地址 （10）确定DHCP服务或网络代理问题 （11）确定WLAN信号强度问题 （12）检测WLAN连接的次数 （13）检查各种网络配置错误 （14）确定应用程序正在加载一个网络片段 安全分析（网络取证）任务 （1）为网络取证创建一个自定义分析环境 （2）检查使用非标准端口的应用程序 （3）确定到/来自可疑主机的数据 （4）查看哪台主机正在尝试获取一个IP地址 （5）确定phone home数据 （6）确定网络侦查环境 （7）全球定位和映射远程目标地址 （8）检查可疑数据重定向 （9）检查单个TCP或UDP客户端和服务器之间的会话 （10）检查到恶意畸形的帧 （11）在网络数据中找出攻击签名的关键因素 应用程序分析任务 （1）了解应用程序和协议如何工作 （2）了解图形应用程序的带宽使用情况 （3）确定是否将支持应用程序的链接 （4）更新/升级后检查应用程序性能 （5）从一个新安装的应用程序中检查错误响应 （6）确定从哪个用户正在运行一个特定的应用程序 （7）检查应用程序如何使用传输协议，如TCP或UDP2.WireShark主界面有哪几部分组成？打开桌面上的wireshark工具，Wireshark主界面可以分为如下七个部分，1：主菜单栏、2：快捷方式、3：过滤栏、4：数据包列表区、5：数据包详细信息区、6：比特区、7：数据包统计区域菜单栏选项介绍1、Flie（文件）栏用于打开，合并捕捉文件，保存，打印，另存，导出捕捉文件的全部或另存，以及退出Wireshark等等操作2、Edit（编辑）菜单栏，包括查询数据包，时间设置，数据包标志，设置预设参数等3、View（试图）控制捕捉数据的显示方式，包括颜色，字体缩放，将包显示在分离的窗口，展开或收缩详情面板4、Capture（捕获）菜单栏，选择网卡，开始，停止抓包，过滤器等操作5、Analyze（分析）菜单栏，显示过滤器，tcp、udp包追踪等功能6、Statistics（统计）栏，数据汇总信息，会话选项，节点统计，IO图，流量图等，做出会话报表7、Telephony（电话）支持语音流量抓取功能8、Tools（工具）栏9、Help帮助界面快捷方式菜单1、使用工具中的常用按钮，分别有：查看网卡，列出接口选项，启动，停止，重置，打开，着色…等过滤栏1、过滤基于arp协议的数据包，在Filter栏输入arp，回车，列出基于arp的所有数据包数据包列表区1、数据包列表区列出了包的时间流、源IP、目的IP、协议、信息数据详细信息区1、在列表区选中数据包的时候，数据包的详细信息显示在下方，我们称为详细信息区比特区1、数据包字节，十六进制信息，通过比特区看到更详细的字段信息<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps3.jpg" alt="img">)3.如何理解所抓到的包的内容？<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps4.jpg" alt="img"></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>成绩：**</strong></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th><strong><em>\</em>实验名称**</strong></th><th>实验二  802.3协议分析和以太网</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong><em>\</em>实验时间**</strong></td><td>2020年  月  日 10:00-11:40时</td><td><strong><em>\</em>实验地点**</strong></td><td>计通楼210</td><td><strong><em>\</em>实验学时**</strong></td><td>2学时</td></tr><tr><td><strong><em>\</em>实验类型**</strong></td><td>验证</td><td><strong><em>\</em>实验性质**</strong></td><td>必修</td><td></td><td></td></tr><tr><td><strong><em>\</em>实验环境**</strong></td><td>网络环境：如实验室以太网、寝室无线局域网等硬件配置：包括CPU、主存容量、网络适配器数据率等操作系统：windows实验软件：如wireshark、IE等</td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验目的**</strong></td><td>1.分析802.3协议2.熟悉以太网帧的格式3.熟悉ARP报文的格式</td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验原理*****</strong>*（预备知识）****</td><td>要深入理解网络协议，需要仔细观察协议实体之间交换的报文序列。为探究协议操作细节，可使协议实体执行某些动作，观察这些动作及其影响。这些任务可以在仿真环境下或在如因特网这样的真实网络环境中完成。观察在正在运行协议实体间交换报文的基本工具被称为分组嗅探器（packet sniffer）。顾名思义，一个分组嗅探器捕获（嗅探）计算机发送和接收的报文。一般情况下，分组嗅探器将存储和显示出被捕获报文的各协议头部字段内容。图1为一个分组嗅探器的结构。<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps5.png" alt="img">  图1右边是计算机上正常运行的协议（在这里是因特网协议）和应用程序（如：web浏览器和ftp客户端）。分组嗅探器（虚线框中的部分）是附加计算机普通软件上的，主要有两部分组成。分组捕获库接收计算机发送和接收的每一个链路层帧的拷贝。高层协议（如：HTTP、FTP、TCP、UDP、DNS、IP等）交换的报文都被封装在链路层帧(Frame)中，并沿着物理介质（如以太网的电缆）传输。图1假设所使用的物理媒体是以太网，上层协议的报文最终封装在以太网帧中。  分组嗅探器的第二个组成部分是分析器。分析器用来显示协议报文所有字段的内容。为此，分析器必须能够理解协议所交换的所有报文的结构。例如：我们要显示图1中HTTP协议所交换的报文的各个字段。分组分析器理解以太网帧格式，能够识别包含在帧中的IP数据报。分组分析器也要理解IP数据报的格式，并能从IP数据报中提取出TCP报文段。然后，它需要理解TCP报文段，并能够从中提取出HTTP消息。最后，它需要理解HTTP消息。  WireShark是一种可以运行在Windows, UNIX, Linux等操作系统上的分组分析器.用户界面如图2所示。最初，各窗口中并无数据显示。WireShark的界面主要有五个组成部分：<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps6.jpg" alt="img"> 图2  WireShark的用户界面  命令菜单（command menus）：命令菜单位于窗口的最顶部，是标准的下拉式菜单。最常用菜单命令有两个：File、Capture。File菜单允许你保存捕获的分组数据或打开一个已被保存的捕获分组数据文件或退出WireShark程序。Capture菜单允许你开始捕获分组。     捕获分组列表（listing of captured packets）：按行显示已被捕获的分组内容，其中包括：WireShark赋予的分组序号、捕获时间、分组的源地址和目的地址、协议类型、分组中所包含的协议说明信息。单击某一列的列名，可以使分组按指定列进行排序。在该列表中，所显示的协议类型是发送或接收分组的最高层协议的类型。  分组头部明细（details of selected packet header）：显示捕获分组列表窗口中被选中分组的头部详细信息。包括：与以太网帧有关的信息，与包含在该分组中的IP数据报有关的信息。单击以太网帧或IP数据报所在行左边的向右或向下的箭头可以展开或最小化相关信息。另外，如果利用TCP或UDP承载分组，WireShark也会显示TCP或UDP协议头部信息。最后，分组最高层协议的头部字段也会显示在此窗口中。  分组内容窗口（packet content）：以ASCII码和十六进制两种格式显示被捕获帧的完整内容。  显示筛选规则（display filter specification）：在该字段中，可以填写协议的名称或其他信息，根据此内容可以对分组列表窗口中的分组进行过滤。</td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验内容（实验步骤和方法）**</strong></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>1.</strong>   WireShark的使用及捕获并分析以太帧（1） 清空浏览器缓存（在IE窗口中，选择“工具/Internet选项/删除文件”命令）。（2） 启动WireShark，开始分组捕获。（3） 启动主机上的web浏览器。（4） 启动WireShark。窗口中没有任何分组列表。（5） 开始分组捕获：选择“capture”下拉菜单中的“Optios”命令，会出现如图1所示的“WireShark: Capture Options”窗口，可以设置分组捕获的选项。<a href="#blogid=63258d650100fvkp&amp;url=http://static14.photo.sina.com.cn/orignal/63258d65g798514b42ebd&amp;690"><img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps7.png" alt="img"></a>                 图1 WireShark的Capture Option（6）  在实验中，可以使用窗口中显示的默认值。在“WireShark: Capture Options”窗口的最上面有一个“interface”下拉菜单，其中显示计算机中所安装的网络接口（即网卡）。当计算机具有多个活动网卡（装有多块网卡，并且均正常工作）时，需要选择其 中一个用来发送或接收分组的网络接口（如某个有线接口）。（7）  随后，单击“Start”开始进行分组捕获，所有由选定网卡发送和接收的分组都将被捕获。（8） 开始分组捕获后，会出现分组捕获统计窗口。该窗口统计显示各类已捕获分组的数量。在该窗口中有一个“stop”按钮，可以停止分组的捕获。（9）  在运行分组捕获的同时，在浏览器地址栏中输入某网页的URL，如：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>。为显示该网页，浏览器需要连接<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>的服务器，并与之交换HTTP消息，以下载该网页。包含这些HTTP消息的以太网帧(Frame)将被WireShark捕获。  WireShark主窗口显示已捕获的你的计算机与其他网络实体交换的所有协议报文，其中一部分就是与<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>服务器交换的HTTP消息。（10） 在显示筛选编辑框中输入“http”，单击“apply”，分组列表窗口将只显示HTTP消息。（11） 选择分组列表窗口中的第一条HTTP消息。它应该是你的计算机发向<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>服务器的HTTP GET（HTTP定义的用于获取/查询资源信息的方法）消息。（12） 选择“Analyze-&gt;Enabled Protocols”，取消对IP复选框的选择，单击OK。当你选择该消息后，以太网帧、IP数据报、TCP报文段、以及HTTP消息首部信息都将显示在分组首部子窗口中。单击分组首部详细信息子窗口中向右和向下箭头，可以最小化帧、以太网、IP、TCP信息显示量，可以最大化HTTP协议相关信息 的显示量。 （13） 选择包含HTTP GET消息的以太网帧，在分组详细信息窗口中，展开Ethernet II部分。根据操作，回答“五、实验报告内容”中的1-4题（14） 选择包含HTTP 响应消息第一个字节的以太网帧，根据操作，回答“五、实验报告内容”中的5-8题<strong>2.</strong> <strong><em>\</em>ARP**</strong>（1） 利用MS-DOS命令：arp -a查看主机上ARP缓存的内容。根据操作，回答“四、实验报告内容”中的9题。（2） 利用MS-DOS命令：arp -d  *  以清除主机中ARP缓存的内容。（3） 清除浏览器缓存。（4） 启动WireShark，开始分组捕获。（5） 在浏览器的地址栏中输入：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a> 浏览器将显示百度搜索网页。（6） 停止分组捕获。选择“Analyze-&gt;Enabled Protocols”，取消对IP复选框的选择，单击OK。根据操作，回答“五、实验报告内容”中的10-13题。</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验结果（根据实验内容回答问题）**</strong></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps8.jpg" alt="img">)4.你的主机的48位以太网地址(MAC地址)是多少？ 5.目标MAC地址是<a href="http://www.baidu.com服务器的MAC地址吗？如果不是，该地址是什么设备的MAC地址？不是，是该实验室路由器的mac地址。![img](https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps9.jpg)6">www.baidu.com服务器的MAC地址吗？如果不是，该地址是什么设备的MAC地址？不是，是该实验室路由器的mac地址。![img](https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps9.jpg)6</a>. 给出Frame头部Type字段(2字节)的十六进制值。<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps10.jpg" alt="img">8c7. 在包含“HTTP GET”的以太网帧中，字符“G”的位置(是第几个字节，假设Frame头部第一个字节的顺序为1)？558. 以太Frame的源MAC地址是多少？该地址是你主机的MAC地址吗？是<a href="http://www.baidu.com服务器的MAC地址吗？如果不是，该地址是什么设备的MAC地址？地址是：8c:dc:d4:3d:54:71，不是，是路由器的mac地址![img](https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps11.jpg)9.以太网帧的目的MAC地址是多少？该地址是你主机的地址吗？地址是:8c:dc:d4:41:01:00，不是![img](https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps12.jpg)10">www.baidu.com服务器的MAC地址吗？如果不是，该地址是什么设备的MAC地址？地址是：8c:dc:d4:3d:54:71，不是，是路由器的mac地址![img](https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps11.jpg)9.以太网帧的目的MAC地址是多少？该地址是你主机的地址吗？地址是:8c:dc:d4:41:01:00，不是![img](https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps12.jpg)10</a>. 给出Frame头部2-字节Type字段的十六进制值。<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps13.jpg" alt="img"> 11.在包含“OK”以太网帧中，从该帧的第一个字节算起，”O”是第几个字节？  <img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps14.jpg" alt="img"> 12.写下你主机ARP缓存中的内容。其中每一列的含义是什么？接口是自己的地址，Internet是路由器分配的地址，剩下的是动态的物理地<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps15.jpg" alt="img">址。13.包含ARP请求报文的以太网帧的源地址和目的地址的十六进制值各是多少？8c:dc:d4:41:00:2d ff ff ff ff ff ff <img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps16.jpg" alt="img">14. 给出Frame头部Type字段的十六进制值。Ff ff ff<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps17.jpg" alt="img">15. 在ARP报文中是否包含发送方的IP地址？包含<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps18.jpg" alt="img">)<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps19.jpg" alt="img">)16.包含ARP响应(reply)报文的以太网帧中，源地址和目的地址的十六进制值各是多少？8c:dc:d4:41:00:2d 8c:dc:d4:3d:54:71</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>成绩：**</strong></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th><strong><em>\</em>实验名称**</strong></th><th>实验三 IP层协议分析</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong><em>\</em>实验时间**</strong></td><td>2020年  月  日 10:00-11:40时</td><td><strong><em>\</em>实验地点**</strong></td><td>计通楼210</td><td><strong><em>\</em>实验学时**</strong></td><td>2学时</td></tr><tr><td><strong><em>\</em>实验类型**</strong></td><td>验证</td><td><strong><em>\</em>实验性质**</strong></td><td>必修</td><td></td><td></td></tr><tr><td><strong><em>\</em>实验环境**</strong></td><td>网络环境：如实验室以太网、寝室无线局域网等硬件配置：包括CPU、主存容量、网络适配器数据率等操作系统：windows实验软件：如wireshark、IE等</td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验目的**</strong></td><td>1. 了解ICMP、IP数据包格式；2. 掌握IP 数据报的组成和各字段的功能，分析数据报的IP首部；3. 理解ARP、ICMP与IP的关系；4. 理解ARP命令、PING命令与ARP、ICMP协议的关系；5. 熟悉ARP和ICMP协议包格式；6. 了解ARP、ICMP会话过程。</td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验原理*****</strong>*（预备知识）****</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验内容（实验步骤和方法）**</strong></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>（说明：以下所截界面上的数据与你电脑上的数据会有所不同）1. 首先进入MS DOS字符界面 2. 在MS DOS下使用ARP –d *命令清除自己电脑中MAC和IP映射表。见图1所示<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps20.jpg" alt="img"> 图1  ARP及PING命令运行结果3. 回到windows图形界面下4. 启动WireShark，开始捕获分组。5. 在MS DOS下键入Ping <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>，见图1所示。6. 回到WireShark并停止抓包 ，见图2所示。7. 查找到ARP请求和应答数据包，回答实验报告内容中的1-2题8. 查到PING命令执行时，产生的ICMP请求和应答报文，回答实验报告内容中的3-5题<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps21.jpg" alt="img"> 图2  WireShark抓包结果</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验结果（根据实验内容回答问题）**</strong></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1. 什么是ARP？ARP与IP的关系。 ARP，即地址解析协议，实现通bai过duIP地址得知其物理地址。以太网通信zhi需要经过二层封装后再把数据发出去，dao但是我们有时只知道对方的IP地址，而不知道对方的MAC地址，这时我们可以通过ARP请求来获取对方的MAC地址。ARP请求是广播，所以对方能收到，对方收到ARP请求后解析报文发现目的IP是自己，于是把自己的MAC地址填入ARP包头的SMAC中发回给我们，这样我们就知道了对方的MAC地址，可以进行通信了。 2. ARP请求和应答数据包的数据部分的内容是什么？代表什么意思？ <img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps22.jpg" alt="img">  3. 什么是ICMP？ICMP与IP的关系。两者都是网络层的协议,ip用于网际互联,icmp用于探测ICMP是:Internet 控制信息协议（ICMP）是 IP 组的一个整合部分。它是TCP/IP协议集中的一个子协议,属于网络层协议,主要用于在主机与路由器之间传递控制信息,包括报告错误、交换受限控制和状态信息等。当遇到IP数据无法访问目标、IP路由器无法按当前的传输速率转发数据包等情况时，会自动发送ICMP消息。我们可以通过Ping命令发送ICMP回应请求消息并记录收到ICMP回应回复消息。通过这些消息来对网络或主机的故障提供参考依据 4. ICMP的请求和应答报文的头部各字段的十六进制值分别是什么，代表什么含义？数据部分的内容以及IP头部的十六进制值分别是什么？内容。<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps23.jpg" alt="img"> 数据内容：<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps24.jpg" alt="img"> Ip：<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps25.jpg" alt="img">  5. 什么是“会话”？本实验中那些协议有会话过程？IP有否“会话”？文件传输过程就是一次会话，tcp、http、icmp、ARP, 通过TCP/IP协议建立起来的会话，会话可以理解为一个应用程序。也就是说通过网络建立其连接的应用程序.6. 你主机的IP地址是什么？你所访问的主页所在服务器的IP地址是什么？（未用）主机的IP地址：172.18.3.109,baidu: 14.215.177.38<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps26.jpg" alt="img"></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>成绩：**</strong></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th><strong><em>\</em>实验名称**</strong></th><th>实验四 TCP协议分析</th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><strong><em>\</em>实验时间**</strong></td><td>2020年  月  日 10:00-11:40时</td><td><strong><em>\</em>实验地点**</strong></td><td>计通楼210</td><td><strong><em>\</em>实验学时**</strong></td><td>2学时</td></tr><tr><td><strong><em>\</em>实验类型**</strong></td><td>验证</td><td><strong><em>\</em>实验性质**</strong></td><td>必修</td><td></td><td></td></tr><tr><td><strong><em>\</em>实验环境**</strong></td><td>网络环境：如实验室以太网、寝室无线局域网等硬件配置：包括CPU、主存容量、网络适配器数据率等操作系统：windows实验软件：如wireshark、IE等</td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验目的**</strong></td><td>1.  熟悉TCP协议的基本原理2.  利用WireShark对TCP协议进行分析</td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验原理*****</strong>*（预备知识）****</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验内容（实验步骤和方法）**</strong></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1.  捕获大量的由本地主机到远程服务器的TCP分组（1）  启动WireShark，开始分组捕获。（2）  启动浏览器，打开<a href="http://www.uzz.edu.cn/jsjx/index.asp" target="_blank" rel="noopener">http:// www.sina.com.cn/ </a>网页， （3）  停止分组捕获。2.  浏览追踪信息（1）  在显示筛选规则编辑框中输入“tcp”,可以看到在本地主机和服务器之间传输的一系列tcp和HTTP消息，你应该能看到包含SYN Segment的三次握手。也可以看到有主机向服务器发送的一个HTTP GET消息和一系列的“http continuation”报文。（2）  根据操作回答“四、实验报告内容”中的1-2题。3.  TCP基础   根据操作回答“四、实验报告内容”中的3-10题4.  TCP拥塞控制（1） 在WireShark已捕获分组列表子窗口中选择一个TCP 报文段。选择菜单： Statistics-&gt;TCP Stream Graph-&gt; Time-Sequence-Graph(Stevens)。你会看到如下所示的图。<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps27.png" alt="img"> （2） 根据操作回答“四、实验报告内容”中的11-12题。</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验结果（根据实验内容回答问题）**</strong></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>1. 向<a href="http://www.sina.com.cn服务器传送文件的客户端主机的IP地址和TCP端口号分别是多少？主机">www.sina.com.cn服务器传送文件的客户端主机的IP地址和TCP端口号分别是多少？主机</a> Src:172.18.3.109<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps28.jpg" alt="img">端口 src port：50946  2. <a href="http://www.sina.com.cn服务器的IP地址是多少？对这一连接，它用来发送和接收TCP报文的端口号是多少？主机">www.sina.com.cn服务器的IP地址是多少？对这一连接，它用来发送和接收TCP报文的端口号是多少？主机</a> Src:183.60.95.219<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps29.jpg" alt="img">端口 src port：443    3. 客户服务器之间用于初始化TCP连接的TCP SYN报文段的序号（sequence number）是多少？在该报文段中，是用什么来标示该报文段是SYN报文段的？报文段的序号是0，用seq来表示报文段    4. 服务器向客户端发送的SYNACK报文段序号是多少？该报文段中，Acknowledgement字段的值是多少？<a href="http://www.sina.com.cn服务器是如何决定此值的？在该报文段中，是用什么来标识该报文段是SYN">www.sina.com.cn服务器是如何决定此值的？在该报文段中，是用什么来标识该报文段是SYN</a> ACK报文段的？Sequence number：0   （relative sequence number）Acknowledgment number: 1   (relative ack number)用Flags: 0x002 (SYN)来标识该报文段 5. 包含HTTP  GET消息的TCP报文段的序号是多少？Sequence number: 1   (relative sequence number)<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps30.jpg" alt="img"> 6. <img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps31.jpg" alt="img">如果将包含HTTP GET消息的TCP报文段看作是TCP连接上的第一个报文段，那么该TCP连接上的第六个报文段的序号是多少？是何时发送的？该报文段所对应的ACK是何时接收的？序号为755<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps32.jpg" alt="img"> 发送时间为10.43.05<img src="C:%5CUsers%5C18408%5CAppData%5CLocal%5CTemp%5Cksohtml18368%5Cwps33.jpg" alt="img"> 7. 前六个TCP报文段的长度各是多少？都是1400   <img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps34.jpg" alt="img"> 8. 在整个跟踪过程中，接收端向发送端通知的最小可用缓存是多少？限制发送端的传输以后，接收端的缓存是否仍然不够用？最小可用缓存是15872 没有发生过<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps35.jpg" alt="img"> 9. 在跟踪文件中是否有重传的报文段？判断的依据是什么？没有，从TCP报文段的序列号中可以看出。从源端发往目的端的序号逐渐递增，如果这其中有重传的报文段，则其序号中应该有小于其临近的分组序号的分组，在图中未看到这样的分组，所以没有被重传的分组。10. TCP连接的吞吐率(bytes transferred per unit time，单位时间传输的字节数)是多少？写出你的计算过程。传输的字节数是153010传输时间是2.362480-1.153008=1.209472吞吐率（取整）=153010/1.209472=126509 byte/s11. 利用Time-Sequence-Graph(Stevens) plotting工具，浏览由客户端向服务器发送的报文段序号和时间对应关系图。你能否辨别出TCP慢启动阶段的起止，以及在何处转入避免拥塞阶段？     慢启动阶段，无避免拥塞阶段<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps36.jpg" alt="img">12. 阐述所测量到的数据与TCP理想化的行为有何不同？在慢启动阶段时，如果有网络拥塞的话，发送方会根据AIMD算法进行调整。在此实验中，在发送方还可以发送数据的时候，已经没有数据需要发送了。在Web应用中，有些web对象比较小，在慢启动还没有结束之前，传送就已经结束了，所以传送小的web对象受到TCP慢启动阶段的影响，导致较长的延迟。</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>成绩：**</strong></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验名称**</strong></td><td>实验五 HTTP和DNS分析</td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验时间**</strong></td><td>2020年  月  日 10:00-11:40时</td><td><strong><em>\</em>实验地点**</strong></td><td>计通楼210</td><td><strong><em>\</em>实验学时**</strong></td><td>2学时</td></tr><tr><td><strong><em>\</em>实验类型**</strong></td><td>验证</td><td><strong><em>\</em>实验性质**</strong></td><td>必修</td><td></td><td></td></tr><tr><td><strong><em>\</em>实验环境**</strong></td><td>网络环境：如实验室以太网、寝室无线局域网等硬件配置：包括CPU、主存容量、网络适配器数据率等操作系统：windows实验软件：如wireshark、IE等</td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验目的**</strong></td><td>1. 熟悉并掌握WireShark的基本操作，了解网络协议实体间的交互以及报文交换。2. 分析HTTP和DNS协议</td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验原理*****</strong>*（预备知识）****</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验内容（实验步骤和方法）**</strong></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>1.</strong>   HTTP分析（1） 启动WireShark，开始分组捕获。（2） 启动主机上的web浏览器，在浏览器的地址栏中输入： <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>；浏览器将显示百度搜索网页。（3） 在窗口的显示过滤规则编辑框处输入“http”，分组列表子窗口中将只显示所捕获到的HTTP消息。选择分组列表窗口中的第一条http报文。它应该是你的计算机发向<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>服务器的HTTP GET报文。（4） 停止分组捕获。  根据捕获窗口内容，回答“实验报告内容”中的1-4题。2.  跟踪并分析DNS  nslookup工具允许主机向指定的DNS服务器查询某个DNS记录。如果没有指明DNS服务器，nslookup将把查询请求发向默认的DNS服务器。  nslookup的一般格式是：  nslookup –option1 –option2 host-to-find dns-server  ipconfig命令用来显示你当前的TCP/IP信息，包括：你的地址、DNS服务器的地址、适配器的类型等信息。如果，要显示与主机相关的信息用命令：  ipconfig/all  如果查看DNS缓存中的记录用命令：   ipconfig/displaydns  要清空DNS缓存，用命令：  ipconfig /flushdns  运行以上命令需要进入MSDOS环境。(开始菜单－&gt;运行－&gt;输入命令“cmd”)（1） 利用ipconfig命令清空主机上的DNS缓存。启动浏览器，并将浏览器的缓存清空。（2） 启动WireShark，在显示过滤筛选规则编辑框处输入：    “ip.addr = = your_IP_address”(如：ip.addr= =10.17.7.23)    过滤器将会删除所有目的地址和源地址与指定IP地址都不同的分组。（3）  开始WireShark分组捕获。（4）  在浏览器的地址栏中输入：<a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>后，回车。（5）  停止分组捕获。（6）  根据操作回答“实验报告内容”中的5-8题。 （7） 开始WireShark分组捕获。（8）  <a href="http://www.sin.com上进行nslookup（即执行命令：nslookup">www.sin.com上进行nslookup（即执行命令：nslookup</a>  <a href="http://www.sin.com）。（9）" target="_blank" rel="noopener">www.sin.com）。（9）</a>  停止分组捕获。（10）  根据操作回答“实验报告内容” 中的 9-11题。</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>实验结果（根据实验内容回答问题）**</strong></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>此页不够可加页<strong>1.</strong> HTTP分析（1） 从发出HTTP GET消息到接收到HTTP OK响应报文共需要多长时间？（在默认的情况下，分组列表窗口中Time列的值是从WireShark开始追踪到分组被捕获时总的时间， 以秒为单位。若要按time-of-day格式显示Time列的值，需选择View下拉菜单，再选择Time Display Format，然后选择Time-of-day。）共需 （2） <img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps37.jpg" alt="img">写出第3步所显示的HTTP消息头部行信息并说明其含义？  （3） <img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps38.jpg" alt="img">你的浏览器使用的是HTTP1.0，还是HTTP1.1？你所访问的Web服务器所使用HTTP协议的版本号是多少？ <img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps39.jpg" alt="img">   <img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps40.jpg" alt="img">都是 HTTP1.1 （4） 从服务器向你的浏览器返回response消息的状态代码是多少？表示什么意思？ 状态代码是302，表示重定向，如果完成请求还必须采取进一步的行动。2.  跟踪并分析DNS（5） 定位到DNS查询消息和查询响应报文，这两种报文的发送是基于UDP还是基于TCP的？ <img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps41.jpg" alt="img">)<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps42.jpg" alt="img"> 都是UDP   （6） <img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps43.jpg" alt="img">DNS查询消息的目的端口号是多少？DNS查询响应消息的源端口号是多少？ 目的端口号是53，DNS查询响应消息的源端口号是53。 （7） DNS查询消息发送的目的地的IP地址是多少？利用ipconfig命令（ipconfig/all查看你主机的本地DNS服务器的IP地址。这两个地址相同吗？<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps44.jpg" alt="img"> DNS查询消息发送的目的地的IP地址是222.246.129.80；这两个地址相同 （8） 考虑一下你的主机随后发送的TCP SYN Segment， 包含SYN Segment的IP分组头部中目的IP地址是否与在DNS查询响应消息中提供的某个IP地址相对应？<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps45.jpg" alt="img">与源地址ip相同，DNS目的ip不同。 <img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps46.jpg" alt="img"> （9） DNS查询消息的目的端口号是多少？DNS查询响应消息的源端口号是多少？ DNS查询消息的目的端口号是53，DNS查询响应消息的源端口号是53 （10） DNS查询消息发送的目的地的IP地址是多少？这个地址是你的默认本地DNS服务器的地址吗？<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps47.jpg" alt="img"> DNS查询消息发送的目的地的IP地址是222.246.129.80；这两个地址相同 （11） 检查DNS查询响应消息，其中提供了多少个“answers”？每个answers包含哪些内容？<img src="https://cdn.jsdelivr.net/gh/xiaohongri/Yafine-imgs/images/wps48.jpg" alt="img"> 检查DNS查询响应消息，其中提供了1个“answers”，</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td><strong><em>\</em>成绩：**</strong></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>颜色表及html代码</title>
      <link href="/2020/10/01/%E9%A2%9C%E8%89%B2%E8%A1%A8%E5%8F%8Ahtml%E4%BB%A3%E7%A0%81/"/>
      <url>/2020/10/01/%E9%A2%9C%E8%89%B2%E8%A1%A8%E5%8F%8Ahtml%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="http://xh.5156edu.com/page/z1015m9220j18754.html" target="_blank" rel="noopener">http://xh.5156edu.com/page/z1015m9220j18754.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio导入和删除jar包</title>
      <link href="/2020/09/30/Android%20Studio%E5%AF%BC%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4jar%E5%8C%85/"/>
      <url>/2020/09/30/Android%20Studio%E5%AF%BC%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4jar%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>之前使用Eclipse打包的jar在对方AS上编译报错，Arcgis for Android 不再支持Eclipse……总之，有很多很多原因促使自己从Eclipse转到AS学习和使用。这里不再比较Eclipse和AS的不同，事实上两者的理念非常不同。</p><p>1、Android Studio 导入jar包</p><p>AS中没有Eclipse的【Build Path】，也没有找到很多博客讲到【Add as Library】，如<a href="http://blog.csdn.net/qq_16628781/article/details/49280291。操作如下：" target="_blank" rel="noopener">http://blog.csdn.net/qq_16628781/article/details/49280291。操作如下：</a></p><p>（1）复制jar包到libs物理路径下</p><p>将复制的jar包放到app路径下的libs文件夹里，如果没有libs文件夹，则创建libs文件夹。</p><p>（2）打开Project Structure（或者右击工程，选择【Open Module Settings】）</p><p>【File】——【Project Structure】，在【Dependencies】中点击右上角的“+”，选择【File Dependency】<img src="https://img-blog.csdn.net/20170404161745950?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcmVud3VkYW8yNA==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p><img src="https://img-blog.csdn.net/20170404161954502" alt="img"></p><p>（3）在select path对话框中选择要添加的jar包</p><p><img src="https://img-blog.csdn.net/20170404162057549" alt="img"></p><p>一路OK。</p><p>(4)查看buildl.gradle该文件会在打包时编译</p><p><img src="https://img-blog.csdn.net/20170404162540337" alt="img"></p><p>2、删除jar包</p><p>（1）是否可以直接删除jar包？No，这是因为该文件路径已经加入编译路径，需要先删除。<img src="https://img-blog.csdn.net/20170404162337256" alt="img"></p><p>（2）在build.gradle中手动删除compiled files</p><p>以删除ips.jar包为例，需要删除</p><pre><code>compile files('libs/ips.jar')</code></pre><p>（3）可视化操作</p><p>打开Project Structure，选择要删除的jar包，然后点击右上角的红色“-”，OK。</p><p>（4）delete jar包</p><p>右击jar，选择delete，此时jar包已被清除。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android 调用快递鸟api 实现物流跟踪（在途监控）</title>
      <link href="/2020/09/30/Android%20%E8%B0%83%E7%94%A8%E5%BF%AB%E9%80%92%E9%B8%9Fapi%20%E5%AE%9E%E7%8E%B0%E7%89%A9%E6%B5%81%E8%B7%9F%E8%B8%AA%EF%BC%88%E5%9C%A8%E9%80%94%E7%9B%91%E6%8E%A7%EF%BC%89/"/>
      <url>/2020/09/30/Android%20%E8%B0%83%E7%94%A8%E5%BF%AB%E9%80%92%E9%B8%9Fapi%20%E5%AE%9E%E7%8E%B0%E7%89%A9%E6%B5%81%E8%B7%9F%E8%B8%AA%EF%BC%88%E5%9C%A8%E9%80%94%E7%9B%91%E6%8E%A7%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>效果</p><pre><code>![img](https://img-blog.csdn.net/20180917110653522?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzI3NDAwMzM1/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70)</code></pre><p>官网地址：<a href="http://www.kdniao.com/api-monitor" target="_blank" rel="noopener">http://www.kdniao.com/api-monitor</a></p><pre class=" language-html"><code class="language-html">/** 工具类 **/import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.io.OutputStreamWriter;import java.io.UnsupportedEncodingException;import java.net.HttpURLConnection;import java.net.URL;import java.net.URLEncoder;import java.security.MessageDigest;import java.util.HashMap;import java.util.Map;/** * Created by Administrator on 2018/9/13 0013. */public class LogisticsUtils {    private String code;//物流公司编码    private String logisticCode;//物流单号    private String orderSN;//订单号（可不传）    public LogisticsUtils(String orderSN,String code, String logisticCode) {        this.orderSN = orderSN;        this.code = code;        this.logisticCode = logisticCode;    }    //电商ID    private String EBusinessID="请到快递鸟官网申请http://www.kdniao.com/ServiceApply.aspx";    //电商加密私钥，快递鸟提供，注意保管，不要泄漏    private String AppKey="请到快递鸟官网申请http://www.kdniao.com/ServiceApply.aspx";    //请求url    private String ReqURL="http://api.kdniao.cc/Ebusiness/EbusinessOrderHandle.aspx";    /**     * Json方式 查询订单物流轨迹     * @throws Exception     */    public String getOrderTracesByJson() throws Exception{        String requestData= "{'OrderCode':'','ShipperCode':'" + code + "','LogisticCode':'" + logisticCode + "'}";        Map<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">String</span><span class="token punctuation">></span></span> params = new HashMap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">String</span><span class="token punctuation">></span></span>();        params.put("RequestData", urlEncoder(requestData, "UTF-8"));        params.put("EBusinessID", EBusinessID);        params.put("RequestType", "1002");        String dataSign=encrypt(requestData, AppKey, "UTF-8");        params.put("DataSign", urlEncoder(dataSign, "UTF-8"));        params.put("DataType", "2");        String result=sendPost(ReqURL, params);        //根据公司业务处理返回的信息......        return result;    }    /**     * MD5加密     * @param str 内容     * @param charset 编码方式     * @throws Exception     */    @SuppressWarnings("unused")    private String MD5(String str, String charset) throws Exception {        MessageDigest md = MessageDigest.getInstance("MD5");        md.update(str.getBytes(charset));        byte[] result = md.digest();        StringBuffer sb = new StringBuffer(32);        for (int i = 0; i &lt; result.length; i++) {            int val = result[i] &amp; 0xff;            if (val &lt;= 0xf) {                sb.append("0");            }            sb.append(Integer.toHexString(val));        }        return sb.toString().toLowerCase();    }    /**     * base64编码     * @param str 内容     * @param charset 编码方式     * @throws UnsupportedEncodingException     */    private String base64(String str, String charset) throws UnsupportedEncodingException {        String encoded = base64Encode(str.getBytes(charset));        return encoded;    }    @SuppressWarnings("unused")    private String urlEncoder(String str, String charset) throws UnsupportedEncodingException{        String result = URLEncoder.encode(str, charset);        return result;    }    /**     * 电商Sign签名生成     * @param content 内容     * @param keyValue Appkey     * @param charset 编码方式     * @throws UnsupportedEncodingException ,Exception     * @return DataSign签名     */    @SuppressWarnings("unused")    private String encrypt (String content, String keyValue, String charset) throws Exception    {        if (keyValue != null)        {            return base64(MD5(content + keyValue, charset), charset);        }        return base64(MD5(content, charset), charset);    }    /**     * 向指定 URL 发送POST方法的请求     * @param url 发送请求的 URL     * @param params 请求的参数集合     * @return 远程资源的响应结果     */    @SuppressWarnings("unused")    private String sendPost(String url, Map<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">String</span><span class="token punctuation">></span></span> params) {        OutputStreamWriter out = null;        BufferedReader in = null;        StringBuilder result = new StringBuilder();        try {            URL realUrl = new URL(url);            HttpURLConnection conn =(HttpURLConnection) realUrl.openConnection();            // 发送POST请求必须设置如下两行            conn.setDoOutput(true);            conn.setDoInput(true);            // POST方法            conn.setRequestMethod("POST");            // 设置通用的请求属性            conn.setRequestProperty("accept", "*/*");            conn.setRequestProperty("connection", "Keep-Alive");            conn.setRequestProperty("user-agent",                    "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1)");            conn.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");            conn.connect();            // 获取URLConnection对象对应的输出流            out = new OutputStreamWriter(conn.getOutputStream(), "UTF-8");            // 发送请求参数            if (params != null) {                StringBuilder param = new StringBuilder();                for (Map.Entry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">String</span><span class="token punctuation">></span></span> entry : params.entrySet()) {                    if(param.length()>0){                        param.append("&amp;");                    }                    param.append(entry.getKey());                    param.append("=");                    param.append(entry.getValue());                    System.out.println(entry.getKey()+":"+entry.getValue());                }                System.out.println("param:"+param.toString());                out.write(param.toString());            }            // flush输出流的缓冲            out.flush();            // 定义BufferedReader输入流来读取URL的响应            in = new BufferedReader(                    new InputStreamReader(conn.getInputStream(), "UTF-8"));            String line;            while ((line = in.readLine()) != null) {                result.append(line);            }        } catch (Exception e) {            e.printStackTrace();            L.i("TAG_LogisticsException","e="+e.toString());        }        //使用finally块来关闭输出流、输入流        finally{            try{                if(out!=null){                    out.close();                }                if(in!=null){                    in.close();                }            }            catch(IOException ex){                ex.printStackTrace();            }        }        return result.toString();    }    private static char[] base64EncodeChars = new char[] {            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',            'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P',            'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X',            'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f',            'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n',            'o', 'p', 'q', 'r', 's', 't', 'u', 'v',            'w', 'x', 'y', 'z', '0', '1', '2', '3',            '4', '5', '6', '7', '8', '9', '+', '/' };    public static String base64Encode(byte[] data) {        StringBuffer sb = new StringBuffer();        int len = data.length;        int i = 0;        int b1, b2, b3;        while (i &lt; len) {            b1 = data[i++] &amp; 0xff;            if (i == len)            {                sb.append(base64EncodeChars[b1 >>> 2]);                sb.append(base64EncodeChars[(b1 &amp; 0x3) &lt;&lt; 4]);                sb.append("==");                break;            }            b2 = data[i++] &amp; 0xff;            if (i == len)            {                sb.append(base64EncodeChars[b1 >>> 2]);                sb.append(base64EncodeChars[((b1 &amp; 0x03) &lt;&lt; 4) | ((b2 &amp; 0xf0) >>> 4)]);                sb.append(base64EncodeChars[(b2 &amp; 0x0f) &lt;&lt; 2]);                sb.append("=");                break;            }            b3 = data[i++] &amp; 0xff;            sb.append(base64EncodeChars[b1 >>> 2]);            sb.append(base64EncodeChars[((b1 &amp; 0x03) &lt;&lt; 4) | ((b2 &amp; 0xf0) >>> 4)]);            sb.append(base64EncodeChars[((b2 &amp; 0x0f) &lt;&lt; 2) | ((b3 &amp; 0xc0) >>> 6)]);            sb.append(base64EncodeChars[b3 &amp; 0x3f]);        }        return sb.toString();    }}</code></pre><p><strong>Activity调用</strong></p><p><strong>//开启线程（主线程不能进行耗时操作）</strong></p><pre class=" language-html"><code class="language-html">new Thread(){    @Override    public void run() {        super.run();        LogisticsUtils api=new LogisticsUtils("订单号（可不传）","物流公司编码","物流单号");        String resultJson= null;        try {            resultJson = api.getOrderTracesByJson();            mLogistics=JSONObject.parseObject(resultJson, Logistics.class);//使用的的fastJson 解析        } catch (Exception e) {            e.printStackTrace();            L.i("TAG_LogisticsException",e.toString());        }finally {            mHandler.sendEmptyMessage(1);//在主线程更新ui        }    }}.start();private Handler mHandler=new Handler(){    @Override    public void handleMessage(Message msg) {        super.handleMessage(msg);       if(mLogistics!=null){         //设置数据          }    }};</code></pre><p>//实体类</p><pre class=" language-html"><code class="language-html">public class Logistics {    private String LogisticCode;    private String ShipperCode;    private String State;    private String EBusinessID;    private boolean Success;    private List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TracesBean</span><span class="token punctuation">></span></span> Traces;    public String getLogisticCode() {        return LogisticCode;    }    public void setLogisticCode(String LogisticCode) {        this.LogisticCode = LogisticCode;    }    public String getShipperCode() {        return ShipperCode;    }    public void setShipperCode(String ShipperCode) {        this.ShipperCode = ShipperCode;    }    public String getState() {        return State;    }    public void setState(String State) {        this.State = State;    }    public String getEBusinessID() {        return EBusinessID;    }    public void setEBusinessID(String EBusinessID) {        this.EBusinessID = EBusinessID;    }    public boolean isSuccess() {        return Success;    }    public void setSuccess(boolean Success) {        this.Success = Success;    }    public List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TracesBean</span><span class="token punctuation">></span></span> getTraces() {        return Traces;    }    public void setTraces(List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TracesBean</span><span class="token punctuation">></span></span> Traces) {        this.Traces = Traces;    }    public static class TracesBean {        /**         * AcceptStation : 【金华市】  【兰溪】（0579-88903278） 的 鲍光荣 （15356793398） 已揽收         * AcceptTime : 2018-08-15 18:45:57         */        private String AcceptStation;        private String AcceptTime;        public String getAcceptStation() {            return AcceptStation;        }        public void setAcceptStation(String AcceptStation) {            this.AcceptStation = AcceptStation;        }        public String getAcceptTime() {            return AcceptTime;        }        public void setAcceptTime(String AcceptTime) {            this.AcceptTime = AcceptTime;        }    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android之Adapter用法总结</title>
      <link href="/2020/09/29/Android%E4%B9%8BAdapter%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/"/>
      <url>/2020/09/29/Android%E4%B9%8BAdapter%E7%94%A8%E6%B3%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>原文地址为： <a href="http://www.javaxxz.com/thread-366867-1-1.html" target="_blank" rel="noopener">Android之Adapter用法总结</a> </p><p>1.概念</p><p>​    Adapter是连接后端数据和前端显示的适配器接口，是数据和UI（View）之间一个重要的纽带。在常见的View(ListView,GridView)等地方都需要用到Adapter。如下图直观的表达了Data、Adapter、View三者的关系：</p><p><img src="http://www.itdaan.com/imgs/7/6/3/0/90/5a031ddfef1b419fc712b2b85a30c61e.jpe" alt="img"></p><p>Android中所有的Adapter一览：</p><p><img src="http://www.itdaan.com/imgs/6/7/4/0/44/7d1d63e8855f237fec67a3f9fa0ed077.jpe" alt="img"></p><p>​    由图可以看到在Android中与Adapter有关的所有接口、类的完整层级图。在我们使用过程中可以根据自己的需求实现接口或者继承类进行一定的扩展。比较常用的有 BaseAdapter，SimpleAdapter，ArrayAdapter，SimpleCursorAdapter等。</p><ul><li>BaseAdapter是一个抽象类，继承它需要实现较多的方法，所以也就具有较高的灵活性；</li><li>ArrayAdapter支持泛型操作，最为简单，只能展示一行字。</li><li>SimpleAdapter有最好的扩充性，可以自定义出各种效果。</li><li>SimpleCursorAdapter可以适用于简单的纯文字型ListView，它需要Cursor的字段和UI的id对应起来。如需要实现更复杂的UI也可以重写其他方法。可以认为是SimpleAdapter对数据库的简单结合，可以方便地把数据库的内容以列表的形式展示出来。</li></ul><p>2.应用案例</p><p>1）<strong>ArrayAdapter</strong></p><p>列表的显示需要三个元素：</p><p>a．ListVeiw 用来展示列表的View。</p><p>b．适配器 用来把数据映射到ListView上的中介。</p><p>c．数据  具体的将被映射的字符串，图片，或者基本组件。</p><p>案例一</p><pre><code>public class ArrayAdapterActivity extends ListActivity {     @Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);//列表项的数据         String[] strs = {"1","2","3","4","5"};         ArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;String&gt;(this,android.R.layout.simple_expandable_list_item_1,strs);         setListAdapter(adapter);     } }</code></pre><p>案例二</p><pre><code>    public class MyListView extends Activity {private ListView listView;//private List&lt;String&gt; data = new ArrayList&lt;String&gt;();        @Overridepublic void onCreate(Bundle savedInstanceState){super.onCreate(savedInstanceState);            listView = new ListView(this);            listView.setAdapter(new ArrayAdapter&lt;String&gt;(this, android.R.layout.simple_expandable_list_item_1,getData()));            setContentView(listView);        }private List&lt;String&gt; getData(){            List&lt;String&gt; data = new ArrayList&lt;String&gt;();            data.add("测试数据1");            data.add("测试数据2");            data.add("测试数据3");            data.add("测试数据4");return data;        }    }</code></pre><p>​    上面代码使用了ArrayAdapter(Context context, int textViewResourceId, List<t> objects)来装配数据，要装配这些数据就需要一个连接ListView视图对象和数组数据的适配器来两者的适配工作，ArrayAdapter的构造需要三个参数，依次为this,布局文件（注意这里的布局文件描述的是列表的每一行的布局，android.R.layout.simple_list_item_1是系统定义好的布局文件只显示一行文字，数据源(一个List集合)。同时用setAdapter（）完成适配的最后工作。效果图如下：</t></p><p><img src="http://www.itdaan.com/imgs/4/1/2/6/24/1c56fb0a27d372e7b3e4c6d0a627e9fb.jpe" alt="img"></p><p><strong>2）\</strong>SimpleAdapter**<br>**　　simpleAdapter的扩展性最好，可以定义各种各样的布局出来，可以放上ImageView（图片），还可以放上Button（按钮），CheckBox（复选框）等等。下面的代码都直接继承了ListActivity，ListActivity和普通的Activity没有太大的差别，不同就是对显示ListView做了许多优化，方面显示而已。</p><p>案例一</p><p>simple.xml</p><pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"android:orientation="vertical"android:layout_width="fill_parent"android:layout_height="fill_parent"&gt;&lt;ImageViewandroid:id="@+id/img"android:layout_width="wrap_content"android:layout_height="wrap_content"android:layout_margin="5dp"/&gt;&lt;TextViewandroid:id="@+id/title"android:layout_width="wrap_content" android:layout_height="wrap_content" android:textColor="#ffffff"android:textSize="20sp"/&gt;&lt;/LinearLayout&gt;public class SimpleAdapterActivity extends ListActivity {     @Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);         SimpleAdapter adapter = new SimpleAdapter(this, getData(), R.layout.simple, new String[] { "title",  "img" }, new int[] { R.id.title, R.id.img });         setListAdapter(adapter);     }private List&lt;Map&lt;String, Object&gt;&gt; getData() {//map.put(参数名字,参数值)         List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();         Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();         map.put("title", "摩托罗拉");         map.put("img", R.drawable.icon);         list.add(map);         map = new HashMap&lt;String, Object&gt;();         map.put("title", "诺基亚");         map.put("img", R.drawable.icon);         list.add(map);         map = new HashMap&lt;String, Object&gt;();         map.put("title", "三星");         map.put("img", R.drawable.icon);         list.add(map);return list;         }   }</code></pre><p>案例二<br>　　下面的程序是实现一个带有图片的类表。首先需要定义好一个用来显示每一个列内容的xml，vlist.xml</p><pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:orientation="horizontal" android:layout_width="fill_parent"        android:layout_height="fill_parent"&gt;   &lt;ImageView android:id="@+id/img" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_margin="5px"/&gt;&lt;LinearLayout android:orientation="vertical"  android:layout_width="wrap_content"  android:layout_height="wrap_content"&gt;&lt;TextView android:id="@+id/title" android:layout_width="wrap_content" android:layout_height="wrap_content"                android:textColor="#FFFFFFFF" android:textSize="22px" /&gt;&lt;TextView android:id="@+id/info"  android:layout_width="wrap_content" android:layout_height="wrap_content"                android:textColor="#FFFFFFFF" android:textSize="13px" /&gt;&lt;/LinearLayout&gt;&lt;/LinearLayout&gt;public class MyListView3 extends ListActivity {// private List&lt;String&gt; data = new ArrayList&lt;String&gt;();        @Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);            SimpleAdapter adapter = new SimpleAdapter(this,getData(),R.layout.vlist,new String[]{"title","info","img"},new int[]{R.id.title,R.id.info,R.id.img});            setListAdapter(adapter);        }private List&lt;Map&lt;String, Object&gt;&gt; getData() {            List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();            Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();            map.put("title", "G1");            map.put("info", "google 1");            map.put("img", R.drawable.i1);            list.add(map);            map = new HashMap&lt;String, Object&gt;();            map.put("title", "G2");            map.put("info", "google 2");            map.put("img", R.drawable.i2);            list.add(map);            map = new HashMap&lt;String, Object&gt;();            map.put("title", "G3");            map.put("info", "google 3");            map.put("img", R.drawable.i3);            list.add(map);return list;        }    }</code></pre><p>　　<strong>使用simpleAdapter的数据用一般都是HashMap构成的List，list的每一节对应ListView的每一行。</strong>HashMap的每个键值数据映射到布局文件中对应id的组件上。因为系统没有对应的布局文件可用，我们可以自己定义一个布局vlist.xml。下面做适配，new一个SimpleAdapter参数一次是：this，布局文件（vlist.xml），HashMap的 title 和 info，img。布局文件的组件id，title，info，img。布局文件的各组件分别映射到HashMap的各元素上，完成适配。</p><p>运行效果如下图：</p><p><img src="http://www.itdaan.com/imgs/2/3/3/5/59/9e39493c7b6162a06ce2563889a4b7f7.jpe" alt="img"></p><p><strong>3）SimpleCursorAdapter</strong></p><pre><code>public class SimpleCursorAdapterActivity extends ListActivity {     @Overridepublic void onCreate(Bundle savedInstanceState) {super.onCreate(savedInstanceState);//获得一个指向系统通讯录数据库的Cursor对象获得数据来源         Cursor cur = getContentResolver().query(People.CONTENT_URI, null, null, null, null);         startManagingCursor(cur);//实例化列表适配器         ListAdapter adapter = new SimpleCursorAdapter(this, android.R.layout.simple_list_item_1, cur, new String[] {People.NAME}, new int[] {android.R.id.text1});         setListAdapter(adapter);     } }</code></pre><p><strong>一定要以数据库作为数据源的时候,才能使用SimpleCursorAdapter，</strong>这里特别需要注意的一点是：不要忘了在AndroidManifest.xml文件中加入权限</p><pre><code>&lt;uses-permission android:name="android.permission.READ_CONTACTS"&gt;&lt;/uses-permission&gt;</code></pre><p>效果如下：</p><p><img src="http://www.itdaan.com/imgs/2/2/3/7/21/988a4034d7f7b644d2def0983311ad70.jpe" alt="img"></p><p><strong>4）BaseAdapter</strong></p><p>　　有时候，列表不光会用来做显示用，我们同样可以在在上面添加按钮。添加按钮首先要写一个有按钮的xml文件，然后自然会想到用上面的方法定义一个适配器，然后将数据映射到布局文件上。但是事实并非这样，因为按钮是无法映射的，即使你成功的用布局文件显示出了按钮也无法添加按钮的响应，这时就要研究一下ListView是如何现实的了，而且必须要重写一个类继承BaseAdapter。下面的示例将显示一个按钮和一个图片，两行字如果单击按钮将删除此按钮的所在行。并告诉你ListView究竟是如何工作的。</p><p>vlist2.xml</p><pre><code>&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" android:orientation="horizontal" android:layout_width="fill_parent"        android:layout_height="fill_parent"&gt;&lt;ImageView android:id="@+id/img" android:layout_width="wrap_content" android:layout_height="wrap_content" android:layout_margin="5px"/&gt;&lt;LinearLayout android:orientation="vertical" android:layout_width="wrap_content" android:layout_height="wrap_content"&gt;&lt;TextView android:id="@+id/title" android:layout_width="wrap_content" android:layout_height="wrap_content"                android:textColor="#FFFFFFFF" android:textSize="22px" /&gt;&lt;TextView android:id="@+id/info" android:layout_width="wrap_content" android:layout_height="wrap_content"                android:textColor="#FFFFFFFF" android:textSize="13px" /&gt;&lt;/LinearLayout&gt;&lt;Button android:id="@+id/view_btn" android:layout_width="wrap_content"  android:layout_height="wrap_content"            android:text="@string/s_view_btn" android:layout_gravity="bottom|right" /&gt;&lt;/LinearLayout&gt;</code></pre><pre><code>/**002     * @author 003     *004     */005    public class MyListView4 extends ListActivity {006     007     008        private List&lt;Map&lt;String, Object&gt;&gt; mData;009         010        @Override011        public void onCreate(Bundle savedInstanceState) {012            super.onCreate(savedInstanceState);013            mData = getData();014            MyAdapter adapter = new MyAdapter(this);015            setListAdapter(adapter);016        }017     018        private List&lt;Map&lt;String, Object&gt;&gt; getData() {019            List&lt;Map&lt;String, Object&gt;&gt; list = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();020     021            Map&lt;String, Object&gt; map = new HashMap&lt;String, Object&gt;();022            map.put("title", "G1");023            map.put("info", "google 1");024            map.put("img", R.drawable.i1);025            list.add(map);026     027            map = new HashMap&lt;String, Object&gt;();028            map.put("title", "G2");029            map.put("info", "google 2");030            map.put("img", R.drawable.i2);031            list.add(map);032     033            map = new HashMap&lt;String, Object&gt;();034            map.put("title", "G3");035            map.put("info", "google 3");036            map.put("img", R.drawable.i3);037            list.add(map);038             039            return list;040        }041         042        // ListView 中某项被选中后的逻辑043        @Override044        protected void onListItemClick(ListView l, View v, int position, long id) {045             046            Log.v("MyListView4-click", (String)mData.get(position).get("title"));047        }048         049        /**050         * listview中点击按键弹出对话框051         */052        public void showInfo(){053            new AlertDialog.Builder(this)054            .setTitle("我的listview")055            .setMessage("介绍...")056            .setPositiveButton("确定", new DialogInterface.OnClickListener() {057                @Override058                public void onClick(DialogInterface dialog, int which) {059                }060            })061            .show();062             063        }064         065         066         067        public final class ViewHolder{068            public ImageView img;069            public TextView title;070            public TextView info;071            public Button viewBtn;072        }073         074         075        public class MyAdapter extends BaseAdapter{076     077            private LayoutInflater mInflater;078             079             080            public MyAdapter(Context context){081                this.mInflater = LayoutInflater.from(context);082            }083            @Override084            public int getCount() {085                // TODO Auto-generated method stub086                return mData.size();087            }088     089            @Override090            public Object getItem(int arg0) {091                // TODO Auto-generated method stub092                return null;093            }094     095            @Override096            public long getItemId(int arg0) {097                // TODO Auto-generated method stub098                return 0;099            }100     101            @Override102            public View getView(int position, View convertView, ViewGroup parent) {103                 104                ViewHolder holder = null;105                if (convertView == null) {106                     107                    holder=new ViewHolder(); 108                     109                    convertView = mInflater.inflate(R.layout.vlist2, null);110                    holder.img = (ImageView)convertView.findViewById(R.id.img);111                    holder.title = (TextView)convertView.findViewById(R.id.title);112                    holder.info = (TextView)convertView.findViewById(R.id.info);113                    holder.viewBtn = (Button)convertView.findViewById(R.id.view_btn);114                    convertView.setTag(holder);115                     116                }else {117                     118                    holder = (ViewHolder)convertView.getTag();119                }120                 121                 122                holder.img.setBackgroundResource((Integer)mData.get(position).get("img"));123                holder.title.setText((String)mData.get(position).get("title"));124                holder.info.setText((String)mData.get(position).get("info"));125                 126                holder.viewBtn.setOnClickListener(new View.OnClickListener() {127                     128                    @Override129                    public void onClick(View v) {130                        showInfo();                131                    }132                });133                 134                 135                return convertView;136            }137             138        }     139    }</code></pre><p>　　下面将对上述代码，做详细的解释，listView在开始绘制的时候，系统首先调用getCount（）函数，根据他的返回值得到listView的长度（这也是为什么在开始的第一张图特别的标出列表长度），然后根据这个长度，调用getView（）逐一绘制每一行。如果你的getCount（）返回值是0的话，列表将不显示同样return 1，就只显示一行。</p><p>　　系统显示列表时，首先实例化一个适配器（这里将实例化自定义的适配器）。当手动完成适配时，必须手动映射数据，这需要重写getView（）方法。系统在绘制列表的每一行的时候将调用此方法。getView()有三个参数，position表示将显示的是第几行，covertView是从布局文件中inflate来的布局。我们用LayoutInflater的方法将定义好的vlist2.xml文件提取成View实例用来显示。然后将xml文件中的各个组件实例化（简单的findViewById()方法）。这样便可以将数据对应到各个组件上了。但是按钮为了响应点击事件，需要为它添加点击监听器，这样就能捕获点击事件。至此一个自定义的listView就完成了，现在让我们回过头从新审视这个过程。系统要绘制ListView了，他首先获得要绘制的这个列表的长度，然后开始绘制第一行，怎么绘制呢？调用getView()函数。在这个函数里面首先获得一个View（实际上是一个ViewGroup），然后再实例并设置各个组件，显示之。好了，绘制完这一行了。那再绘制下一行，直到绘完为止。在实际的运行过程中会发现listView的每一行没有焦点了，这是因为Button抢夺了listView的焦点，只要布局文件中将Button设置为没有焦点就OK了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>如何在Fragment中使用findViewById</title>
      <link href="/2020/09/29/%E5%A6%82%E4%BD%95%E5%9C%A8Fragment%E4%B8%AD%E4%BD%BF%E7%94%A8findViewById/"/>
      <url>/2020/09/29/%E5%A6%82%E4%BD%95%E5%9C%A8Fragment%E4%B8%AD%E4%BD%BF%E7%94%A8findViewById/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>findViewById方法却只能被用在Activity类中，如果想在fragment中使用，</p><p>需要在findViewById前面 添加getView();</p><p>下面是一段代码，</p><pre><code>public class SquareFragment extends Fragment {    private TextView sq;    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        View square = inflater.inflate(R.layout.square_layout, container, false);        sq =getView().findViewById(R.id.square);        sq.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                MainActivity ma = (MainActivity) getActivity();                ma.setTabSelection(2);            }        });        return square;    }}</code></pre><p>这样用getView()前面没有问题，但是运行会发现空指针异常，原因呢是在使用了onCreateView创建视图， inflater插入的布局，用getView()引用，不是识别是哪一个布局</p><p>所以就报了空指针，</p><p>正确的写法如下</p><pre><code>public class SquareFragment extends Fragment {    private TextView sq;    @Nullable    @Override    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        View square = inflater.inflate(R.layout.square_layout, container, false);        sq = square.findViewById(R.id.square);        sq.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                MainActivity ma = (MainActivity) getActivity();                ma.setTabSelection(2);            }        });        return square;    }}</code></pre><p>在findViewById前面添加 插入的那个布局，它就能识别是哪一个布局了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安卓连接数据库实现登陆注册</title>
      <link href="/2020/09/28/%E5%AE%89%E5%8D%93%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C/"/>
      <url>/2020/09/28/%E5%AE%89%E5%8D%93%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E7%8E%B0%E7%99%BB%E9%99%86%E6%B3%A8%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>有一段时间没有更新博客了，以前小编都是发布有关spring boot的博客，今天换换口味，为大家带来安卓的Demo。<br>下载地址<a href="https://download.csdn.net/download/weixin_43055096/11049453" target="_blank" rel="noopener">https://download.csdn.net/download/weixin_43055096/11049453</a></p><h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p><strong>1：下载安装并配置Andriod studio</strong></p><p><strong>2：准备好mysql-connector-java-5.1.47.jar，这个驱动包网上都能下载</strong></p><p><strong>3：创建一个空的Activity</strong></p><p><strong>4：修改权限（很重要）</strong><br>如图<br><img src="https://img-blog.csdnimg.cn/20190322135725826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzA1NTA5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="主体"><a href="#主体" class="headerlink" title="主体"></a>主体</h1><p>1.导入mysql-connector-java-5.1.47.jar包 然后build library（其他的包可以不用管） <img src="https://img-blog.csdnimg.cn/20190322133449887.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzA1NTA5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>2.创建JdbcUtil</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wuge<span class="token punctuation">.</span>dbtext<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>FileInputStream<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Properties<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcUtil</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> JdbcUtil instance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> JdbcUtil <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcUtil</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span>String dbName<span class="token punctuation">,</span>String name<span class="token punctuation">,</span>String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://192.168.43.104:3306/"</span><span class="token operator">+</span>dbName<span class="token punctuation">;</span>            <span class="token keyword">return</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>name<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span>String file<span class="token punctuation">)</span><span class="token punctuation">{</span>        File f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>f<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            Properties pro <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                pro<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String url <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String name <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String password <span class="token operator">=</span> pro<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>name<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748</span></code></pre><h6 id="小编这里有两个getConnection，这里我们用到的是第一个，第二个是为了更加方便，直接把数据库相关信息写到文件通过文件找到相应的账号密码以及url"><a href="#小编这里有两个getConnection，这里我们用到的是第一个，第二个是为了更加方便，直接把数据库相关信息写到文件通过文件找到相应的账号密码以及url" class="headerlink" title="小编这里有两个getConnection，这里我们用到的是第一个，第二个是为了更加方便，直接把数据库相关信息写到文件通过文件找到相应的账号密码以及url"></a>小编这里有两个getConnection，这里我们用到的是第一个，第二个是为了更加方便，直接把数据库相关信息写到文件通过文件找到相应的账号密码以及url</h6><h3 id="JdbcUtil注意点"><a href="#JdbcUtil注意点" class="headerlink" title="JdbcUtil注意点"></a>JdbcUtil注意点</h3><p>1.这里的url是会动态变化的，他是根据你连接的网络不同而改变的，如何查找呢，下图给出查找的方式。</p><p>我们直接在控制台输入ipconfig ，红色箭头的地方就是我们需要的ip地址<br><img src="https://img-blog.csdnimg.cn/20190322134214982.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzA1NTA5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>3.创建 UserDao</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wuge<span class="token punctuation">.</span>dbtext<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>PreparedStatement<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>ResultSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>ContentValues<span class="token punctuation">.</span>TAG<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    JdbcUtil jdbcUtil <span class="token operator">=</span> JdbcUtil<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//第一个参数为数据库名称，第二个参数为数据库账号 第三个参数为数据库密码</span>    Connection conn <span class="token operator">=</span> jdbcUtil<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token string">"Dbtext"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注册</span>    <span class="token keyword">public</span>  <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String password<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>conn<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"register:conn is null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//进行数据库操作</span>            String sql <span class="token operator">=</span> <span class="token string">"insert into user(name,password) values(?,?)"</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                PreparedStatement pre <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>                 pre<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                 pre<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token keyword">return</span> pre<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    conn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//登录</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">login</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>String password<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>conn<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"register:conn is null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from user where name=? and password=?"</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                PreparedStatement pres <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>                pres<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>                pres<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>                ResultSet res <span class="token operator">=</span> pres<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">boolean</span> t <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> t<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263</span></code></pre><p>3.完成咋们的xml 小编这里做的很简陋</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>constraint<span class="token punctuation">.</span>ConstraintLayout xmlns<span class="token operator">:</span>android<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res/android"</span>    xmlns<span class="token operator">:</span>app<span class="token operator">=</span><span class="token string">"http://schemas.android.com/apk/res-auto"</span>    xmlns<span class="token operator">:</span>tools<span class="token operator">=</span><span class="token string">"http://schemas.android.com/tools"</span>    android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"match_parent"</span>    android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"match_parent"</span>    tools<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">".MainActivity"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>EditText        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/password"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>ems<span class="token operator">=</span><span class="token string">"10"</span>        android<span class="token operator">:</span>inputType<span class="token operator">=</span><span class="token string">"textPersonName"</span>        android<span class="token operator">:</span>hint<span class="token operator">=</span><span class="token string">"请输入密码"</span>        app<span class="token operator">:</span>layout_constraintBottom_toBottomOf<span class="token operator">=</span><span class="token string">"parent"</span>        app<span class="token operator">:</span>layout_constraintEnd_toEndOf<span class="token operator">=</span><span class="token string">"parent"</span>        app<span class="token operator">:</span>layout_constraintHorizontal_bias<span class="token operator">=</span><span class="token string">"0.5"</span>        app<span class="token operator">:</span>layout_constraintStart_toStartOf<span class="token operator">=</span><span class="token string">"parent"</span>        app<span class="token operator">:</span>layout_constraintTop_toTopOf<span class="token operator">=</span><span class="token string">"parent"</span>        app<span class="token operator">:</span>layout_constraintVertical_bias<span class="token operator">=</span><span class="token string">"0.4"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>EditText        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/name"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>ems<span class="token operator">=</span><span class="token string">"10"</span>        android<span class="token operator">:</span>hint<span class="token operator">=</span><span class="token string">"请输入用户名"</span>        android<span class="token operator">:</span>inputType<span class="token operator">=</span><span class="token string">"textPersonName"</span>        app<span class="token operator">:</span>layout_constraintBottom_toBottomOf<span class="token operator">=</span><span class="token string">"parent"</span>        app<span class="token operator">:</span>layout_constraintEnd_toEndOf<span class="token operator">=</span><span class="token string">"parent"</span>        app<span class="token operator">:</span>layout_constraintHorizontal_bias<span class="token operator">=</span><span class="token string">"0.5"</span>        app<span class="token operator">:</span>layout_constraintStart_toStartOf<span class="token operator">=</span><span class="token string">"parent"</span>        app<span class="token operator">:</span>layout_constraintTop_toTopOf<span class="token operator">=</span><span class="token string">"parent"</span>        app<span class="token operator">:</span>layout_constraintVertical_bias<span class="token operator">=</span><span class="token string">"0.2"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Button        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/register"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>onClick<span class="token operator">=</span><span class="token string">"fun"</span>        android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"注册"</span>        app<span class="token operator">:</span>layout_constraintBottom_toBottomOf<span class="token operator">=</span><span class="token string">"parent"</span>        app<span class="token operator">:</span>layout_constraintEnd_toEndOf<span class="token operator">=</span><span class="token string">"parent"</span>        app<span class="token operator">:</span>layout_constraintHorizontal_bias<span class="token operator">=</span><span class="token string">"0.8"</span>        app<span class="token operator">:</span>layout_constraintStart_toStartOf<span class="token operator">=</span><span class="token string">"parent"</span>        app<span class="token operator">:</span>layout_constraintTop_toTopOf<span class="token operator">=</span><span class="token string">"parent"</span>        app<span class="token operator">:</span>layout_constraintVertical_bias<span class="token operator">=</span><span class="token string">"0.6"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>Button        android<span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">"@+id/login"</span>        android<span class="token operator">:</span>layout_width<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>layout_height<span class="token operator">=</span><span class="token string">"wrap_content"</span>        android<span class="token operator">:</span>onClick<span class="token operator">=</span><span class="token string">"fun"</span>        android<span class="token operator">:</span>text<span class="token operator">=</span><span class="token string">"登录"</span>        app<span class="token operator">:</span>layout_constraintBottom_toBottomOf<span class="token operator">=</span><span class="token string">"parent"</span>        app<span class="token operator">:</span>layout_constraintEnd_toEndOf<span class="token operator">=</span><span class="token string">"parent"</span>        app<span class="token operator">:</span>layout_constraintHorizontal_bias<span class="token operator">=</span><span class="token string">"0.2"</span>        app<span class="token operator">:</span>layout_constraintStart_toStartOf<span class="token operator">=</span><span class="token string">"parent"</span>        app<span class="token operator">:</span>layout_constraintTop_toTopOf<span class="token operator">=</span><span class="token string">"parent"</span>        app<span class="token operator">:</span>layout_constraintVertical_bias<span class="token operator">=</span><span class="token string">"0.6"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>constraint<span class="token punctuation">.</span>ConstraintLayout <span class="token operator">></span><span class="token number">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162</span></code></pre><p>效果如下<img src="https://img-blog.csdnimg.cn/20190322134935773.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzA1NTA5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4.我们开始写主页面</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>wuge<span class="token punctuation">.</span>dbtext<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>content<span class="token punctuation">.</span>Intent<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Looper<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Trace<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>support<span class="token punctuation">.</span>v7<span class="token punctuation">.</span>app<span class="token punctuation">.</span>AppCompatActivity<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>os<span class="token punctuation">.</span>Bundle<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Log<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>view<span class="token punctuation">.</span>View<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>EditText<span class="token punctuation">;</span><span class="token keyword">import</span> android<span class="token punctuation">.</span>widget<span class="token punctuation">.</span>Toast<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>google<span class="token punctuation">.</span>gson<span class="token punctuation">.</span>JsonObject<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>json<span class="token punctuation">.</span>JSONObject<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>File<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashMap<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> okhttp3<span class="token punctuation">.</span>Call<span class="token punctuation">;</span><span class="token keyword">import</span> okhttp3<span class="token punctuation">.</span>Callback<span class="token punctuation">;</span><span class="token keyword">import</span> okhttp3<span class="token punctuation">.</span>Response<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span>  <span class="token keyword">final</span>  String TAG<span class="token operator">=</span><span class="token string">"MainActivity"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> EditText name<span class="token punctuation">;</span>    <span class="token keyword">private</span> EditText password<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>        name <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        password <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//用户根据点击事件来找到相应的功能</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fun</span><span class="token punctuation">(</span>View v<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">switch</span> <span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>register<span class="token operator">:</span>               <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token annotation punctuation">@Override</span>                   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                       String n <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       String psw <span class="token operator">=</span> password<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       UserDao ud <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">boolean</span> result <span class="token operator">=</span>ud<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>psw<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>                           Looper<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           Toast toast <span class="token operator">=</span> Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"注册成功！"</span><span class="token punctuation">,</span>Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">;</span>                           toast<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token punctuation">}</span>                       Log<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span><span class="token string">"fun"</span><span class="token operator">+</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token comment" spellcheck="true">//以上为jdbc注册</span>                   <span class="token punctuation">}</span>               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token keyword">break</span><span class="token punctuation">;</span>           <span class="token keyword">case</span> R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>login<span class="token operator">:</span>               <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token annotation punctuation">@Override</span>                   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                       String n <span class="token operator">=</span> name<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       String psw <span class="token operator">=</span> password<span class="token punctuation">.</span><span class="token function">getText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">||</span>psw<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                           Looper<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           Toast toast <span class="token operator">=</span> Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"输入不能为空！"</span><span class="token punctuation">,</span>Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">;</span>                           toast<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token punctuation">}</span>                       UserDao ud <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDao</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       Boolean result <span class="token operator">=</span> ud<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>psw<span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>result<span class="token punctuation">)</span><span class="token punctuation">{</span>                           Looper<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           Toast toast<span class="token operator">=</span>Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"用户名不存在或密码错误！"</span><span class="token punctuation">,</span>Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">;</span>                           toast<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                           Looper<span class="token punctuation">.</span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           Toast toast<span class="token operator">=</span>Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token string">"登录成功"</span><span class="token punctuation">,</span>Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">;</span>                           toast<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                           <span class="token comment" spellcheck="true">//一下代码为跳转界面</span>                          <span class="token comment" spellcheck="true">// Intent intent=new Intent(MainActivity.this,info.class);</span>                           <span class="token comment" spellcheck="true">//intent.putExtra("name",n);</span>                          <span class="token comment" spellcheck="true">// startActivity(intent);</span>                           Looper<span class="token punctuation">.</span><span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                       <span class="token punctuation">}</span>                       <span class="token comment" spellcheck="true">//以上为jdbc登录</span>                   <span class="token punctuation">}</span>               <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token number">123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101</span></code></pre><p>小编这里用到了线程 ，想告诉大家的是 ，所有的Http请求都要写在子线程里面，而且如果想在子线程里面修改UI线程，比如我们的Toast 我们就要引入<br>Looper.prepare(); Looper.loop();</p><h1 id="子线程修改UI线程的方法"><a href="#子线程修改UI线程的方法" class="headerlink" title="子线程修改UI线程的方法"></a>子线程修改UI线程的方法</h1><ol><li>Looper.prepare();<br>//TODO<br>Looper.loop();</li></ol><p>2.在Activity 可用runUiThread</p><p>3.Handler</p><p>小编最推荐的是第三种 第二种有局限 只能在同一个Activity上面使用</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>到这里就就结束了 最后展示效果图<br>（小编这里是老人机）<br><img src="https://img-blog.csdnimg.cn/20190322140056687.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzA1NTA5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20190322135938991.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzA1NTA5Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android studio 打包apk后发给别人，安装失败</title>
      <link href="/2020/09/27/Android%20studio%20%E6%89%93%E5%8C%85apk%E5%90%8E%E5%8F%91%E7%BB%99%E5%88%AB%E4%BA%BA%EF%BC%8C%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5/"/>
      <url>/2020/09/27/Android%20studio%20%E6%89%93%E5%8C%85apk%E5%90%8E%E5%8F%91%E7%BB%99%E5%88%AB%E4%BA%BA%EF%BC%8C%E5%AE%89%E8%A3%85%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Android studio 打包apk后发给别人，安装失败。</p><p>失败原因显示：应用是非正式发布版本，当前设备不支持安装。</p><p>在自己手机上也无法安装，之后连接USB进行调试时可以运行，打包成APK安装就会显示下图错误：</p><p><a href="https://img2020.cnblogs.com/blog/1271267/202007/1271267-20200708221826346-2000750887.jpg" target="_blank" rel="noopener"><img src="https://img2020.cnblogs.com/blog/1271267/202007/1271267-20200708221826346-2000750887.jpg" alt="img"></a></p><p><strong><em>2\</em></strong>|<strong><em>0**</em></strong>原因分析：**</p><blockquote><p>造成该问题的原因是Android Studio 3.0会在debug apk的manifest文件application标签里自动添加 android:testOnly=”true”属性。该属性导致在IDE中使用Run生成的apk在大部分手机上只能用adb install -t 来安装。</p></blockquote><p>​    这种apk在某些手机上甚至安装不了。</p><p><strong><em>3\</em></strong>|<strong><em>0**</em></strong>解决方法：**</p><p>在gradle.properties 文件中添加如下指令：</p><pre><code>android.injected.testOnly=false</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>仿淘宝物流的跟踪图，不需要自定义时间轴</title>
      <link href="/2020/09/27/%E4%BB%BF%E6%B7%98%E5%AE%9D%E7%89%A9%E6%B5%81%E7%9A%84%E8%B7%9F%E8%B8%AA%E5%9B%BE%EF%BC%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%B6%E9%97%B4%E8%BD%B4/"/>
      <url>/2020/09/27/%E4%BB%BF%E6%B7%98%E5%AE%9D%E7%89%A9%E6%B5%81%E7%9A%84%E8%B7%9F%E8%B8%AA%E5%9B%BE%EF%BC%8C%E4%B8%8D%E9%9C%80%E8%A6%81%E8%87%AA%E5%AE%9A%E4%B9%89%E6%97%B6%E9%97%B4%E8%BD%B4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>最近遇到一个项目需要实现如下图这种流程</p><p><img src="https://img-blog.csdn.net/20180716143614365?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2Z1emhvbmdiaW4=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>看了网上很多都是要自定义时间轴配合ListView来实现，但是本项目的流程又区别于淘宝物流的跟踪图，所以自己写了一个流程图，代码如下：</p><p>item的布局 view_process_item.xml：</p><pre class=" language-html"><code class="language-html"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/col_ffffff<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/ll_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40dp<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center_vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_title<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/text_12sp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/col_3f6db7<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">tools:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>撰写审计日志<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_date<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_below</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/tv_title<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>paddingLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/text_12sp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/col_3f6db7<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">tools:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2018-12-10 10：50<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>         <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/ll_line<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>14dp<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center_horizontal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>           <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/line_before<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1dp<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40dp<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/col_3f6db7<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center_horizontal<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>              <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>14dp<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>14dp<span class="token punctuation">"</span></span>              <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/shape_circle_process<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>             <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/line_after<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1dp<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40dp<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/col_3f6db7<span class="token punctuation">"</span></span>             <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center_horizontal<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span>           <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>layout_marginRight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>minHeight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>40dp<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>padding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2dp<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>layout_gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center_vertical<span class="token punctuation">"</span></span>           <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/shap_tangle_bg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>               <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_name<span class="token punctuation">"</span></span>               <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>               <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>               <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/text_15sp<span class="token punctuation">"</span></span>               <span class="token attr-name"><span class="token namespace">tools:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>张三<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>               <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_advice<span class="token punctuation">"</span></span>               <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>               <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>               <span class="token attr-name"><span class="token namespace">android:</span>layout_toRightOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/tv_name<span class="token punctuation">"</span></span>               <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>               <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/text_15sp<span class="token punctuation">"</span></span>               <span class="token attr-name"><span class="token namespace">tools:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>同意<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>               <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_result<span class="token punctuation">"</span></span>               <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>               <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>               <span class="token attr-name"><span class="token namespace">android:</span>layout_below</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/tv_name<span class="token punctuation">"</span></span>               <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/text_15sp<span class="token punctuation">"</span></span>               <span class="token attr-name"><span class="token namespace">tools:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>审核同意地方撒还记得哈返回撒到了范德萨看了凤凰读书了发大水范德萨范德萨发生<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>自定义的drawable:</p><p>1.进度节点圆圈  shape_circle_process.xml</p><pre class=" language-html"><code class="language-html"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shape</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>shape</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oval<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>corners</span> <span class="token attr-name"><span class="token namespace">android:</span>radius</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>7dp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>solid</span> <span class="token attr-name"><span class="token namespace">android:</span>color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/col_3f6db7<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shape</span><span class="token punctuation">></span></span></code></pre><p>2.审批内容背景 shape_tangle_bg.xml</p><pre class=" language-html"><code class="language-html"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>shape</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>shape</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rectangle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>stroke</span> <span class="token attr-name"><span class="token namespace">android:</span>color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/col_636363<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">android:</span>width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1px<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>solid</span> <span class="token attr-name"><span class="token namespace">android:</span>color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/col_f0f0f0<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>shape</span><span class="token punctuation">></span></span></code></pre><p>Activity中的布局：</p><pre class=" language-html"><code class="language-html"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>tools</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/tools<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/col_ffffff<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">tools:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.business.table.tack.ProcessTakeTableActivity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ScrollView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/scrollview<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>            <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/rlt_begin<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>110dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_marginTop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center_vertical<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>visibility</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/iv_begin<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>35dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>35dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/icon_process_time<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_begin<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>35dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_toRightOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/iv_begin<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center_vertical<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>minHeight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/col_3f6db7<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/text_18sp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>流程开始<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/ll_process_container<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>orientation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vertical<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span>                <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/rlt_end<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>110dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>layout_marginBottom</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">android:</span>visibility</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gone<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ImageView</span>                    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/iv_end<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>35dp<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>35dp<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@drawable/icon_process_time<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>                    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_end<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>35dp<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_marginLeft</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_toRightOf</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/iv_end<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center_vertical<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>minHeight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20dp<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>layout_alignBaseline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@id/iv_end<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>textColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@color/col_3f6db7<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>textSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@dimen/text_18sp<span class="token punctuation">"</span></span>                    <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>流程结束<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ScrollView</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/tv_no_process_data<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>gravity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@string/no_data<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>visibility</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gone<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>其中rlt_begin为流程开始的布局,ll_process_container控件为动态添加流程的容器，alt_end为流程结束的布局。</p><p>Activity中的代码：</p><p>initProcessView();//此方法为动态添加流程子节点的方法</p><p>Activity具体代码如下：</p><pre class=" language-html"><code class="language-html"> @BindView(R.id.scrollview) ScrollView scrollView; /**无数据提示*/ @BindView(R.id.tv_no_process_data) TextView tvNoDate; /**审批流程容器*/@BindView(R.id.ll_process_container) LinearLayout llProcessContainer; @BindView(R.id.rlt_begin) RelativeLayout rltBegin; @BindView(R.id.rlt_end) RelativeLayout rltEnd; /**流程节点集合*/ private List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>GetProcessTakeTableBean</span><span class="token punctuation">></span></span> processList=new ArrayList&lt;>();private void initProcessView() {    llProcessContainer.removeAllViews();    for(int i = 0; i &lt;processList.size();i++){        LinearLayout linearLayout= (LinearLayout) LayoutInflater.from(this).inflate(R.layout.view_process_item,null);        TextView tvTitle=linearLayout.findViewById(R.id.tv_title);        TextView tvDate=linearLayout.findViewById(R.id.tv_date);        TextView tvName=linearLayout.findViewById(R.id.tv_name);        TextView tvAdvice=linearLayout.findViewById(R.id.tv_advice);        TextView tvResult=linearLayout.findViewById(R.id.tv_result);        TextView tvLineAfter=linearLayout.findViewById(R.id.line_after);        if(StringUtil.isNotEmpty(processList.get(i).getNode_NAME())){            tvTitle.setText(processList.get(i).getNode_NAME());        }        if(processList.get(i).getHandletime() != 0){            tvDate.setText(DateUtils.millis2String(processList.get(i).getHandletime(),"yyyy-MM-dd HH：mm"));        }        if(StringUtil.isNotEmpty(processList.get(i).getHandler_NAME())){            tvName.setText(processList.get(i).getHandler_NAME());        }        if(StringUtil.isNotEmpty(processList.get(i).getHandle_ADVICE())){            tvAdvice.setText(processList.get(i).getHandle_ADVICE());        }        if(StringUtil.isNotEmpty(processList.get(i).getHandle_RESULT())){            tvResult.setVisibility(View.VISIBLE);            tvResult.setText(processList.get(i).getHandle_RESULT());        }else{            tvResult.setVisibility(View.GONE);        }        rltBegin.setVisibility(View.VISIBLE);        int status=processList.get(i).getAudit_LEVEL();        switch (status){            case 0:            case 1:            case 2:                rltEnd.setVisibility(View.GONE);                if(i == processList.size()-1){                    tvLineAfter.setVisibility(View.GONE);                }                break;            case 3:                rltEnd.setVisibility(View.VISIBLE);                break;            default:break;        }        llProcessContainer.addView(linearLayout);    }}</code></pre><p>上面的代码就是动态添加子节点数据的方法！当没有进程时，默认显示暂无相关数据的TextView,有数据时显示流程图！processList中存放的数据对象换成你自己的对象即可，亲测没有什么适配问题，如发现有bug，或有更好的方法请反馈于我。 </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android App启动时网络安全配置错误</title>
      <link href="/2020/09/26/Android%20App%E5%90%AF%E5%8A%A8%E6%97%B6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E9%94%99%E8%AF%AF/"/>
      <url>/2020/09/26/Android%20App%E5%90%AF%E5%8A%A8%E6%97%B6%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Android-App启动时网络安全配置错误"><a href="#Android-App启动时网络安全配置错误" class="headerlink" title="Android App启动时网络安全配置错误"></a>Android App启动时网络安全配置错误</h1><p><a href="https://www.pimspeak.com/android-app-network-config.html" target="_blank" rel="noopener">2020-07-22</a> by weierxiao</p><p>Android App启动时报错，错误信息</p><pre><code>No Network Security Config specified, using platform default</code></pre><p>意思是说没有指定网络安全设配置，使用平台默认的。</p><p>解决步骤：</p><ol><li><p>编辑AndroidManifest, 在<code>application</code>中添加:</p><pre class=" language-java"><code class="language-java">android<span class="token operator">:</span>usesCleartextTraffic<span class="token operator">=</span><span class="token string">"true"</span>android<span class="token operator">:</span>networkSecurityConfig<span class="token operator">=</span><span class="token string">"@xml/network_security_config"</span></code></pre><p>再加上</p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>uses<span class="token operator">-</span>library android<span class="token operator">:</span>name<span class="token operator">=</span><span class="token string">"org.apache.http.legacy"</span> android<span class="token operator">:</span>required<span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">/</span><span class="token operator">></span></code></pre></li><li><p>在xml目录中新建<code>network_security_config.xml</code>，内容如下:</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>network-security-config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base-config</span> <span class="token attr-name">cleartextTrafficPermitted</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>network-security-config</span><span class="token punctuation">></span></span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Fragment实例精讲——底部导航栏+ViewPager滑动切换页面</title>
      <link href="/2020/09/26/Fragment%E5%AE%9E%E4%BE%8B%E7%B2%BE%E8%AE%B2%E2%80%94%E2%80%94%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F+ViewPager%E6%BB%91%E5%8A%A8%E5%88%87%E6%8D%A2%E9%A1%B5%E9%9D%A2/"/>
      <url>/2020/09/26/Fragment%E5%AE%9E%E4%BE%8B%E7%B2%BE%E8%AE%B2%E2%80%94%E2%80%94%E5%BA%95%E9%83%A8%E5%AF%BC%E8%88%AA%E6%A0%8F+ViewPager%E6%BB%91%E5%8A%A8%E5%88%87%E6%8D%A2%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.runoob.com/w3cnote/android-tutorial-fragment-demo4.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/android-tutorial-fragment-demo4.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>STM32_Debug 使用ST-Link进行调试出现Error:Flash Download Failed-&quot;Cortex-M3&quot; 解决方案</title>
      <link href="/2020/09/25/STM32_Debug%20%E4%BD%BF%E7%94%A8ST-Link%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95%E5%87%BA%E7%8E%B0ErrorFlash%20Down%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2020/09/25/STM32_Debug%20%E4%BD%BF%E7%94%A8ST-Link%E8%BF%9B%E8%A1%8C%E8%B0%83%E8%AF%95%E5%87%BA%E7%8E%B0ErrorFlash%20Down%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在Debug窗口依次注意以下几个点：</p><p><strong>1.选择与主控芯片相配套的芯片</strong><br><img src="https://img-blog.csdn.net/20180908094245359?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1paWGluXw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"><br><strong>2.选择ST-Link Debugger—-此处注意该页面最下面一行可不更改（亲测有效）</strong><br><img src="https://img-blog.csdn.net/20180908094334973?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1paWGluXw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br><strong>3.接上图点击进入Setting，依次选择</strong><br><img src="https://img-blog.csdn.net/2018090809441162?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1paWGluXw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br><strong>4.进入Flash Download 注意同样选中与主控芯片相配套的flash类型，出现Error:Flash Download Failed-“Cortex-M3” 问题，多由于该处没有选择正确</strong><br><img src="https://img-blog.csdn.net/20180908100245830?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1paWGluXw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br><img src="https://img-blog.csdn.net/20180908094437559?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1paWGluXw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>注：此处本人也存在疑惑，若为“Med-density”与芯片选型配套，在此基础上再进行类型选择时，就会出现以上界面，没有了“Med-density”这一类型；若再次更换芯片选型，“Med-density”这一类型又会重新出现，不知这次什么“bug”，还望大神如若看到，能解决疑惑。<br><strong>5.再进入Utilities设置（多数人会忘记），依次进行设置</strong><br><img src="https://img-blog.csdn.net/20180908094446930?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1paWGluXw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br><strong>6.Well Done</strong><br><img src="https://img-blog.csdn.net/20180908094456376?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1paWGluXw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><p>最后说明：这个问题，一而再再而三出现，一次次解决，一次次又忘记具体操作细节，特地记下来，作为参考。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>消息队列RabbitMQ的python接口使用</title>
      <link href="/2020/09/25/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ%E7%9A%84python%E6%8E%A5%E5%8F%A3%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/09/25/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97RabbitMQ%E7%9A%84python%E6%8E%A5%E5%8F%A3%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="消息队列RabbitMQ的python接口使用"><a href="#消息队列RabbitMQ的python接口使用" class="headerlink" title="消息队列RabbitMQ的python接口使用"></a><a href="https://www.cnblogs.com/qxcheng/p/12334880.html" target="_blank" rel="noopener">消息队列RabbitMQ的python接口使用</a></h1><p>消息队列是一种常用的开发中间件，适用于异步、分布式、解耦合等业务场景中，而RabbitMQ是其中一种常用的消息队列，今天来总结一下RabbitMQ在python端的使用方法。</p><h1 id="1-发送接收基础"><a href="#1-发送接收基础" class="headerlink" title="1.发送接收基础"></a>1.发送接收基础</h1><p>python一般使用pika库来操作RabbitMQ，需要先用pip安装。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#1 建立连接</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 建立一个连接</span>channel <span class="token operator">=</span> connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 建立此连接下的一个频道</span>channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 声明一个队列</span><span class="token comment" spellcheck="true">#2 发送消息</span>channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span> routing_key<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">,</span> body<span class="token operator">=</span><span class="token string">'Hello World!'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#3 接收消息</span>channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>on_message_callback<span class="token operator">=</span>callback<span class="token punctuation">,</span> queue<span class="token operator">=</span><span class="token string">'hello'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 声明消息处理回调函数</span>channel<span class="token punctuation">.</span>start_consuming<span class="token punctuation">(</span><span class="token punctuation">)</span>                                           <span class="token comment" spellcheck="true"># 开始消费消息，并进入死循环</span><span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>channel<span class="token punctuation">,</span> method<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Received %r"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>body<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                         <span class="token comment" spellcheck="true"># body是消息体，根据具体业务进行解析处理</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>                                          <span class="token comment" spellcheck="true"># 模拟处理消息</span>    channel<span class="token punctuation">.</span>basic_ack<span class="token punctuation">(</span>delivery_tag <span class="token operator">=</span> method<span class="token punctuation">.</span>delivery_tag<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 处理完成后，发送ack进行消息确认，消息在服务端安全删除</span><span class="token comment" spellcheck="true">#4 关闭连接</span>connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h1 id="2-完整接口示例"><a href="#2-完整接口示例" class="headerlink" title="2.完整接口示例"></a>2.完整接口示例</h1><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">import</span> pika<span class="token keyword">from</span> pika<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ChannelClosed<span class="token punctuation">,</span> ConnectionClosed<span class="token comment" spellcheck="true"># rabbitmq 配置信息</span>MQ_CONFIG <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"hostname"</span><span class="token punctuation">:</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span>    <span class="token string">"port"</span><span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>    <span class="token string">"vhost"</span><span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>    <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">"guest"</span><span class="token punctuation">,</span>    <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token string">"guest"</span><span class="token punctuation">,</span>    <span class="token string">"exchange"</span><span class="token punctuation">:</span> <span class="token string">"exchange"</span><span class="token punctuation">,</span>    <span class="token string">"queue"</span><span class="token punctuation">:</span> <span class="token string">"queue"</span><span class="token punctuation">,</span>    <span class="token string">"routing_key"</span><span class="token punctuation">:</span> <span class="token string">"key"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 消息队列基类</span><span class="token keyword">class</span> <span class="token class-name">RabbitMQServer</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>config <span class="token operator">=</span> MQ_CONFIG                           <span class="token comment" spellcheck="true"># 配置文件加载</span>        self<span class="token punctuation">.</span>host <span class="token operator">=</span> self<span class="token punctuation">.</span>config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"hostname"</span><span class="token punctuation">)</span>           <span class="token comment" spellcheck="true"># 主机</span>        self<span class="token punctuation">.</span>port <span class="token operator">=</span> self<span class="token punctuation">.</span>config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true"># 端口</span>        self<span class="token punctuation">.</span>username <span class="token operator">=</span> self<span class="token punctuation">.</span>config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 用户名</span>        self<span class="token punctuation">.</span>password <span class="token operator">=</span> self<span class="token punctuation">.</span>config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 密码</span>        self<span class="token punctuation">.</span>vhost <span class="token operator">=</span> self<span class="token punctuation">.</span>config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"vhost"</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 虚拟主机，VirtualHost之间相互隔离</span>        self<span class="token punctuation">.</span>exchange <span class="token operator">=</span> self<span class="token punctuation">.</span>config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"exchange"</span><span class="token punctuation">)</span>       <span class="token comment" spellcheck="true"># 交换机</span>        self<span class="token punctuation">.</span>queue <span class="token operator">=</span> self<span class="token punctuation">.</span>config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"queue"</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true"># 队列</span>        self<span class="token punctuation">.</span>routing_key <span class="token operator">=</span> self<span class="token punctuation">.</span>config<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"routing_key"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 交换机和队列的绑定</span>        self<span class="token punctuation">.</span>connection <span class="token operator">=</span> None        self<span class="token punctuation">.</span>channel <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">reconnect</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> heartbeat<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 关闭旧的连接</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>connection <span class="token operator">and</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>is_closed<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 构造登录参数</span>            credentials <span class="token operator">=</span> pika<span class="token punctuation">.</span>PlainCredentials<span class="token punctuation">(</span>self<span class="token punctuation">.</span>username<span class="token punctuation">,</span> self<span class="token punctuation">.</span>password<span class="token punctuation">)</span>            parameters <span class="token operator">=</span> pika<span class="token punctuation">.</span>ConnectionParameters<span class="token punctuation">(</span>self<span class="token punctuation">.</span>host<span class="token punctuation">,</span> self<span class="token punctuation">.</span>port<span class="token punctuation">,</span> self<span class="token punctuation">.</span>vhost<span class="token punctuation">,</span> credentials<span class="token punctuation">)</span>                     self<span class="token punctuation">.</span>connection <span class="token operator">=</span> pika<span class="token punctuation">.</span>BlockingConnection<span class="token punctuation">(</span>parameters<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>channel <span class="token operator">=</span> self<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>channel<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 声明交换机</span>            self<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>exchange_declare<span class="token punctuation">(</span>exchange<span class="token operator">=</span>self<span class="token punctuation">.</span>exchange<span class="token punctuation">,</span> exchange_type<span class="token operator">=</span><span class="token string">"direct"</span><span class="token punctuation">,</span> durable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true"># 消费者实例</span>            <span class="token keyword">if</span> isinstance<span class="token punctuation">(</span>self<span class="token punctuation">,</span> RabbitComsumer<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span>self<span class="token punctuation">.</span>queue<span class="token punctuation">,</span> exclusive<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> durable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 绑定队列</span>                self<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>queue_bind<span class="token punctuation">(</span>exchange<span class="token operator">=</span>self<span class="token punctuation">.</span>exchange<span class="token punctuation">,</span> queue<span class="token operator">=</span>self<span class="token punctuation">.</span>queue<span class="token punctuation">,</span> routing_key<span class="token operator">=</span>self<span class="token punctuation">.</span>routing_key<span class="token punctuation">)</span>                  <span class="token comment" spellcheck="true"># 表明最大阻塞未ack的消息数量</span>                self<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>basic_qos<span class="token punctuation">(</span>prefetch_count<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>                                                                         self<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>basic_consume<span class="token punctuation">(</span>on_message_callback<span class="token operator">=</span>self<span class="token punctuation">.</span>consumer_callback<span class="token punctuation">,</span> queue<span class="token operator">=</span>self<span class="token punctuation">.</span>queue<span class="token punctuation">,</span> auto_ack<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 生产者实例</span>            <span class="token keyword">elif</span> isinstance<span class="token punctuation">(</span>self<span class="token punctuation">,</span> RabbitPublisher<span class="token punctuation">)</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>queue_declare<span class="token punctuation">(</span>queue<span class="token operator">=</span>self<span class="token punctuation">.</span>queue<span class="token punctuation">,</span> exclusive<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> durable<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">excecute</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 消费者</span><span class="token keyword">class</span> <span class="token class-name">RabbitComsumer</span><span class="token punctuation">(</span>RabbitMQServer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>RabbitComsumer<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">consumer_callback</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> method<span class="token punctuation">,</span> properties<span class="token punctuation">,</span> body<span class="token punctuation">)</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> execute<span class="token punctuation">(</span>body<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 模拟处理消息</span>        <span class="token keyword">if</span> channel<span class="token punctuation">.</span>is_open<span class="token punctuation">:</span>            <span class="token keyword">if</span> result<span class="token punctuation">:</span>                channel<span class="token punctuation">.</span>basic_ack<span class="token punctuation">(</span>delivery_tag<span class="token operator">=</span>method<span class="token punctuation">.</span>delivery_tag<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 处理不成功时，发送no_ack</span>                channel<span class="token punctuation">.</span>basic_nack<span class="token punctuation">(</span>delivery_tag<span class="token operator">=</span>method<span class="token punctuation">.</span>delivery_tag<span class="token punctuation">,</span> multiple<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> requeue<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> <span class="token operator">not</span> channel<span class="token punctuation">.</span>is_open<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Callback 接收频道关闭，无法ack"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">start_consumer</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>reconnect<span class="token punctuation">(</span><span class="token punctuation">)</span>                self<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>start_consuming<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> ConnectionClosed <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 保证连接断开重连</span>                self<span class="token punctuation">.</span>reconnect<span class="token punctuation">(</span><span class="token punctuation">)</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> ChannelClosed <span class="token keyword">as</span> e<span class="token punctuation">:</span>           <span class="token comment" spellcheck="true"># 保证连接断开重连</span>                self<span class="token punctuation">.</span>reconnect<span class="token punctuation">(</span><span class="token punctuation">)</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>reconnect<span class="token punctuation">(</span><span class="token punctuation">)</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生产者</span><span class="token keyword">class</span> <span class="token class-name">RabbitPublisher</span><span class="token punctuation">(</span>RabbitMQServer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>RabbitPublisher<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">start_publish</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>reconnect<span class="token punctuation">(</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            message <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"value"</span><span class="token punctuation">:</span> i<span class="token punctuation">}</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>channel<span class="token punctuation">.</span>basic_publish<span class="token punctuation">(</span>exchange<span class="token operator">=</span>self<span class="token punctuation">.</span>exchange<span class="token punctuation">,</span> routing_key<span class="token operator">=</span>self<span class="token punctuation">.</span>routing_key<span class="token punctuation">,</span> body<span class="token operator">=</span>message<span class="token punctuation">)</span>                i <span class="token operator">+=</span> <span class="token number">1</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> ConnectionClosed <span class="token keyword">as</span> e<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>reconnect<span class="token punctuation">(</span><span class="token punctuation">)</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> ChannelClosed <span class="token keyword">as</span> e<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>reconnect<span class="token punctuation">(</span><span class="token punctuation">)</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>reconnect<span class="token punctuation">(</span><span class="token punctuation">)</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MVC，MVP 和 MVVM 的图示</title>
      <link href="/2020/09/25/MVC%EF%BC%8CMVP%20%E5%92%8C%20MVVM%20%E7%9A%84%E5%9B%BE%E7%A4%BA/"/>
      <url>/2020/09/25/MVC%EF%BC%8CMVP%20%E5%92%8C%20MVVM%20%E7%9A%84%E5%9B%BE%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>复杂的软件必须有清晰合理的架构，否则无法开发和维护。</p><p><a href="http://zh.wikipedia.org/wiki/MVC" target="_blank" rel="noopener">MVC</a>（Model-View-Controller）是最常见的软件架构之一，业界有着广泛应用。它本身<a href="http://www.ruanyifeng.com/blog/2007/11/mvc.html" target="_blank" rel="noopener">很容易理解</a>，但是要讲清楚，它与衍生的 MVP 和 MVVM 架构的区别就不容易了。</p><p>昨天晚上，我读了<a href="http://blog.nodejitsu.com/scaling-isomorphic-javascript-code/" target="_blank" rel="noopener">《Scaling Isomorphic Javascript Code》</a>，突然意识到，它们的区别非常简单。我用几段话，就可以说清。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020102.jpg" alt="img"></p><p>（题图：摄于瓦伦西亚，西班牙，2014年8月）</p><h2 id="一、MVC"><a href="#一、MVC" class="headerlink" title="一、MVC"></a>一、MVC</h2><p>MVC模式的意思是，软件可以分成三个部分。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020104.png" alt="img"></p><blockquote><ul><li>视图（View）：用户界面。</li><li>控制器（Controller）：业务逻辑</li><li>模型（Model）：数据保存</li></ul></blockquote><p>各部分之间的通信方式如下。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020105.png" alt="img"></p><blockquote><ol><li>View 传送指令到 Controller</li><li>Controller 完成业务逻辑后，要求 Model 改变状态</li><li>Model 将新的数据发送到 View，用户得到反馈</li></ol></blockquote><p>所有通信都是单向的。</p><h2 id="二、互动模式"><a href="#二、互动模式" class="headerlink" title="二、互动模式"></a>二、互动模式</h2><p>接受用户指令时，MVC 可以分成两种方式。一种是通过 View 接受指令，传递给 Controller。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020106.png" alt="img"></p><p>另一种是直接通过controller接受指令。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020107.png" alt="img"></p><h2 id="三、实例：Backbone"><a href="#三、实例：Backbone" class="headerlink" title="三、实例：Backbone"></a>三、实例：Backbone</h2><p>实际项目往往采用更灵活的方式，以 <a href="http://documentcloud.github.com/backbone" target="_blank" rel="noopener">Backbone.js</a> 为例。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020108.png" alt="img"></p><p>\1. 用户可以向 View 发送指令（DOM 事件），再由 View 直接要求 Model 改变状态。</p><p>\2. 用户也可以直接向 Controller 发送指令（改变 URL 触发 hashChange 事件），再由 Controller 发送给 View。</p><p>\3. Controller 非常薄，只起到路由的作用，而 View 非常厚，业务逻辑都部署在 View。所以，Backbone 索性取消了 Controller，只保留一个 Router（路由器） 。</p><h2 id="四、MVP"><a href="#四、MVP" class="headerlink" title="四、MVP"></a>四、MVP</h2><p>MVP 模式将 Controller 改名为 Presenter，同时改变了通信方向。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020109.png" alt="img"></p><p>\1. 各部分之间的通信，都是双向的。</p><p>\2. View 与 Model 不发生联系，都通过 Presenter 传递。</p><p>\3. View 非常薄，不部署任何业务逻辑，称为”被动视图”（Passive View），即没有任何主动性，而 Presenter非常厚，所有逻辑都部署在那里。</p><h2 id="五、MVVM"><a href="#五、MVVM" class="headerlink" title="五、MVVM"></a>五、MVVM</h2><p>MVVM 模式将 Presenter 改名为 ViewModel，基本上与 MVP 模式完全一致。</p><p><img src="http://www.ruanyifeng.com/blogimg/asset/2015/bg2015020110.png" alt="img"></p><p>唯一的区别是，它采用双向绑定（data-binding）：View的变动，自动反映在 ViewModel，反之亦然。<a href="https://angularjs.org/" target="_blank" rel="noopener">Angular</a> 和 <a href="http://emberjs.com/" target="_blank" rel="noopener">Ember</a> 都采用这种模式。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMq使用中常见错误小结</title>
      <link href="/2020/09/24/RabbitMq%E4%BD%BF%E7%94%A8%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E5%B0%8F%E7%BB%93/"/>
      <url>/2020/09/24/RabbitMq%E4%BD%BF%E7%94%A8%E4%B8%AD%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><hr><p>分别使用了三个库使用RabbitMq。</p><ol><li>使用python的pika库，适用于python。</li><li>使用rabbitmq-c库，-lrabbitmq，适用于c/c++语言。</li><li>使用AMQP-CPP库，-lamqpcpp，适用于c++。</li></ol><p>主要对使用过程中出现的调试错误进行小结，适合新手参考。</p><h4 id="pika库"><a href="#pika库" class="headerlink" title="pika库"></a>pika库</h4><hr><ol><li>pika.exceptions.ProbableAuthenticationError: ConnectionClosedByBroker: (403) ‘ACCESS_REFUSED - Login was refused using authentication mechanism PLAIN. For details see the broker logfile.’</li></ol><ul><li>登录信息不全，需要使用用户名和密码登录。或者用户名、密码不正确。</li></ul><p>如，<code>connection = pika.BlockingConnection(pika.ConnectionParameters(host='192.168.1.2'))</code>，未使用用户名和密码等登录参数。可以参考下面的代码片段：</p><pre class=" language-py"><code class="language-py">#!/usr/bin/env pythonimport pikacredentials = pika.PlainCredentials('the_user', 'the_pass')parameters = pika.ConnectionParameters('132.45.23.14',                                   5672,                                   '/',                                   credentials)connection = pika.BlockingConnection(parameters)12345678910</code></pre><ol><li>pika.exceptions.ProbableAccessDeniedError: StreamLostError: (“Stream connection lost: ConnectionResetError(10054, ‘远程主机强迫关闭了一个现有的连接。’, None, 10054, None)”,)</li></ol><ul><li>服务未对该用户开放相关的权限，如 Virtual Host权限。需要登录服务端开放开头权限，以 Virtual Host权限为例：<ul><li>启动web管理服务：在安装目录执行：<code>rabbitmq-plugins enable rabbitmq_management</code></li><li>在浏览器中输入 <code>http://127.0.0.1:15672</code>，使用默认的用户名和密码登录：‘guest’, ‘guest’</li><li>增加一个新用户</li><li>点击用户名，点击开通权限即可</li></ul></li></ul><ol><li>pika.adapters.utils.connection_workflow.AMQPConnectorStackTimeout: Timeout during AMQP handshake’192.168.1.33’/(&lt;AddressFamily.AF_INET: 2&gt;, &lt;SocketKind.SOCK_STREAM: 1&gt;, 6, ‘’, (‘192.168.1.33’, 15672)); ssl=False</li></ol><ul><li>超时错误，可能是填写的端口号不正确</li></ul><ol><li>pika.exceptions.ChannelClosedByBroker: (406, “PRECONDITION_FAILED - inequivalent arg ‘durable’ for exchange ‘CLP_STG’ in vhost ‘/’: received ‘false’ but current is ‘true’”)</li></ol><ul><li>创建Exchange时，该Exchange已经存在，且本次创建时使用的参数与之前不符。具体到本异常，为</li></ul><pre><code>  durable</code></pre><p>  属性设置的值不同。</p><ul><li><code>durable</code>属性默认为false，无消息持久化特性</li><li>创建Exchange时使用 <code>durable=True</code>设置为true，使用消息持久化特性</li></ul><h4 id="rabbitmq-c库"><a href="#rabbitmq-c库" class="headerlink" title="rabbitmq-c库"></a>rabbitmq-c库</h4><hr><ol><li>open channel error: server channel error 406h, message: PRECONDITION_FAILED - unknown delivery tag 1</li></ol><ul><li>消费者关闭了默认的ack机制，但仍然发送了ack，或者使用了ack，但发送ack时未使用与接收消息相同的通道</li></ul><ol><li>调用 amqp_channel_open 函数后，在管理界面查看通道已经打开，但该函数阻塞，一直未返回</li></ol><ul><li>可能是在多线程中使用了同一个连接，或者多线程使用了同一个通道。在我的测试中，多线程使用同一个连接时，即使通道不同，也会出现该问题</li><li>详情可以参考 <a href="http://cncc.bingj.com/cache.aspx?q=rabbitmq+c+client+amqp_channel_open+not+return&amp;d=4617231636433151&amp;mkt=en-US&amp;setlang=en-US&amp;w=pPf1fabPMvgzrOgPI09-_3KISbsg8Bsr" target="_blank" rel="noopener">amqp_channel_open issue</a></li></ul><h4 id="AMQP-CPP库"><a href="#AMQP-CPP库" class="headerlink" title="AMQP-CPP库"></a>AMQP-CPP库</h4><hr><p>使用libevent事件驱动库。</p><ol><li>执行了一系列创建工作，但在管理后台上查看时并未创建。</li></ol><ul><li>所有的指令会在事件循环启动后执行，所以需要启动 <code>event_base_dispatch(evbase);</code>循环</li><li>当持续有需要监听的事件时，该循环不会退出，所以不要在主进程中启动它，在线程中启动</li></ul><ol><li>如何注册事件回调函数</li></ol><ul><li>所有的操作都是异步的，所以执行某指令后返回的值并不能判断该指令执行成功，需要注册回调函数，以及时处理错误</li><li>AMQP-CPP库内部使用的是类似 <code>std::function&lt;void(void)&gt;</code>形式的回调函数，在传入时使用 <code>std::bind</code>即可，参数使用占位符表示，如：</li></ul><pre class=" language-cpp"><code class="language-cpp">m_channel<span class="token operator">-</span><span class="token operator">></span><span class="token function">publish</span><span class="token punctuation">(</span>exchangeName<span class="token punctuation">,</span> routingKey<span class="token punctuation">,</span> msg<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">onError</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Foo<span class="token operator">::</span>PublishMsgErrCb<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> std<span class="token operator">::</span>placeholders<span class="token operator">::</span>_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">12</span></code></pre><ol><li>报错：UNEXPECTED_FRAME - expected content header for class 60, got non content header frame instead</li></ol><ul><li>在功能测试通过的情况下，在压力测试下出现这个问题</li><li>经过调试，是多个线程使用了同一个通道造成的问题。在RabbitMq中，connection是线程安全的，但channel不能多个线程共用一个。</li><li>为不同的线程开启了不同的channel，问题解决</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ViewModel的使用</title>
      <link href="/2020/09/24/ViewModel%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/09/24/ViewModel%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、前言："><a href="#一、前言：" class="headerlink" title="一、前言："></a>一、前言：</h2><p>在页面（Activity/Fragment）很简单的情况下，通常我们会将UI交互，数据获取与处理等相关业务逻辑，全部写在页面中，但是在页面复杂的情况下，这样做是不合适的，它不符合<img src="https://math.jianshu.com/math?formula=%5Ccolor%7Bred%7D%7B%E2%80%9C%E5%8D%95%E4%B8%80%E8%B4%A3%E4%BB%BB%E2%80%9D%7D" alt="\color{red}{“单一责任”}">原则。页面只应该负责接收用户的交互，以及将数据展示到屏幕上，相关数据应该单独存放和处理。</p><p>为此，Android为我们提供了<img src="https://math.jianshu.com/math?formula=%5Ccolor%7Bred%7D%7BViewModel%7D" alt="\color{red}{ViewModel}">类，专门用于存放应用程序页面所需的数据。它将页面所需的数据从页面中剥离出来，页面只需要处理用户交互，以及负责展示数据的工作。</p><p><img src="https:////upload-images.jianshu.io/upload_images/11268516-09c54b7bdd39022d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/704/format/webp" alt="img"></p><p>图片.png</p><p>另外，如果我们的应用程序支持横竖屏切换，当用户旋转手机屏幕时，我们还需要考虑数据的存储与恢复。如果数据不进行存储，那么通常我们还需要重新去获取一次。</p><p>而ViewModel能为我们解决这个问题，它独立于配置变化。也就是说，屏幕旋转导致的Activity重建，并不会影响到ViewModel的生命周期。</p><blockquote><p>ViewModel这个名字可以这样理解：它是介于View（视图）和Model（模型数据）之间的这样一个东西，它起到了桥梁的作用，使得视图和数据既能够分离开，也能够保持通信。</p></blockquote><p><img src="https:////upload-images.jianshu.io/upload_images/11268516-93846692f30a88ae.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/522/format/webp" alt="img"></p><p>Activity旋转重建与ViewModel生命周期之间的关系.png</p><blockquote><p>注意: ViewModel只是用来管理UI的数据的,千万不要让它持有View、Activity或者Fragment的引用(小心内存泄露)。</p></blockquote><h2 id="二、使用："><a href="#二、使用：" class="headerlink" title="二、使用："></a>二、使用：</h2><h4 id="1-在应用程序的build-gradle中加入依赖。"><a href="#1-在应用程序的build-gradle中加入依赖。" class="headerlink" title="1.在应用程序的build.gradle中加入依赖。"></a>1.在应用程序的build.gradle中加入依赖。</h4><pre class=" language-csharp"><code class="language-csharp"><span class="token comment" spellcheck="true">//viewMouble使用</span>implementation <span class="token string">'androidx.lifecycle:lifecycle-extensions:2.2.0'</span></code></pre><h4 id="2-写一个继承自ViewModel的类。"><a href="#2-写一个继承自ViewModel的类。" class="headerlink" title="2.写一个继承自ViewModel的类。"></a>2.写一个继承自ViewModel的类。</h4><pre class=" language-dart"><code class="language-dart">public <span class="token keyword">class</span> <span class="token class-name">TimerViewModel</span> <span class="token keyword">extends</span> <span class="token class-name">ViewModel</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 由于屏幕旋转导致的Activity重建，该方法不会被调用     *     * 只有ViewModel已经没有任何Activity与之有关联，系统则会调用该方法，你可以在此清理资源     * */</span>    <span class="token metadata symbol">@Override</span>    protected <span class="token keyword">void</span> <span class="token function">onCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>ViewModel是一个抽象类，其中只有一个方法onCleared()，当ViewModel不再被需要的时候，也就是与之相关的Activity都被销毁时，该方法会被系统调用，我们可以在这个方法里面执行一些资源释放的操作，以免内存泄漏。</p><blockquote><p>注意：既然ViewModel的销毁是由系统来判断和执行的，那么系统是如何判断的呢？是根据Context引用。因此，我们在使用ViewModel的时候，千万不能从外面传入Activity，Fragment或者View之类的含有Context引用的东西，否则系统会认为该ViewModel还在使用中，从而无法被系统销毁回收，导致内存泄漏的发生。</p></blockquote><h4 id="3-在页面中使用ViewModel。"><a href="#3-在页面中使用ViewModel。" class="headerlink" title="3. 在页面中使用ViewModel。"></a>3. 在页面中使用ViewModel。</h4><pre class=" language-kotlin"><code class="language-kotlin">TimerViewModel timerViewModel <span class="token operator">=</span> ViewModelProviders<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>TimerViewModel<span class="token punctuation">.</span>class<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>ViewModel的实例化并不是通过普通的<strong>new</strong>来完成的，而是通过<strong>ViewModelProviders</strong>来完成。<strong>ViewModelProviders</strong>会去判断<strong>ViewModel</strong>是否存在，若存在则直接返回，否则它会去创建一个<strong>ViewModel</strong>。</p><h4 id="4-实例"><a href="#4-实例" class="headerlink" title="4. 实例"></a>4. 实例</h4><p>前面我们提到，ViewModel最重要的作用是将界面和数据分离，并且独立于Activity的重建。为了验证这一点，我们在ViewModel中创建一个Timer计时器，每隔一秒钟，通过接口<strong>OnTimeChangeListener</strong>通知它的调用者。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimerViewModel</span> <span class="token keyword">extends</span> <span class="token class-name">ViewModel</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String TAG <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Timer timer<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> currentSecond<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 开始计时     * */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">startTiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>timer <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token punctuation">{</span>            currentSecond <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            TimerTask timerTask <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TimerTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    currentSecond<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>onTimeChangeListener <span class="token operator">!=</span> null<span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        onTimeChangeListener<span class="token punctuation">.</span><span class="token function">onTimeChanged</span><span class="token punctuation">(</span>currentSecond<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            timer<span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span>timerTask<span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//延迟3秒执行</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过接口的方式，完成对调用者的通知，这种方式不是太好，更好的方式是通过LiveData组件来实现     * */</span>    <span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OnTimeChangeListener</span>    <span class="token punctuation">{</span>        <span class="token keyword">void</span> <span class="token function">onTimeChanged</span><span class="token punctuation">(</span><span class="token keyword">int</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> OnTimeChangeListener onTimeChangeListener<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setOnTimeChangeListener</span><span class="token punctuation">(</span>OnTimeChangeListener onTimeChangeListener<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>onTimeChangeListener <span class="token operator">=</span> onTimeChangeListener<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 由于屏幕旋转导致的Activity重建，该方法不会被调用     *     * 只有ViewModel已经没有任何Activity与之有关联，系统则会调用该方法，你可以在此清理资源     * */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCleared</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Log<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"onCleared()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timer<span class="token punctuation">.</span><span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>接着，在TimerActivity中监听OnTimeChangeListener发来的通知，并据此更新UI界面。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimerActivity</span> <span class="token keyword">extends</span> <span class="token class-name">AppCompatActivity</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_timer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">iniComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">iniComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">final</span> TextView tvTime <span class="token operator">=</span> <span class="token function">findViewById</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>id<span class="token punctuation">.</span>tvTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通过ViewModelProviders得到ViewModel，如果ViewModel不存在就创建一个新的，如果已经存在就直接返回已经存在的</span>        TimerViewModel timerViewModel <span class="token operator">=</span> ViewModelProviders<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>TimerViewModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timerViewModel<span class="token punctuation">.</span><span class="token function">setOnTimeChangeListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimerViewModel<span class="token punctuation">.</span>OnTimeChangeListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTimeChanged</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> second<span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//更新UI界面</span>                <span class="token function">runOnUiThread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token punctuation">{</span>                        tvTime<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"TIME:"</span> <span class="token operator">+</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timerViewModel<span class="token punctuation">.</span><span class="token function">startTiming</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>行程序并旋转屏幕。可以看到，旋转屏幕导致Activity重建时，计时器并没有停止，也就是说，横竖屏状态下Activity对应的ViewModel是同一个。</p><p><img src="https:////upload-images.jianshu.io/upload_images/11268516-04b89c69753c401d.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/320/format/webp" alt="img"></p><p>1111.gif</p><p>使用ViewModel，不仅将界面和数据从代码上进行了分离，而且不再需要关心屏幕旋转带来的数据的丢失和获取问题。也许你会说<a href="https://links.jianshu.com/go?to=https%3A%2F%2Flink.zhihu.com%2F%3Ftarget%3Dhttps%3A%2F%2Fdeveloper.android.com%2Freference%2Fandroid%2Fapp%2FActivity.html%23onSaveInstanceState%28android.os.Bundle%29" target="_blank" rel="noopener">onSaveInstanceState()</a> 方法同样可以解决屏幕旋转带来的数据丢失问题，但它只能保存少量的能支持序列化的数据，而ViewModel没有这个限制，它能支持页面中所有的数据。但要注意的是，ViewModel不支持数据的持久化，当界面彻底销毁，ViewModel及其数据也就不存在了。</p><p>我们前面提到过，使用ViewModel的时候，不能将任何含有Context引用的对象传入ViewModel，因为这可能会导致内存泄露。但如果你希望在ViewModel中使用Context怎么办呢？我们可以使用<strong>AndroidViewModel</strong>类，它继承自ViewModel，并且接收<strong>Application</strong>作为Context，既然是Application作为Context，也就意味着，我们能够明确它的生命周期和Application是一样的，这就不算是一个内存泄露了。</p><p>另外，在本示例中，我们通过自定义接口的方式（OnTimeChangeListener）来实现ViewModel到Activity的通信，这不是一种好的方法，实际上Android为我们提供了<strong>LiveData</strong>组件来解决这个问题。通过LiveData，当ViewModel中的数据发生变化时，Activity能自动收到通知，从而更新UI。我们在下一章节中继续讨论这个问题。</p><h2 id="三、其它使用："><a href="#三、其它使用：" class="headerlink" title="三、其它使用："></a>三、其它使用：</h2><h4 id="1-Activity与Fragment”通信”"><a href="#1-Activity与Fragment”通信”" class="headerlink" title="1. Activity与Fragment”通信”"></a>1. Activity与Fragment”通信”</h4><p>在同一个Activity中存在多个Fragment时，相互传递数据，一般通过定义接口来实现，Acticity从中协调。使用ViewModel能轻易解决Activity和Fragment之间的通信。</p><ul><li>Activity不需要做任何事情，不需要干涉这两个Fragment之间的通信。</li><li>Fragment不需要互相知道，即使一个消失不可见，另一个也能正常的工作。</li><li>Fragment有自己的生命周期，它们之间互不干扰，即便你用一个FragmentC替代了B，FragmentA也能正常工作，没有任何问题。</li></ul><p>有了ViewModel,Activity与Fragment可以共享一个ViewModel,因为Fragment是依附在Activity上的,在实例化ViewModel时将该Activity传入ViewModelProviders,它会给你一个该Activity已创建好了的ViewModel,这个Fragment可以方便的访问该ViewModel中的数据.在Activity中修改userModel数据后,该Fragment就能拿到更新后的数据.</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里拿到的ViewModel实例,其实是和Activity中创建的是一个实例</span>         UserModel userModel <span class="token operator">=</span> ViewModelProviders<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>UserModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre><h4 id="2-Fragment与Fragment”通信”"><a href="#2-Fragment与Fragment”通信”" class="headerlink" title="2.  Fragment与Fragment”通信”"></a>2.  Fragment与Fragment”通信”</h4><p>下面我们来看一个例子</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SharedViewModel</span> <span class="token keyword">extends</span> <span class="token class-name">ViewModel</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> MutableLiveData<span class="token operator">&lt;</span>Item<span class="token operator">></span> selected <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MutableLiveData</span><span class="token operator">&lt;</span>Item<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">select</span><span class="token punctuation">(</span>Item item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        selected<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> LiveData<span class="token operator">&lt;</span>Item<span class="token operator">></span> <span class="token function">getSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> selected<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MasterFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> SharedViewModel model<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        model <span class="token operator">=</span> ViewModelProviders<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>SharedViewModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        itemSelector<span class="token punctuation">.</span><span class="token function">setOnClickListener</span><span class="token punctuation">(</span>item <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            model<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DetailFragment</span> <span class="token keyword">extends</span> <span class="token class-name">Fragment</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>        SharedViewModel model <span class="token operator">=</span> ViewModelProviders<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token function">getActivity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>SharedViewModel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">getSelected</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">observe</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> item <span class="token operator">-</span><span class="token operator">></span>           <span class="token comment" spellcheck="true">// Update the UI.</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>首先定义一个ViewModel,在里面放点数据</li><li>然后在MasterFragment和DetailFragment都可以拿到该ViewModel,拿到了该ViewModel就可以拿到里面的数据了,相当于间接通过ViewModel通信了. so easy….</li></ul><hr><p>参考链接：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F76361500" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/76361500</a><br> 链接：<a href="https://www.jianshu.com/p/7e1497871db2" target="_blank" rel="noopener">https://www.jianshu.com/p/7e1497871db2</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>kotlin：安卓开发动态申请多个权限</title>
      <link href="/2020/09/23/kotlin%EF%BC%9A%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E5%8A%A8%E6%80%81%E7%94%B3%E8%AF%B7%E5%A4%9A%E4%B8%AA%E6%9D%83%E9%99%90/"/>
      <url>/2020/09/23/kotlin%EF%BC%9A%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91%E5%8A%A8%E6%80%81%E7%94%B3%E8%AF%B7%E5%A4%9A%E4%B8%AA%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>应用接入支付宝的sdk，需要申请一些权限。</p><p>这里是kotlin的代码：</p><p>对了：6.0以后有3组，27个权限是需要动态申请的，具体，百度吧。</p><p>下面申请了两个权限（要在manifest文件注册哈）</p><pre class=" language-Kotlin"><code class="language-Kotlin"> //1、首先声明一个数组permissions，将需要的权限都放在里面        val permissions = arrayOf(Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.READ_PHONE_STATE)        val mPermissionList = ArrayList<String>()        val mRequestCode = 0x1//权限请求码        fun initPermission() {            mPermissionList.clear()            for (permission in permissions) {                if (ContextCompat.checkSelfPermission(                        this@MainActivity,                        permission                    ) != PackageManager.PERMISSION_GRANTED                ) {                    mPermissionList.add(permission)                }            }            if (!mPermissionList.isEmpty()) {                // 后续操作...                    ActivityCompat.requestPermissions(this@MainActivity, permissions, mRequestCode)            } else {                Toast.makeText(this@MainActivity,"全部授予！",Toast.LENGTH_SHORT).show()            }        }//重写 override fun onRequestPermissionsResult(requestCode: Int, permissions: Array<out String>, grantResults: IntArray) {        super.onRequestPermissionsResult(requestCode, permissions, grantResults)        when (requestCode) {           0x1 -> for (i in 0 until grantResults.size) {                if (grantResults[i] != PackageManager.PERMISSION_GRANTED)   Toast.makeText(this,"您有未授予的权限，可能影响使用",Toast.LENGTH_SHORT).show()            }        }// 授权结束后的后续操作</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>reply-code=530, reply-text=NOT_ALLOWED - access to vhost &#39;/&#39; refused for user user_admin</title>
      <link href="/2020/09/22/reply-code=530/"/>
      <url>/2020/09/22/reply-code=530/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Java使用amqp-client连接rabbitmq服务端，报出如下异常</p><pre class=" language-java"><code class="language-java">Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>IOException    at com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>AMQChannel<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>AMQChannel<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">105</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>AMQChannel<span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>AMQChannel<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">101</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>AMQChannel<span class="token punctuation">.</span><span class="token function">exnWrappingRpc</span><span class="token punctuation">(</span>AMQChannel<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">123</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>AMQConnection<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>AMQConnection<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">377</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span>ConnectionFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">824</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span>ConnectionFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">778</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ConnectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span>ConnectionFactory<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">868</span><span class="token punctuation">)</span>    at rq<span class="token punctuation">.</span>Producer<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>Producer<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke0</span><span class="token punctuation">(</span>Native Method<span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>NativeMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>NativeMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">62</span><span class="token punctuation">)</span>    at sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>DelegatingMethodAccessorImpl<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">43</span><span class="token punctuation">)</span>    at java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>Method<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">498</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>intellij<span class="token punctuation">.</span>rt<span class="token punctuation">.</span>execution<span class="token punctuation">.</span>application<span class="token punctuation">.</span>AppMain<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>AppMain<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">147</span><span class="token punctuation">)</span>Caused by<span class="token operator">:</span> com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>ShutdownSignalException<span class="token operator">:</span> connection error<span class="token punctuation">;</span> protocol method<span class="token operator">:</span> #method<span class="token operator">&lt;</span>connection<span class="token punctuation">.</span>close<span class="token operator">></span><span class="token punctuation">(</span>reply<span class="token operator">-</span>code<span class="token operator">=</span><span class="token number">530</span><span class="token punctuation">,</span> reply<span class="token operator">-</span>text<span class="token operator">=</span>NOT_ALLOWED <span class="token operator">-</span> access to vhost <span class="token string">'/'</span> refused <span class="token keyword">for</span> user <span class="token string">'user_admin'</span><span class="token punctuation">,</span> <span class="token keyword">class</span><span class="token operator">-</span>id<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> method<span class="token operator">-</span>id<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>utility<span class="token punctuation">.</span>ValueOrException<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span>ValueOrException<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">66</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>utility<span class="token punctuation">.</span>BlockingValueOrException<span class="token punctuation">.</span><span class="token function">uninterruptibleGetValue</span><span class="token punctuation">(</span>BlockingValueOrException<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">32</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>AMQChannel$BlockingRpcContinuation<span class="token punctuation">.</span><span class="token function">getReply</span><span class="token punctuation">(</span>AMQChannel<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">360</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>AMQChannel<span class="token punctuation">.</span><span class="token function">privateRpc</span><span class="token punctuation">(</span>AMQChannel<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">225</span><span class="token punctuation">)</span>    at com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>AMQChannel<span class="token punctuation">.</span><span class="token function">exnWrappingRpc</span><span class="token punctuation">(</span>AMQChannel<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">117</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token number">10</span> more</code></pre><p>定位发现是连接rabbitmq使用的用户没有赋予访问权限，我创建的是admin用户，给admin用户赋予‘/’目录的访问权限就可以，执行如下命令：</p><pre class=" language-java"><code class="language-java">sudo rabbitmqctl  set_permissions <span class="token operator">-</span>p <span class="token operator">/</span> admin <span class="token string">'.*'</span> <span class="token string">'.*'</span> <span class="token string">'.*'</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android LayoutInflater.inflate()使用详解</title>
      <link href="/2020/09/22/Android%20LayoutInflater.inflate()%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
      <url>/2020/09/22/Android%20LayoutInflater.inflate()%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>相信大家都用过LayoutInflater（布局填充器）,今天主要说下我对inflate方法的使用理解。<br> inflate方法有如下两种：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> View <span class="token function">inflate</span> <span class="token punctuation">(</span><span class="token keyword">int</span> resource<span class="token punctuation">,</span> ViewGroup root<span class="token punctuation">)</span><span class="token keyword">public</span> View <span class="token function">inflate</span> <span class="token punctuation">(</span><span class="token keyword">int</span> resource<span class="token punctuation">,</span> ViewGroup root<span class="token punctuation">,</span> <span class="token keyword">boolean</span> attachToRoot<span class="token punctuation">)</span></code></pre><p>查看源码，我们发现两个参数的方法内部引用了三个参数的方法</p><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">public</span> View <span class="token function">inflate</span><span class="token punctuation">(</span><span class="token annotation builtin">@LayoutRes</span> int resource<span class="token punctuation">,</span> <span class="token annotation builtin">@Nullable</span> ViewGroup root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">inflate</span><span class="token punctuation">(</span>resource<span class="token punctuation">,</span> root<span class="token punctuation">,</span> root <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们将两个参数的方法转化为三个参数的方法。如下：</p><pre class=" language-php"><code class="language-php">inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>—————<span class="token operator">></span>inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>相当于：inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item<span class="token punctuation">,</span> <span class="token keyword">parent</span><span class="token punctuation">)</span><span class="token punctuation">;</span>—————<span class="token operator">></span>inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item<span class="token punctuation">,</span> <span class="token keyword">parent</span><span class="token punctuation">,</span> <span class="token keyword">parent</span><span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>相当于：inflater<span class="token punctuation">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>item<span class="token punctuation">,</span> <span class="token keyword">parent</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>所以我们只需要研究四个方法</p><pre class=" language-css"><code class="language-css">inflater<span class="token number">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token number">.</span>layout<span class="token number">.</span>item, null, true<span class="token punctuation">)</span><span class="token punctuation">;</span>inflater<span class="token number">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token number">.</span>layout<span class="token number">.</span>item, null, false<span class="token punctuation">)</span><span class="token punctuation">;</span>inflater<span class="token number">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token number">.</span>layout<span class="token number">.</span>item, parent, true<span class="token punctuation">)</span><span class="token punctuation">;</span>inflater<span class="token number">.</span><span class="token function">inflate</span><span class="token punctuation">(</span>R<span class="token number">.</span>layout<span class="token number">.</span>item, parent, false<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="首先我先说下我对每个参数的理解"><a href="#首先我先说下我对每个参数的理解" class="headerlink" title="首先我先说下我对每个参数的理解"></a>首先我先说下我对每个参数的理解</h5><p>第一个参数：想要添加的布局<br> 第二个参数：想要添加到哪个布局上面<br>          （<strong>null和有值的区别  null时第一个参数中最外层的布局大小无效，有值的时候最外层的布局大小有效</strong>）<br> 第三个参数：是否直接添加到第二个参数布局上面<br>          （<strong>true代表layout文件填充的View会被直接添加进parent，而传入false则代表创建的View会以其他方式被添加进parent</strong>）</p><h5 id="下面我们来对四个方法一一讲解"><a href="#下面我们来对四个方法一一讲解" class="headerlink" title="下面我们来对四个方法一一讲解"></a>下面我们来对四个方法一一讲解</h5><p>为了更好的理解我准备了一个简单的案例，我的Activity的布局如下：一个超简单的RelativeLayout 布局，我们在这理解为父布局</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RelativeLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@+id/rl<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RelativeLayout</span><span class="token punctuation">></span></span></code></pre><p>我还有一个布局layout.xml如下：有一个宽度高度为200dp的LinearLayout ，LinearLayout 中有一个Button按钮。</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>150dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#ff0000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>开开心心每一天<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre><p>布局准好了，下面进入正题。我要把layout.xml这个布局文件添加到我的activity的布局中，我的Activity的代码如下：</p><p><img src="https:////upload-images.jianshu.io/upload_images/1912584-58ec3e3fc7a313b4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/625/format/webp" alt="img"></p><p>Activity.png</p><p>为了看到四个方法有什么不一样，我依次替换圈起来的代码，查看展示效果：</p><h6 id="1：inflater-inflate-R-layout-item-null-true"><a href="#1：inflater-inflate-R-layout-item-null-true" class="headerlink" title="1：inflater.inflate(R.layout.item, null, true);"></a>1：inflater.inflate(R.layout.item, null, true);</h6><p><img src="https:////upload-images.jianshu.io/upload_images/1912584-1b2425267e872c22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/441/format/webp" alt="img"></p><p>img.png</p><h6 id="2：inflater-inflate-R-layout-item-null-false"><a href="#2：inflater-inflate-R-layout-item-null-false" class="headerlink" title="2：inflater.inflate(R.layout.item, null, false);"></a>2：inflater.inflate(R.layout.item, null, false);</h6><p><img src="https:////upload-images.jianshu.io/upload_images/1912584-1b2425267e872c22.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/441/format/webp" alt="img"></p><p>img.png</p><h6 id="3：inflater-inflate-R-layout-item-parent-true"><a href="#3：inflater-inflate-R-layout-item-parent-true" class="headerlink" title="3：inflater.inflate(R.layout.item, parent, true);"></a>3：inflater.inflate(R.layout.item, parent, true);</h6><p>使用该方法时rl.addView(view);代码报错，错误异常如下</p><pre class=" language-csharp"><code class="language-csharp">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>IllegalStateException<span class="token punctuation">:</span> The specified child already has a parent<span class="token punctuation">.</span> You must call <span class="token function">removeView</span><span class="token punctuation">(</span><span class="token punctuation">)</span> on the child's parent first<span class="token punctuation">.</span></code></pre><p>意思是非法状态异常，指定的child已经有一个父容器了。你必须先用chile的父容器调用removeView()。</p><h6 id="源码中对第三个参数的解释是"><a href="#源码中对第三个参数的解释是" class="headerlink" title="源码中对第三个参数的解释是"></a>源码中对第三个参数的解释是</h6><pre class=" language-csharp"><code class="language-csharp">Whether the inflated hierarchy should be attached to the root parameter<span class="token operator">?</span> If <span class="token keyword">false</span><span class="token punctuation">,</span> root <span class="token keyword">is</span> only used to create the correct subclass of LayoutParams <span class="token keyword">for</span> the root view <span class="token keyword">in</span> the XML<span class="token punctuation">.</span></code></pre><p>attachToRoot传入true代表layout文件填充的View会被直接添加进parent，而传入false则代表创建的View会以其他方式被添加进parent。</p><h6 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h6><p>删除rl.addView(view);这一行代码，然后运行展示效果</p><p><img src="https:////upload-images.jianshu.io/upload_images/1912584-ee882486eab4b075.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/428/format/webp" alt="img"></p><p>img.png</p><h6 id="4：inflater-inflate-R-layout-item-parent-false"><a href="#4：inflater-inflate-R-layout-item-parent-false" class="headerlink" title="4：inflater.inflate(R.layout.item, parent, false);"></a>4：inflater.inflate(R.layout.item, parent, false);</h6><p><img src="https:////upload-images.jianshu.io/upload_images/1912584-ee882486eab4b075.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/428/format/webp" alt="img"></p><p>img.png</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>  从案例中我们可以看到1、2这两种方式运行结果一样，第二个参数传null会使要添加的布局视图中根视图的宽高设置失效，在使用这种方式的时候会造成我们无形中多加一层布局，为了使其子view显示相应高度。<strong>在这里不推荐使用</strong><br>   3这种方式我们在使用的时候一定要注意，它会使代表layout文件填充的View会被直接添加进parent，如果我们使用这种方式后，在执行addView()方法就会造成上面的错误。</p><h4 id="推荐使用第四种方式-inflater-inflate-R-layout-item-parent-false"><a href="#推荐使用第四种方式-inflater-inflate-R-layout-item-parent-false" class="headerlink" title="推荐使用第四种方式 inflater.inflate(R.layout.item, parent, false);"></a>推荐使用第四种方式 inflater.inflate(R.layout.item, parent, false);</h4><p>以上是我对inflate方法的使用理解，有什么不对的地方，大家积极留言，我看到后会第一时间回复大家，最后祝大家每天都有个好心情。</p><p>作者：石头1314<br>链接：<a href="https://www.jianshu.com/p/c92243287793" target="_blank" rel="noopener">https://www.jianshu.com/p/c92243287793</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>android studio如何导入jar包</title>
      <link href="/2020/09/21/android%20studio%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5jar%E5%8C%85/"/>
      <url>/2020/09/21/android%20studio%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5jar%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://jingyan.baidu.com/article/f3e34a121b0a11f5eb65359a.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/f3e34a121b0a11f5eb65359a.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>单片机学习网站</title>
      <link href="/2020/09/20/%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/"/>
      <url>/2020/09/20/%E5%8D%95%E7%89%87%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.51cto.com/" target="_blank" rel="noopener">https://www.51cto.com/</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>仿美团首页功能选择的实现</title>
      <link href="/2020/09/20/%E4%BB%BF%E7%BE%8E%E5%9B%A2%E9%A6%96%E9%A1%B5%E5%8A%9F%E8%83%BD%E9%80%89%E6%8B%A9%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/09/20/%E4%BB%BF%E7%BE%8E%E5%9B%A2%E9%A6%96%E9%A1%B5%E5%8A%9F%E8%83%BD%E9%80%89%E6%8B%A9%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一、效果<br><img src="https://img-blog.csdn.net/20161016110128958" alt="这里写图片描述"><br>二、在MainActivity中</p><pre><code>package com.shangyu.meituanviewpager;import android.os.Bundle;import android.support.v4.view.ViewPager;import android.support.v7.app.AppCompatActivity;import android.view.LayoutInflater;import android.view.View;import android.widget.AdapterView;import android.widget.GridView;import android.widget.LinearLayout;import java.util.ArrayList;import butterknife.ButterKnife;import butterknife.InjectView;    /** * Created by 黄家三少 on 2016/10/15. */    public class MainActivity extends AppCompatActivity {    @InjectView(R.id.viewpager)    ViewPager viewpager;    @InjectView(R.id.ll_dot)    LinearLayout llDot;    private String[] titles = {"美食", "电影", "酒店住宿", "休闲娱乐", "外卖", "自助餐", "KTV", "机票/火车票", "周边游", "美甲美睫",            "火锅", "生日蛋糕", "甜品饮品", "水上乐园", "汽车服务", "美发", "丽人", "景点", "足疗按摩", "运动健身", "健身", "超市", "买菜",            "今日新单", "小吃快餐", "面膜", "洗浴/汗蒸", "母婴亲子", "生活服务", "婚纱摄影", "学习培训", "家装", "结婚", "全部分配"};    private ArrayList&lt;Bean&gt; mDatas;    /**     * 总的页数     */    private int pageCount;    /**     * 每一页显示的个数     */    private int pageSize = 10;    /**     * 当前显示的是第几页     */    private int curIndex = 0;    private LayoutInflater inflater;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        ButterKnife.inject(this);        initData();        inflater = LayoutInflater.from(this);        //总的页数=总数/每页数量，并取整        pageCount = (int) Math.ceil(mDatas.size() * 1.0 / pageSize);        ArrayList&lt;View&gt; mPagerList = new ArrayList&lt;&gt;();        for (int i = 0; i &lt; pageCount; i++) {            //每个页面都是inflate出一个新实例            GridView gridView = (GridView) inflater.inflate(R.layout.gridview, viewpager, false);            gridView.setAdapter(new GridViewAdapter(this, mDatas, i, pageSize));            mPagerList.add(gridView);            gridView.setOnItemClickListener(new AdapterView.OnItemClickListener() {                @Override                public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) {                    int pos = position + curIndex * pageSize;                    UIUtils.showToast(mDatas.get(pos).getName());                }            });        }        //设置适配器        viewpager.setAdapter(new ViewPagerAdapter(mPagerList));        //设置圆点        setOvalLayout();    }    /**     * 初始化     */    private void initData() {        mDatas = new ArrayList&lt;&gt;();        for (int i = 0; i &lt; titles.length; i++) {            //动态获取资源ID，第一个参数是资源名，第二个参数是资源类型例如drawable，string等，第三个参数包名            int imageId = getResources().getIdentifier("ic_category_" + i, "mipmap", getPackageName());            mDatas.add(new Bean(titles[i], imageId));        }    }    /**     * 设置圆点     */    public void setOvalLayout() {        for (int i = 0; i &lt; pageCount; i++) {            llDot.addView(inflater.inflate(R.layout.dot, null));        }        // 默认显示第一页        llDot.getChildAt(0).findViewById(R.id.v_dot)                .setBackgroundResource(R.drawable.dot_selected);        viewpager.setOnPageChangeListener(new ViewPager.OnPageChangeListener() {            public void onPageSelected(int position) {                // 取消圆点选中                llDot.getChildAt(curIndex)                        .findViewById(R.id.v_dot)                        .setBackgroundResource(R.drawable.dot_normal);                // 圆点选中                llDot.getChildAt(position)                        .findViewById(R.id.v_dot)                        .setBackgroundResource(R.drawable.dot_selected);                curIndex = position;            }            public void onPageScrolled(int arg0, float arg1, int arg2) {            }            public void onPageScrollStateChanged(int arg0) {            }        });    }}123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115</code></pre><p>二、Bean</p><pre><code>package com.shangyu.meituanviewpager;/** * Created by 黄家三少 on 2016/10/15. */public class Bean {    public String name;    public int iconRes;    public Bean(String name, int iconRes) {        this.name = name;        this.iconRes = iconRes;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public int getIconRes() {        return iconRes;    }    public void setIconRes(int iconRes) {        this.iconRes = iconRes;    }}123456789101112131415161718192021222324252627282930</code></pre><p>三、在GridViewAdapter中</p><pre><code>package com.shangyu.meituanviewpager;import android.content.Context;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.BaseAdapter;import android.widget.ImageView;import android.widget.TextView;import java.util.List;/** * Created by 黄家三少 on 2016/10/15. */public class GridViewAdapter extends BaseAdapter {    private List&lt;Bean&gt; mDatas;    private LayoutInflater inflater;    /**     * 页数下标,从0开始(当前是第几页)     */    private int curIndex;    /**     * 每一页显示的个数     */    private int pageSize;    public GridViewAdapter(Context context, List&lt;Bean&gt; mDatas, int curIndex, int pageSize) {        inflater = LayoutInflater.from(context);        this.mDatas = mDatas;        this.curIndex = curIndex;        this.pageSize = pageSize;    }    /**     * 先判断数据集的大小是否足够显示满本页？mDatas.size() &gt; (curIndex+1)*pageSize,     * 如果够，则直接返回每一页显示的最大条目个数pageSize,     * 如果不够，则有几项返回几,(mDatas.size() - curIndex * pageSize);(也就是最后一页的时候就显示剩余item)     */    @Override    public int getCount() {        return mDatas.size() &gt; (curIndex + 1) * pageSize ? pageSize : (mDatas.size() - curIndex * pageSize);    }    @Override    public Object getItem(int position) {        return mDatas.get(position + curIndex * pageSize);    }    @Override    public long getItemId(int position) {        return position + curIndex * pageSize;    }    @Override    public View getView(int position, View convertView, ViewGroup parent) {        ViewHolder viewHolder = null;        if (convertView == null) {            convertView = inflater.inflate(R.layout.item_gridview, parent, false);            viewHolder = new ViewHolder();            viewHolder.tv = (TextView) convertView.findViewById(R.id.textView);            viewHolder.iv = (ImageView) convertView.findViewById(R.id.imageView);            convertView.setTag(viewHolder);        } else {            viewHolder = (ViewHolder) convertView.getTag();        }        /**         * 在给View绑定显示的数据时，计算正确的position = position + curIndex * pageSize，         */        int pos = position + curIndex * pageSize;        viewHolder.tv.setText(mDatas.get(pos).name);        viewHolder.iv.setImageResource(mDatas.get(pos).iconRes);        return convertView;    }    class ViewHolder {        public TextView tv;        public ImageView iv;    }}12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182</code></pre><p>四、在ViewPagerAdapter中</p><pre><code>package com.shangyu.meituanviewpager;import android.support.v4.view.PagerAdapter;import android.view.View;import android.view.ViewGroup;import java.util.List;/** * Created by 黄家三少 on 2016/10/15. */public class ViewPagerAdapter extends PagerAdapter {    private List&lt;View&gt; mViewList;    public ViewPagerAdapter(List&lt;View&gt; mViewList) {        this.mViewList = mViewList;    }    @Override    public void destroyItem(ViewGroup container, int position, Object object) {        container.removeView(mViewList.get(position));    }    @Override    public Object instantiateItem(ViewGroup container, int position) {        container.addView(mViewList.get(position));        return (mViewList.get(position));    }    @Override    public int getCount() {        if (mViewList == null)            return 0;        return mViewList.size();    }    @Override    public boolean isViewFromObject(View view, Object object) {        return view == object;    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows下的Apache的下载与安装</title>
      <link href="/2020/09/19/Windows%E4%B8%8B%E7%9A%84Apache%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
      <url>/2020/09/19/Windows%E4%B8%8B%E7%9A%84Apache%E7%9A%84%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>PHP的运行必然少不了服务器的支持，何为服务器？通俗讲就是在一台计算机上，安装个服务器软件，这台计算机便可以称之为服务器，服务器软件和计算机本身的操作系统是两码事，计算机自身的操作系统可以为linux、Unix、Windows或者MacOS，同时服务软件也可以是Apache（PHP）、Tomcat(java/jsp)、IIS(asp)。</p><p>  PHP主要使用的是Apache服务器，主流的站点搭建组合为LAMP(Linux、Apache、MySQL、PHP)，Windows下的集成服务器软件为WAMP（Windows、Apache、MySQL、PHP）。另外，还有一些其它的PHP服务器软件，如德国的lighttpd，俄国的nginx。</p><p>  自己在学习中，主要使用了Apache服务器，因此这里主要讲述下关于Apache服务的下载和安装。</p><p>  (一)apache官网下载Apache HTTP Server服务器</p><p>  我相信有些朋友刚用apache服务器时，都希望从官网上下载，而面对着官网上众多的项目和镜像以及目录，也许有点茫然。下面是具体步骤：</p><p>  ①打开apache官网<a href="http://www.apache.org/" target="_blank" rel="noopener">http://www.apache.org/</a>  <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505000213935-897880729.jpg" alt="img"></p><p>  ②点击右上角Download，出现以下界面 ，这里是各镜像服务器，随便找一个，这里用的是推荐版。 <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505000526826-1319204614.jpg" alt="img"></p><p>  ③出现目录列表，这些是apache的项目列表，我也不明白apahce为什么用这种方式浏览，好丑。 <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505000734997-1386167978.jpg" alt="img"></p><p>  ④点“httpd”，出现以下界面 <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505000920185-325426882.jpg" alt="img"></p><p>  ⑤点红框部分，出现如下界面 <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505001451529-63260709.jpg" alt="img"></p><p>  ⑥进入如下界面后，选择第一项ApacheHaus，这是个第三方下载平台，在它的网站下载独立的Apache会是一个压缩包。另外四个中，第二个也是独立的Apache下载地址，另外三个是集成开发环境。本人选的第一个。  <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505001853029-1104279688.jpg" alt="img"></p><p>  ⑦在新的界面中，会发现VC9和VC11字样，通过阅读相关内容得知，VC9是指用VS2008编译的代码，而VC11是用VS2012编译的，而用VS2012编译的无法在Windows XP和Server 2003中使用。算是为了兼容性好点吧，本人选的用VC9编译的32位Apache，选择下载至此，下载过程完成！ <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505002503685-672506539.jpg" alt="img"></p><p>  (二)Apache服务器的安装</p><p>  Apache服务器下载完成后，进行解压缩。</p><p>  1.下载安装包</p><p>  <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505003755185-349346123.png" alt="img"></p><p>  2.解压缩文件到你想放置的目录下，这里我本人选择放在D:\Apache-2.4.20目录下。 </p><p>  <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505004418419-1595733317.png" alt="img"></p><p>  注意：Apache24名称可以根据自己情况改，本人改成“Apache”，如下：</p><p>  <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505004542372-1787513333.png" alt="img"></p><p>  (三)Apache服务器的配置</p><p>  打开httpd.conf文件（在D:\Apache-2.4.20\Apache\conf下，这是我的，放置的位置不同，则文件位置不同）</p><p>  ①修改目录位置，如下图所示：</p><p>  <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505005820997-500305211.png" alt="img"></p><p>  若你的80端口被占用（可在cmd下用命令netstat -a查看），则将80端口改为别的保存。</p><p>  <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505010037169-503970254.png" alt="img"></p><p>  ②配置安装Apache的主服务，有了它，Apache才可启动。打开cmd窗口，输入：”D:\Apache-2.4.20\Apache\bin\httpd.exe” -k install -n apache，切记包含引号。该命令的意思是，安装apache服务，并将该服务名称命名为apache(你也可以改成别的)，回车。</p><p>  服务安装完毕，完毕后，会自动测试，若有问题，窗口会提示错误，此时请根据错误自行排查。</p><p>  正常安装完毕如下图所示：</p><p>  <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505011235122-863680161.png" alt="img"></p><p>  其中，Errors reported here must be corrected before the service can be started.意思是，此处报告的错误必须在服务开始前进行纠正。若没有，则成功。</p><p>  (四)Apache服务器的启动</p><p>  配置好Apache服务器之后，我们便能启动服务器，Windows下Apache服务器的启动方式有三种。</p><p>  1.利用Windows启动</p><p>  打开计算机管理，找到apache服务项，选择后，右键单击，便可选择相应操作（启动、停止、重新启动） <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505012006138-1243953172.jpg" alt="img"></p><p>  2.利用命令行启动</p><p>  不知道为什么我用命令行启动不了，截图如下：</p><p>  <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505012851841-1199506172.png" alt="img"></p><p>  3.利用Apache服务器自身的视窗打开</p><p>  找到bin目录下的ApacheMonitor.exe，打开</p><p>  <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505013509466-610552136.png" alt="img"></p><p>  双击运行，桌面右下角会出现图标，双击打开窗口界面，会看到如图所示：</p><p>  <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505013628388-827838592.png" alt="img"></p><p>  点击左侧start，启动apache服务。</p><p>  补充句，从该界面可看出，其可以手动控制服务的开启与关闭，为了节省资源，关闭Apache服务器的时候，请先点击“Stop”关闭apache服务。当然，该服务也可以windows系统服务中关闭（建议设置成手动）。</p><p>  下图显示的是该服务成功显示的状态：</p><p>  <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505014001326-1048808482.png" alt="img"></p><p>  打开浏览器，输入访问<a href="http://localhost，若出现如下图所示界面，则Apache服务器的基本配置完毕，此时apache服务器已经可以运行，更具体的配置，需要使用者自行去参悟了。" target="_blank" rel="noopener">http://localhost，若出现如下图所示界面，则Apache服务器的基本配置完毕，此时apache服务器已经可以运行，更具体的配置，需要使用者自行去参悟了。</a>  <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505014253810-2101465318.jpg" alt="img"></p><p>  (五)apache服务的卸载</p><p>  若Apache服务器软件不想用了，想要卸载，需要先卸载apache服务（切记，若直接删除安装路径的文件夹，会有残余文件在电脑，可能会造成不必要的麻烦），在cmd命令窗口，输入如下（建议先停止服务再删除）：sc delete apache(apache是Apache服务器的服务名)。</p><p>  <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505014856435-397046090.png" alt="img"></p><p>  注意：apache服务的卸载，我没试过，不知道可行否？只是好不容易才弄好Apache服务器，不想再折腾了。</p><p>  到此为止，Apache服务器的下载、安装、启动和卸载全部结束。</p><p>  注：关于Apache服务器下的各个文件的用途，如下图所示：</p><p>  <img src="http://images2015.cnblogs.com/blog/680798/201605/680798-20160505100706326-614699362.png" alt="img"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ创建用户方法</title>
      <link href="/2020/09/19/RabbitMQ%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E6%96%B9%E6%B3%95/"/>
      <url>/2020/09/19/RabbitMQ%E5%88%9B%E5%BB%BA%E7%94%A8%E6%88%B7%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://jingyan.baidu.com/article/e4511cf37b42da2b855eaf40.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/e4511cf37b42da2b855eaf40.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android stdio卡在download Gradle</title>
      <link href="/2020/09/19/Android%20stdio%E5%8D%A1%E5%9C%A8download%20Gradle/"/>
      <url>/2020/09/19/Android%20stdio%E5%8D%A1%E5%9C%A8download%20Gradle/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在打开Android stdio时，新建一个helloworld项目时就出错，心里真是emmm</p><p>具体问题就是下方的build一直加载不完，如下图</p><p><img src="https:////upload-images.jianshu.io/upload_images/18675405-981a580909c5cb85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/549/format/webp" alt="img"></p><p>build</p><p>查了资料说这是在下载gradle，去看了一下果然Gradle的文件没有动静</p><p><img src="https:////upload-images.jianshu.io/upload_images/18675405-37348dbf39193e05.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1116/format/webp" alt="img"></p><p>具体路径</p><p>看教程说要下载gradle离线包，自己操作还是一脸懵，最后参考csdn的兄弟建议弄好了。</p><p>——&gt;<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fblog.csdn.net%2Fikqmksqm%2Farticle%2Fdetails%2F79088403" target="_blank" rel="noopener">点击这里</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Apache下载和安装</title>
      <link href="/2020/09/18/Apache%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%AE%89%E8%A3%85/"/>
      <url>/2020/09/18/Apache%E4%B8%8B%E8%BD%BD%E5%92%8C%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.登录官网：<a href="http://httpd.apache.org/download.cgi" target="_blank" rel="noopener">http://httpd.apache.org/download.cgi</a><br>2.如下图<br><img src="https://img-blog.csdn.net/20180605115721163?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21hcTU2MzEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br><img src="https://img-blog.csdn.net/20180605115859506?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21hcTU2MzEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br><img src="https://img-blog.csdn.net/20180605115934672?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21hcTU2MzEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>3.下载安装包，然后解压到指定的目录。可以根据自己的要求指定目录（E:\web\Apache24）web文件夹可以根据自己的需求命名。<br>4.进入到E:\web\Apache24/conf文件夹中，打开httpd.conf文件，如下图：<br><img src="https://img-blog.csdn.net/20180605121405518?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21hcTU2MzEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>更改为Apache文件解压安装的路径（E:\web\Apache24）。<br>5.打开命令行，在命令行中输入netstat -a 查看80端口是否被占用。如果被占用，打开httpd.conf文件，找到如下图：<br><img src="https://img-blog.csdn.net/20180605122137585?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21hcTU2MzEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>更改80端口没有被占用的端口（例如：8088）然后保存。<br>5通过命令行进入到E：/web/Apache24/bin目录下，然后执行httpd -k install命令安装<br><img src="https://img-blog.csdn.net/2018060512294347?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21hcTU2MzEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>然后在命令行中输入 httpd - k start命令启动服务<br>6在浏览器中输入loaclhost：8088 回车。如下图<img src="https://img-blog.csdn.net/20180605133555707?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21hcTU2MzEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"><br>7，停止服务，在命令行中输入httpd -k stop<br><img src="https://img-blog.csdn.net/20180605134924349?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21hcTU2MzEw/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="这里写图片描述"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Python之Rabbitmq发送消息</title>
      <link href="/2020/09/18/Python%E4%B9%8BRabbitmq%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/"/>
      <url>/2020/09/18/Python%E4%B9%8BRabbitmq%E5%8F%91%E9%80%81%E6%B6%88%E6%81%AF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Python之Rabbitmq发送消息"><a href="#Python之Rabbitmq发送消息" class="headerlink" title="Python之Rabbitmq发送消息"></a><a href="https://www.cnblogs.com/Wu13241454771/p/13261381.html" target="_blank" rel="noopener">Python之Rabbitmq发送消息</a></h1><p><strong>欢迎关注【无量测试之道】公众号，回复【领取资源】,</strong><br><strong>Python编程学习资源干货、</strong><br><strong>Python+Appium框架APP的UI自动化、</strong><br><strong>Python+Selenium框架Web的UI自动化、</strong><br><strong>Python+Unittest框架API自动化、</strong></p><p><strong>资源和代码 免费送啦~</strong><br><strong>文章下方有公众号二维码，可直接微信扫一扫关注即可。</strong></p><p><strong>1、什么是Rabbitmq?</strong></p><p>Rabbitmq是一个在AMQP基础上完整的，可复用的企业消息系统。他遵循Mozilla Public License开源协议。</p><p>MQ全称为Message Queue, 消息队列（MQ）是一种应用程序对应用程序的通信方法。应用程序通过读写出入队列的消息（针对应用程序的数据）来通信，而无需专用连接来链接它们。消 息传递指的是程序之间通过在消息中发送数据进行通信，而不是通过直接调用彼此来通信，直接调用通常是用于诸如远程过程调用的技术。排队指的是应用程序通过队列来通信。队列的使用除去了接收和发送应用程序同时执行的要求。</p><p>通俗点来讲：把Rabbitmq想象成一个邮局，当你把你想要发布的邮件放在邮箱中时，你可以确定邮差先生最终将邮件发送给你的收件人。在这个比喻中，Rabbitmq是邮政信箱，邮局和邮递员。</p><p>消息发送的示意图：</p><p><img src="https://img2020.cnblogs.com/blog/2046225/202007/2046225-20200707155121294-1043204072.png" alt="img"></p><p><strong>2、如何搭建一个Rabbitmq服务？</strong></p><p><strong>step1:检索rabbitmq 镜像</strong><br><strong>docker search rabbitmq</strong></p><p><strong>step2:下载rabbitmq 镜像</strong><br><strong>docker pull rabbitmq:management</strong></p><p><strong>step3: 启动rabbitmq 容器</strong><br><strong>docker run -d -e RABBITMQ_DEFAULT_USER=guest -e RABBITMQ_DEFAULT_PASS=guest -p 15672:15672 -p 5672:5672 rabbitmq:management</strong></p><p><strong>step4: 登录浏览器查看mq服务是否正常</strong></p><p><img src="https://img2020.cnblogs.com/blog/2046225/202007/2046225-20200707155441990-205407006.png" alt="img"></p><p><strong>3、创建一个虚拟主机</strong> </p><p>创建一个虚拟主机（ virtual hosts，系统默认会创建一个/） 并且给guest 账号赋上权限（此步骤可省略）</p><p>如果需要手动创建的话，需要单独创建并且赋权限给guest账号。</p><p><strong>4、Rabbitmq 发消息简单模式</strong> </p><p><strong>step1：获取Rabbitmq服务的连接</strong><br><strong>step2：创建一个信道</strong><br><strong>step3：声明一个队列</strong><br><strong>step4：向列表存放消息</strong><br><strong>step5：关闭连接</strong></p><p>具体代码如下：</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><pre><code> 1 import json 2 import pika 3 import datetime 4   5 #生成消息入口处 6 def get_message(): 7     for i in range(10): #生成10条消息 8         message=json.dumps({'id': "10000%s" % i, "amount": 100 * i,"name":"tony","createtime":str(datetime.datetime.now())}) 9         producter(message)10  11 #消息生产者12  13 def producter(message):#消息生产者14     # 获取与rabbitmq 服务的连接，虚拟队列需要指定参数 virtual_host，如果是默认的可以不填（默认为/)，也可以自己创建一个15     connection = pika.BlockingConnection(pika.ConnectionParameters(host='127.0.0.1', port=5672,credentials=pika.PlainCredentials('guest', 'guest')))16     #创建一个 AMQP 信道（Channel）,建造一个大邮箱，隶属于这家邮局的邮箱17     channel = connection.channel()18     # 声明消息队列tester，消息将在这个队列传递，如不存在，则创建19     channel.queue_declare(queue='tester')20     # 向队列插入数值 routing_key的队列名为tester，body 就是放入的消息内容，exchange指定消息在哪个队列传递，这里是空的exchange但仍然能够发送消息到队列中，因为我们使用的是我们定义的空字符串“”exchange（默认的exchange）21     channel.basic_publish(exchange='', routing_key='tester', body=message)22     # 关闭连接23     connection.close()24  25 if __name__=="__main__":26     get_message()#程序执行入口</code></pre><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p><strong>5、检查mq中tester队列中是否产生了10条消息记录</strong> </p><p>如下截图所示：</p><p><img src="https://img2020.cnblogs.com/blog/2046225/202007/2046225-20200707155543392-1739940770.png" alt="img"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>an</title>
      <link href="/2020/09/18/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/"/>
      <url>/2020/09/18/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在linux下安装配置rabbitMQ详细教程</title>
      <link href="/2020/09/18/%E5%9C%A8linux%E4%B8%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AErabbitMQ%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/"/>
      <url>/2020/09/18/%E5%9C%A8linux%E4%B8%8B%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AErabbitMQ%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="安装Erlang"><a href="#安装Erlang" class="headerlink" title="安装Erlang"></a>安装Erlang</h3><p>由于RabbitMQ依赖Erlang， 所以需要先安装Erlang。</p><p>Erlang的安装方式大概有两种：</p><ol><li><p>从Erlang Solution安装(推荐)</p><pre><code># 添加erlang solutions源 $ wget https://packages.erlang-solutions.com/erlang-solutions-1.0-1.noarch.rpm $ sudo rpm -Uvh erlang-solutions-1.0-1.noarch.rpm $ sudo yum install erlang</code></pre></li></ol><ol start="2"><li><p>从EPEL源安装(这种方式安装的Erlang版本可能不是最新的，有时候不能满足RabbitMQ需要的最低版本)</p><pre><code> # 启动EPEL源 $ sudo yum install epel-release  # 安装erlang $ sudo yum install erlang</code></pre></li></ol><p>完成后安装RabbitMQ：</p><p>先下载rpm：</p><pre><code>wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.6/rabbitmq-server-3.6.6-1.el7.noarch.rpm</code></pre><p>下载完成后安装：</p><pre><code>yum install rabbitmq-server-3.6.6-1.el7.noarch.rpm </code></pre><pre><code></code></pre><p>安装时如果遇到下面的依赖错误</p><pre><code>Error: Package: socat-1.7.2.3-1.el6.x86_64 (epel)       Requires: libreadline.so.5()(64bit)</code></pre><p>可以尝试先执行</p><pre><code>$ sudo yum install socat</code></pre><h3 id="关于RabbitMQ的一些基本操作"><a href="#关于RabbitMQ的一些基本操作" class="headerlink" title="关于RabbitMQ的一些基本操作"></a>关于RabbitMQ的一些基本操作</h3><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><pre><code>$ sudo chkconfig rabbitmq-server on  # 添加开机启动RabbitMQ服务$ sudo /sbin/service rabbitmq-server start # 启动服务$ sudo /sbin/service rabbitmq-server status  # 查看服务状态$ sudo /sbin/service rabbitmq-server stop   # 停止服务# 查看当前所有用户$ sudo rabbitmqctl list_users# 查看默认guest用户的权限$ sudo rabbitmqctl list_user_permissions guest# 由于RabbitMQ默认的账号用户名和密码都是guest。为了安全起见, 先删掉默认用户$ sudo rabbitmqctl delete_user guest# 添加新用户$ sudo rabbitmqctl add_user username password# 设置用户tag$ sudo rabbitmqctl set_user_tags username administrator# 赋予用户默认vhost的全部操作权限$ sudo rabbitmqctl set_permissions -p / username ".*" ".*" ".*"# 查看用户的权限$ sudo rabbitmqctl list_user_permissions username</code></pre><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p>更多关于<code>rabbitmqctl</code>的使用，可以参考<a href="https://link.jianshu.com/?t=https://www.rabbitmq.com/man/rabbitmqctl.1.man.html" target="_blank" rel="noopener">帮助手册</a>。</p><h3 id="开启web管理接口"><a href="#开启web管理接口" class="headerlink" title="开启web管理接口"></a>开启web管理接口</h3><p>如果只从命令行操作RabbitMQ，多少有点不方便。幸好RabbitMQ自带了web管理界面，只需要启动插件便可以使用。</p><pre><code>$ sudo rabbitmq-plugins enable rabbitmq_management</code></pre><p>然后通过浏览器访问</p><p><a href="https://link.jianshu.com/?t=http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a></p><p>输入用户名和密码访问web管理界面了。</p><h3 id="配置RabbitMQ"><a href="#配置RabbitMQ" class="headerlink" title="配置RabbitMQ"></a>配置RabbitMQ</h3><p>关于RabbitMQ的配置，可以下载RabbitMQ的<a href="https://link.jianshu.com/?t=https://raw.githubusercontent.com/rabbitmq/rabbitmq-server/stable/docs/rabbitmq.config.example" target="_blank" rel="noopener">配置文件模板</a>到<code>/etc/rabbitmq/rabbitmq.config</code>, 然后按照需求更改即可。<br>关于每个配置项的具体作用，可以参考<a href="https://link.jianshu.com/?t=https://www.rabbitmq.com/configure.html" target="_blank" rel="noopener">官方文档</a>。<br>更新配置后，别忘了重启服务哦！</p><h3 id="开启用户远程访问"><a href="#开启用户远程访问" class="headerlink" title="开启用户远程访问"></a>开启用户远程访问</h3><p>默认情况下，RabbitMQ的默认的<code>guest</code>用户只允许本机访问， 如果想让<code>guest</code>用户能够远程访问的话，只需要将配置文件中的<code>loopback_users</code>列表置为空即可，如下：</p><pre><code>{loopback_users, []}</code></pre><p>另外关于新添加的用户，直接就可以从远程访问的，如果想让新添加的用户只能本地访问，可以将用户名添加到上面的列表, 如只允许<code>admin</code>用户本机访问。</p><pre><code>{loopback_users, ["admin"]}</code></pre><p>更新配置后，别忘了重启服务哦！</p><pre><code> sudo /sbin/service rabbitmq-server status  # 查看服务状态</code></pre><p><img src="https://images2015.cnblogs.com/blog/321801/201611/321801-20161123155611737-770552575.png" alt="img"></p><p>这里可以看到log文件的位置，转到文件位置，打开文件：</p><p><img src="https://images2015.cnblogs.com/blog/321801/201611/321801-20161123155722050-140847138.png" alt="img"></p><p>这里显示的是没有找到配置文件，我们可以自己创建这个文件</p><pre><code>cd /etc/rabbitmq/vi rabbitmq.config</code></pre><p>编辑内容如下：</p><pre><code>[{rabbit, [{loopback_users, []}]}].</code></pre><p>这里的意思是开放使用，rabbitmq默认创建的用户guest，密码也是guest，这个用户默认只能是本机访问，localhost或者127.0.0.1，从外部访问需要添加上面的配置。</p><p>保存配置后重启服务：</p><pre><code>service rabbitmq-server stopservice rabbitmq-server start</code></pre><p>此时就可以从外部访问了，但此时再看log文件，发现内容还是原来的，还是显示没有找到配置文件，可以手动删除这个文件再重启服务，不过这不影响使用</p><pre><code>rm rabbit\@mythsky.log service rabbitmq-server stopservice rabbitmq-server start</code></pre><p>注意:记得要开放5672和15672端口</p><ol><li>/sbin/iptables -I INPUT -p tcp –dport 5672 -j ACCEPT</li><li>/sbin/iptables -I INPUT -p tcp –dport 15672 -j ACCEPT</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>android studio gradle下载慢 解决方法</title>
      <link href="/2020/09/18/android%20studio%20gradle%E4%B8%8B%E8%BD%BD%E6%85%A2%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2020/09/18/android%20studio%20gradle%E4%B8%8B%E8%BD%BD%E6%85%A2%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="在gradle下载地址-地址非常的慢，用谷歌浏览器都不行（至于其他浏览器快不快我不知道，根据我个人经验，这种网站谷歌慢，其他的浏览器可能都打不开），就十几KB-s（如图2），一百多兆的zip根本下不动。而且经常出现如图3的现象，很头疼。"><a href="#在gradle下载地址-地址非常的慢，用谷歌浏览器都不行（至于其他浏览器快不快我不知道，根据我个人经验，这种网站谷歌慢，其他的浏览器可能都打不开），就十几KB-s（如图2），一百多兆的zip根本下不动。而且经常出现如图3的现象，很头疼。" class="headerlink" title="在gradle下载地址 地址非常的慢，用谷歌浏览器都不行（至于其他浏览器快不快我不知道，根据我个人经验，这种网站谷歌慢，其他的浏览器可能都打不开），就十几KB/s（如图2），一百多兆的zip根本下不动。而且经常出现如图3的现象，很头疼。"></a>在<a href="https://links.jianshu.com/go?to=https%3A%2F%2Fservices.gradle.org%2Fdistributions%2F" target="_blank" rel="noopener">gradle下载地址</a> 地址非常的慢，用谷歌浏览器都不行（至于其他浏览器快不快我不知道，根据我个人经验，这种网站谷歌慢，其他的浏览器可能都打不开），就十几KB/s（如图2），一百多兆的zip根本下不动。而且经常出现如图3的现象，很头疼。</h3><p><img src="https:////upload-images.jianshu.io/upload_images/18760276-4fb0406f85d523dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>图 1 gradle网站</p><p><img src="https:////upload-images.jianshu.io/upload_images/18760276-7218fff66c12ef1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/963/format/webp" alt="img"></p><p>图 2</p><p><img src="https:////upload-images.jianshu.io/upload_images/18760276-d83df04fac02b7cb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/925/format/webp" alt="img"></p><p>图 3</p><p>我在搞了快一天的时候，不知为何会有用手机下载试试的想法，然后就试了一下。</p><p>enmm，虽然不是太快，但也有100到200KB的速度，大概10分钟左右的时间，就下了一半了。相对于电脑浏览器下载的速度，在手机浏览器下载（我用的是qq浏览器，谷歌也试了，都差不多，所以不局限于用什么浏览器），速度已经很可观了。</p><p>有可能是本人电脑原因导致下载速度慢，此方法只供参考，非百分百有效。</p><p>作者：木头冷<br>链接：<a href="https://www.jianshu.com/p/c5024b980356" target="_blank" rel="noopener">https://www.jianshu.com/p/c5024b980356</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第一次启动Android Studio 卡在Gradle界面</title>
      <link href="/2020/09/17/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%90%AF%E5%8A%A8Android%20Studio%20%E5%8D%A1%E5%9C%A8Gradle%E7%95%8C%E9%9D%A2/"/>
      <url>/2020/09/17/%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%90%AF%E5%8A%A8Android%20Studio%20%E5%8D%A1%E5%9C%A8Gradle%E7%95%8C%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="问题原因："><a href="#问题原因：" class="headerlink" title="问题原因："></a>问题原因：</h4><p>Gradle被墙。</p><h4 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h4><ul><li>首先打开</li></ul><pre><code>C:\users\你的用户名\.gradle\wrapper\dists\gradle-***-all\*****\1</code></pre><p>查看临时文件的文件名</p><ul><li>进入 <a href="https://services.gradle.org/distributions/" target="_blank" rel="noopener">https://services.gradle.org/distributions/</a><br>下载对应的zip文件。将zip放入以下路径</li></ul><pre><code>C:\users\你的用户名\.gradle\wrapper\dists\gradle-***-all\*****\1</code></pre><ul><li>删除此文件夹下除这个zip文件外的所有文件和文件夹。</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android对MySQL数据库中存取图片</title>
      <link href="/2020/09/16/Android%E5%AF%B9MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E5%AD%98%E5%8F%96%E5%9B%BE%E7%89%87/"/>
      <url>/2020/09/16/Android%E5%AF%B9MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%AD%E5%AD%98%E5%8F%96%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Android数据库中存取图片通常使用两种方式，一种是保存图片所在路径，二是将图片以二进制的形式存储（sqlite</p><p>3支持BLOB数据类型）。对于两种方法的使用，好像第二种方法不如第一种方法更受程序员欢迎，他们认为，在很多数</p><p>据库语言里，处理大字段都是不容易的，像图片这样的文件放在数据库里会有问题：对数据库的读写速度永远赶不上文</p><p>件系统的处理速度，使数据库变得巨大；但也有很多人认为像图片这样的数据存放在数据库中也有好处：易于备份，且</p><p>备份速度绝对比备份文件快，比较容易数据迁移等等。其实这两种方法都有优缺点，具体使用哪种方法要视情况而定。</p><p>个人倾向于使用数据库存取图片，因为个人认为存到数据库里的数据不会因外部数据的变化而丢失改变，比如你拍照获</p><p>得一张图片，如果是将路径存到数据库，当这张照片被删除之后，下次读取数据库就得不到想要的结果了。接下来详细</p><p>介绍数据库存取图片的方法：</p><p>MyDatabaseHelper.jave:</p><p><img src="https://img-blog.csdn.net/20150313193236661?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDc3ODE1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p><img src="https://img-blog.csdn.net/20150313193125840?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDc3ODE1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p><img src="https://img-blog.csdn.net/20150313193304039?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDc3ODE1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p><img src="https://img-blog.csdn.net/20150313193314866?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDc3ODE1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>Test.jave:</p><p><img src="https://img-blog.csdn.net/20150313193633204?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDc3ODE1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p><img src="https://img-blog.csdn.net/20150313193643189?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMDc3ODE1OQ==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>android studio使用JDBC访问mysql数据库（Kotlin方法）</title>
      <link href="/2020/09/15/android%20studio%E4%BD%BF%E7%94%A8JDBC%E8%AE%BF%E9%97%AEmysql%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88Kotlin%E6%96%B9%E6%B3%95%EF%BC%89/"/>
      <url>/2020/09/15/android%20studio%E4%BD%BF%E7%94%A8JDBC%E8%AE%BF%E9%97%AEmysql%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%88Kotlin%E6%96%B9%E6%B3%95%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="android-studio使用JDBC访问mysql数据库（Kotlin方法）"><a href="#android-studio使用JDBC访问mysql数据库（Kotlin方法）" class="headerlink" title="android studio使用JDBC访问mysql数据库（Kotlin方法）"></a><a href="https://www.cnblogs.com/vocus/p/12235312.html" target="_blank" rel="noopener">android studio使用JDBC访问mysql数据库（Kotlin方法）</a></h1><p>工具：mysql-connector-java-5.1.48.jar，mysql version 5.6.19，android studio内置模拟器</p><p>1.connection</p><p><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="img"> View Code</p><p>注意事项：android studio内置模拟器ip地址一定要设置为10.0.2.2</p><p>连接问题参考<a href="https://blog.csdn.net/qq_37141773/article/details/84326163" target="_blank" rel="noopener">https://blog.csdn.net/qq_37141773/article/details/84326163</a></p><p>2.PreparedStatement</p><p>【准备工作】</p><p>在数据test中建立table</p><p> use test;</p><p>create table stuinfo(id int,name varchar(20));</p><p><img src="https://img2018.cnblogs.com/i-beta/1744377/202001/1744377-20200127005647387-1201718523.png" alt="img"></p><p> &lt;1&gt;</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><pre><code>import java.lang.Exceptionimport java.sql.Driverimport java.sql.DriverManagerimport java.sql.PreparedStatementinterface Connection {     fun init(){        var driver="com.mysql.jdbc.Driver"        var url="jdbc:mysql://10.0.2.2:3306/test"        var user="root"        var psd="rs123456"        try {            Class.forName(driver).newInstance()            println("连接成功1")        }catch (e:Exception){            e.printStackTrace()            println("连接失败")        }        try{            Thread({                val conn=DriverManager.getConnection(url,user,psd)                var sql:String="insert into stuinfo(id,name)values(?,?)"                val ps:PreparedStatement=conn.prepareStatement(sql)                ps.setString(1,"3")                ps.setString(2,"vocus")                ps.execute()            }).start()        }catch (e:Exception) {            e.printStackTrace()            println("连接失败2")        }    }}</code></pre><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p><img src="https://img2018.cnblogs.com/i-beta/1744377/202001/1744377-20200127010503160-1783678176.png" alt="img"></p><p> &lt;2&gt;Util类</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><pre><code>class DbUtil {    fun updateDatabase(sql:String,vararg args:Any) {        var driver = "com.mysql.jdbc.Driver"        var url = "jdbc:mysql://10.0.2.2:3306/test"        var user = "root"        var psd = "rs123456"        //var sql = "insert into stuinfo(id,name) values(?,?)"        try {            Class.forName(driver).newInstance()            println("数据库连接成功...")        } catch (e: Exception) {            e.printStackTrace()        }        try {            Thread({                var conn = DriverManager.getConnection(url, user, psd)                var ps = conn!!.prepareStatement(sql)                for(i in 0 until args.size){                    ps.setObject(i+1,args[i])                }                ps.execute()                println("操作数据成功...")            }).start()        } catch (e: Exception) {            e.printStackTrace()        }    }}</code></pre><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><p> 增加查询</p><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><pre><code>    var conn:java.sql.Connection?=null    var driver = "com.mysql.jdbc.Driver"    var url = "jdbc:mysql://10.0.2.2:3306/test"    var user = "root"    var psd = "rs123456"    fun connection():java.sql.Connection?{        //var sql = "insert into stuinfo(id,name) values(?,?)"        try {            Class.forName(driver).newInstance()            println("数据库连接成功...")        } catch (e: Exception) {            e.printStackTrace()        }        try {                conn = DriverManager.getConnection(url, user, psd)        }catch (e:Exception){            e.printStackTrace()        }        return conn    }    fun updateDatabase(sql:String,vararg args:Any) {    try {        Thread({            var conn = connection()            var ps = conn!!.prepareStatement(sql)            for(i in 0 until args.size){                ps.setObject(i+1,args[i])            }            ps.execute()            println("操作数据成功...")        }).start()    } catch (e: Exception) {        e.printStackTrace()    } }    fun queryDatabase(sql:String,vararg args:Any){        try{            Thread({                var conn=connection()                var ps=conn!!.prepareStatement(sql)                for(i in 0 until args.size){                    ps.setObject(i+1,args[i])                }                var resultSet=ps.executeQuery()                var rsmd=resultSet.getMetaData()                var columns=rsmd.columnCount                println("执行查询成功...以下为返回结果...")                if(resultSet.next()) {                    for (i in 0 until columns) {                        var value=resultSet.getObject(i+1)                        var columnName=rsmd.getColumnName(i+1)                        println("${columnName},${value}")                    }                }            }).start()        }catch (e:Exception){            e.printStackTrace()        }    }}</code></pre><p><a href="javascript:void(0);"><img src="https://common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>android开发——用户头像</title>
      <link href="/2020/09/14/android%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94%E7%94%A8%E6%88%B7%E5%A4%B4%E5%83%8F/"/>
      <url>/2020/09/14/android%E5%BC%80%E5%8F%91%E2%80%94%E2%80%94%E7%94%A8%E6%88%B7%E5%A4%B4%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="android开发——用户头像"><a href="#android开发——用户头像" class="headerlink" title="android开发——用户头像"></a><a href="https://www.cnblogs.com/jiuweilinghu/p/7845320.html" target="_blank" rel="noopener">android开发——用户头像</a></h1><p>最近，小灵狐得知了一种能够加快修炼速度的绝世秘法，那便是修炼android神功。小灵狐打算用android神功做一个app，今天他的修炼内容就是头像功能。可是小灵狐是个android小白啊，所以修炼过程也是困难重重。下面我们来看看他的修炼过程吧。</p><h1 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h1><p>小灵狐想要能够拥有头像，那么首先就要有显示头像的地方，也就是控件。首先可以采用ImageView来，但是小灵狐不喜欢用ImageView来，他选择了另一种控件——CircleImageView。这是一种能够将图片圆形化的控件，用法和ImageView是完全一样的，就是会自动把头像转化成圆形的。要使用这个控件，首先要引入第三方库<code>de.hdodenhof:circleimageview:2.2.0</code>，剩下的就和ImageView一样了。比如他在布局中加入了如下的样式：</p><pre><code>&lt;de.hdodenhof.circleimageview.CircleImageView            android:id="@+id/civ_my_avatar"            // 控件id，唯一表示控件            android:layout_width="100dp"              // 设置宽为100dp            android:layout_height="100dp"             // 设置高为100dp            android:layout_gravity="center"           // 设置在布局中的显示位置为中间            /&gt;</code></pre><p>之后小灵狐发现这样子如果没有图片的话，就看不见这个控件，他就想要在控件外围显示一个圈，在这样就算没有头像，那么这个圈也会显示出来，让人一看就知道这里是要显示头像的。于是，他就在上面的代码中加入了以下的设置</p><pre><code>app:civ_border_width="1dp"            // 设置边框宽度，默认为0，这样就看不到那个圈了app:civ_border_overlay="true"         // 设置边框是否覆盖在图片上，默认为falseapp:civ_border_color="@color/silver"  // 设置边框的颜色，默认为黑色，这里用了一种自定义的颜色——银色app:civ_fill_color="@color/whiteSmoke"// 设置填充底色，默认为透明，这里用了自定义的颜色——白烟色</code></pre><p>加上了上面的设置，便可以显示出一个头像的圈圈了。这样，基本的东西就准备好了,但是还是没有图片。如果想要显示某张图片(假设图片为drawable文件夹下的一张名为“fox”的图片)，只要再加上下面的设置就好了。</p><pre><code>android:src="@drawable/fox"</code></pre><p>如果想要了解更多的关于CircleImageView的内容，可以参考<br><a href="https://github.com/hdodenhof/CircleImageView" target="_blank" rel="noopener">CircleImageView的项目源码链接的项目源码链接</a></p><h1 id="修改头像"><a href="#修改头像" class="headerlink" title="修改头像"></a>修改头像</h1><p>现在已经能够成功显示出头像了，但是小灵狐喜欢用头像来表达自己的心情，所以他经常会换头像，这可怎么办呢？不急，在更换头像之前，我们需要能够选择一张用来替换的图片。小灵狐想要点击头像就可以选择系统相册里面的图片并把它设为头像。我们一步步来。</p><h2 id="设置头像框监听事件"><a href="#设置头像框监听事件" class="headerlink" title="设置头像框监听事件"></a>设置头像框监听事件</h2><p>我们给头像框设置一个监听事件，使得点击它后会调用系统相册。这就要先给头像框设置监听事件了。给控件设置监听事件只要两步就好啦，首先创建一个对应控件类型的对象，并通过<code>findViewById(int id)</code>函数找到控件id将对象与空间进行绑定。然后就可以通过对象来调用<code>setOnClickListener()</code>函数，从而达到监听的效果，代码如下：</p><pre><code>// 根据上面指定的控件id创建CircleImageView控件对象CircleImageView circleImageView = (CircleImageView) findViewById(R.id.civ_my_avatar);// 调用监听函数circleImageView.setOnClickListener(new View.OnClickListener() {    @Override    public void onClick(View v) {         // 相关操作    }});</code></pre><h1 id="调用系统相册"><a href="#调用系统相册" class="headerlink" title="调用系统相册"></a>调用系统相册</h1><p>设置好监听事件后，就可以在“相关操作”的地方添加响应事件，这里我们需要的是能够调用系统相册。但是小灵狐发现要调用系统相册，需要先申请SD卡读写权限。申请读写权限主要分为两个步骤：一是在注册文件(AndroidManifest.xml)里声明所需权限，这里需要的是SD卡读写权限，所以应该添加如下声明：</p><pre><code>&lt;uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/&gt;</code></pre><p><code>WRITE_EXTERNAL_STORAGE</code>权限是同时授予对SD卡读和写的能力。二是在Activity中查看权限，如果没有授予，需要动态申请，代码如下：</p><pre><code>if (ContextCompat.checkSelfPermission(InfoSettingActivity.this,                        Manifest.permission.WRITE_EXTERNAL_STORAGE) !=                        PackageManager.PERMISSION_GRANTED) {                    ActivityCompat.requestPermissions(InfoSettingActivity.this, new String[]{                            Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);                } else {                    // 调用系统相册                }</code></pre><p>对于上面的代码，小灵狐给出了解释：<code>ContexCompat.checkSelfPermission()</code>函数用来查看权限，该函数的第一个参数是一个上下文context，第二个参数就是刚才我们在注册文件中声明的权限，若该函数返回的值等于<code>PackageManager.PERMISSION_GRANTED</code>，说明用户已经授权，我们可以直接进行后续操作。如果不是，就需要动态申请权限，<code>ActivityCompat.requestPermissions()</code>函数用来动态申请权限，并且需要重写<code>onRequestPermissionsResult()</code>函数，重写代码如下：</p><pre><code>@Override    // 申请用户权限    public void onRequestPermissionsResult(int requestCode, String[] permissions,                                           int[] grantResults) {        switch (requestCode) {            case 1:                if (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.                        PERMISSION_GRANTED) {                        // 用户允许授权                   /* ————调用系统相册————*/                } else {                    // 用户拒绝授权                    Toast.makeText(this, "You denied the permission",                            Toast.LENGTH_SHORT).show();                }                break;            default:        }    }</code></pre><p>动态申请权限的时候会弹出一个权限申请框，询问是否授权，对于这样的弹框，用过安卓手机的人应该都不陌生吧。这时候如果用户点击允许，那么便成功获得对SD卡的读写权限，可以开开心心的进行后续操作了，如果被用户拒绝，那么就不能成功的执行后续操作了。</p><p>做了这一切，还是没有说怎么调用系统相册，不急，我们继续看看小灵狐是怎么做的吧。其实调用系统相册很简单，只有三句代码，我们把它们用函数<code>openAlbum()</code>进行封装，这样只要把上面出现“调用系统相册”的注释全部改为<code>openAlbum()</code>，就可以成功的执行调用系统相册的操作了。</p><pre><code> private void openAlbum() {         // 使用Intent来跳转        Intent intent = new Intent("android.intent.action.GET_CONTENT");        // setType是设置类型，只要系统中满足该类型的应用都会被调用，这里需要的是图片        intent.setType("image/*");        // 打开满足条件的程序，CHOOSE_PHOTO是一个常量，用于后续进行判断，下面会说        startActivityForResult(intent, CHOOSE_PHOTO);    }</code></pre><h1 id="选择图片"><a href="#选择图片" class="headerlink" title="选择图片"></a>选择图片</h1><p>我们知道开启一个活动直接用<code>startActivity()</code>就可以，但上面使用<code>startActivityForResult()</code>来开启活动而不直接用<code>startActivity()</code>，这是为什么呢？注意到多了’forResult’，顾名思义，不难想象出原因。是因为我们不仅仅是要打开系统相册，更重要的是能够在系统相册中选择一张图片并且返回图片的url，所以要’forResult’。为了这个’result’，我们需要重写<code>onActivityResult()</code>方法:</p><pre><code>@Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        switch (requestCode) {        // 上面的CHOOSE_PHOTO就是在这里用于判断            case CHOOSE_PHOTO:                // 判断手机系统版本号                if (resultCode == RESULT_OK) {                    if (Build.VERSION.SDK_INT &gt;= 19) {                        // 手机系统在4.4及以上的才能使用这个方法处理图片                        handleImageOnKitKat(data);                    } else {                        // 手机系统在4.4以下的使用这个方法处理图片                        handleImageBeforeKitKat(data);                    }                }                break;            default:                break;        }    }</code></pre><p>上面的代码还是很好理解的，但是可能会感到奇怪，为什么要判断<code>Build.VERSION.SDK_INT</code>的值呢？自习观察两个函数的命名，差了一个before，所以大概能猜出点什么了吧。没错，这两个函数都是用来处理图片的，那他们的区别是什么呢？Android系统从4.4版本开始，选取相册中的图片不再返回图片真实的Uri了，而是一个分装过的Uri，因此如果是4.4版本以上的系统要对这个Uri进行解析才行。<code>handleImageOnKitKat()</code>函数包含了对Uri的解析，4.4版本以后的就要用这个函数，而4.4版本之前的就要用<code>handleImageBeforeKitKat()</code>函数了，现在明白了before是指什么了吧。因为要区分手机系统版本，所以我们加了对<code>Build.VERSION.SDK_INT</code>的判断。好了，现在我们明白了要用到这两个函数来处理图片，可是这两个函数到底是什么啊，我们继续往下看。</p><pre><code>@TargetApi(19)    private void handleImageOnKitKat(Intent data) {        Uri uri = data.getData();        String imagePath = null;        // 如果是document类型的Uri，，则通过document id处理        if (DocumentsContract.isDocumentUri(this, uri)) {            String docId = DocumentsContract.getDocumentId(uri);            if ("com.android.providers.media.documents".equals(uri.getAuthority())) {                // 解析出数字格式的id                String id = docId.split(":")[1];                String selection = MediaStore.Images.Media._ID + "=" + id;                imagePath = getImagePath(MediaStore.Images.Media.EXTERNAL_CONTENT_URI,                        selection);            }else if("com.android.providers.downloads.documents".equals(uri.getAuthority())){                Uri contentUri = ContentUris.withAppendedId(Uri.parse("content:" +                        "//downloads/public_downloads"), Long.valueOf(docId));                imagePath = getImagePath(contentUri, null);            }        } else if ("file".equalsIgnoreCase(uri.getScheme())) {            // 如果是file类型的Uri，直接获取图片路径            imagePath = uri.getPath();        } else if ("content".equalsIgnoreCase(uri.getScheme())) {            // 如果是content类型的Uri，使用普通方式处理            imagePath = getImagePath(uri, null);        }        // 根据得到的图片路径显示图片    }    private void handleImageBeforeKitKat(Intent data) {        Uri uri = data.getData();        String imagePath = getImagePath(uri, null);        // 根据得到的图片路径显示图片    }</code></pre><p>从上面的代码我们也可以看出这两个函数的差别。</p><h1 id="显示图片"><a href="#显示图片" class="headerlink" title="显示图片"></a>显示图片</h1><p>现在我们就差最后一步了，就是把图片显示出来。安卓中常用的显示图片的函数有两个<code>setImageResource()</code> 和<code>setImageBitmap()</code> ，前者的参数只能是 <code>int id</code> ，也就是说它只能显示在drawable文件夹下的图片，但是我们要从相册里面获得，显然要用后者，我们可以把显示图片的过程分装成一个函数：</p><pre><code>private void displayImage(String imagePath){        if(imagePath!=null){            Bitmap bitmap= BitmapFactory.decodeFile(imagePath);            circleImageView.setImageBitmap(bitmap);        }else{            Toast.makeText(this,"failed to get image",Toast.LENGTH_SHORT).show();        }    }</code></pre><p>做到这里，我们就完成了用户头像的功能啦。小灵狐迫不及待的从相册中随便找了一张表情包试用，成功的把表情包显示在了头像框内。但是，事情真的就这么简单吗？太天真了。</p><h1 id="图片压缩"><a href="#图片压缩" class="headerlink" title="图片压缩"></a>图片压缩</h1><p>小灵狐实现了用户头像，非常开心。赶紧拿出手机，拍了一张高清图片，准备作为自己的头像。但是，当他选择该图片之后，却惊讶的发现竟然没有显示出来，而且程序还会崩溃，这可把小灵狐急坏了。经过研究学习，他发现，原来是图片太大了，直接加载进去，会导致内存泄漏，从而使得图片无法正常显示，甚至是程序奔溃。所以在显示图片之前，要经过一定的压缩，然后再加载进去。Bitmap压缩都是围绕这个来做文章：Bitmap所占用的内存 = 图片长度 x 图片宽度 x 一个像素点占用的字节数。3个参数，任意减少一个的值，就达到了压缩的效果。所以，根据这个，小灵狐修改了<code>displayImage()</code> 函数，采用了如下的压缩方式：</p><pre><code>//显示图片    private void displayImage(String imagePath){        if(imagePath!=null){            BitmapFactory.Options options = new BitmapFactory.Options();// 解析位图的附加条件            options.inJustDecodeBounds = true;    // 不去解析位图，只获取位图头文件信息            Bitmap bitmap= BitmapFactory.decodeFile(imagePath,options);            circleImageView.setImageBitmap(bitmap);            int btwidth = options.outWidth;        // 获取图片的宽度            int btheight = options.outHeight;    //获取图片的高度            int dx = btwidth/100;    // 获取水平方向的缩放比例            int dy = btheight/100;    // 获取垂直方向的缩放比例            int sampleSize = 1;    // 设置默认缩放比例            // 如果是水平方向            if (dx&gt;dy&amp;&amp;dy&gt;1) {                sampleSize = dx;            }            //如果是垂直方向            if (dy&gt;dx&amp;&amp;dx&gt;1) {                sampleSize = dy;            }            options.inSampleSize = sampleSize;       // 设置图片缩放比例            options.inJustDecodeBounds = false;        // 真正解析位图            // 把图片的解析条件options在创建的时候带上            bitmap = BitmapFactory.decodeFile(imagePath, options);            circleImageView.setImageBitmap(bitmap);    // 设置图片        }else{            Toast.makeText(this,"failed to get image",Toast.LENGTH_SHORT).show();        }    }</code></pre><p>关于图片压缩的方式网上有很多种方式方法，其实内容和原理都是大同小异，如果想要了解更多的方法，这里有几个参考链接可以看一看：</p><p><a href="http://blog.csdn.net/harryweasley/article/details/51955467" target="_blank" rel="noopener">bitmap的六种压缩方式，Android图片压缩</a></p><p><a href="https://www.cnblogs.com/Free-Thinker/p/6394723.html" target="_blank" rel="noopener">Android应用开发中三种常见的图片压缩方法</a></p><p><a href="http://blog.csdn.net/jdsjlzx/article/details/44228935" target="_blank" rel="noopener">Android图片压缩（质量压缩和尺寸压缩）&amp;Bitmap转成字符串上传</a></p><h1 id="黑科技"><a href="#黑科技" class="headerlink" title="黑科技"></a>黑科技</h1><p>小灵狐学习了图片的压缩，也自己写了一种压缩方式，但是他发现到底要把图片压缩到什么程度很难把握，而且不同的屏幕，不同的手机效果也不同。有没有其他的方法来加载图片，能够有效的避免因图片太大而导致内存泄漏的问题呢？经过不断地探索发现，小灵狐发现了一个很好用的加载图片方式——glide。这是一种神奇的黑科技，关于它的使用方法，可以参考以下博客，讲的非常清楚，非常好，我就不再啰嗦啦。</p><p><a href="http://blog.csdn.net/guolin_blog/article/details/53759439" target="_blank" rel="noopener">Glide的基本用法</a></p><p><a href="http://blog.csdn.net/guolin_blog/article/details/53939176" target="_blank" rel="noopener">从源码的角度理解Glide的执行流程</a></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>到此，用户头像功能算是全部实现了。小灵狐从零开始，一步步摸索出来，经历了很多的困难，当然也学到了很多。现在，小灵狐终于可以把自己的高清图片作为自己的头像啦。这部分的修炼暂告一段落，敬请期待以后的修炼。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android开发圆形头像</title>
      <link href="/2020/09/13/Android%E5%BC%80%E5%8F%91%E5%9C%86%E5%BD%A2%E5%A4%B4%E5%83%8F/"/>
      <url>/2020/09/13/Android%E5%BC%80%E5%8F%91%E5%9C%86%E5%BD%A2%E5%A4%B4%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>目前在应用开发中，矩形的头像基本没有了，大多是圆形或圆角矩形，本文简简单单轻轻松松帮你搞定圆形或圆角矩形的头像。</p><p>可以自定义控件实现，而本文使用的是第三方开源控件RoundedImageView，改控件支持圆形、椭圆、圆角矩形等，使用非常方便。<br> 添加RoundedImageView依赖<br> 使用RoundedImageView有两种操作方法，实质都是添加库依赖。<br> 方法一： 在<a href="http://lib.csdn.net/base/android" target="_blank" rel="noopener">Android</a> Studio中，可进入模块设置中添加库依赖。 进入Module结构设置添加库依赖（如下图）</p><p><img src="https:////upload-images.jianshu.io/upload_images/5423625-04440b1bb9731a02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/993/format/webp" alt="img"></p><p>Paste_Image.png</p><p>输入RoundedImageView然后搜索添加。</p><p><img src="https:////upload-images.jianshu.io/upload_images/5423625-4e3300d7433ca1fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/684/format/webp" alt="img"></p><p>Paste_Image.png</p><p> 方法二： 在Moudle的build.gradle中添加如下代码，添加完之后在Build中进行下Make Module操作（编译下Module），使自己添加的依赖生效。</p><pre class=" language-csharp"><code class="language-csharp">repositories <span class="token punctuation">{</span>    <span class="token function">mavenCentral</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>dependencies <span class="token punctuation">{</span>    compile <span class="token string">'com.makeramen:roundedimageview:2.2.1'</span><span class="token punctuation">}</span>```Layout中使用添加了库依赖之后，我们就可以使用该控件了。先看看效果： <span class="token operator">!</span><span class="token punctuation">[</span>Paste_Image<span class="token punctuation">.</span>png<span class="token punctuation">]</span><span class="token punctuation">(</span>http<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>upload<span class="token operator">-</span>images<span class="token punctuation">.</span>jianshu<span class="token punctuation">.</span>io<span class="token operator">/</span>upload_images<span class="token operator">/</span><span class="token number">5423625</span><span class="token operator">-</span>78097e0d0a20d26a<span class="token punctuation">.</span>png<span class="token operator">?</span>imageMogr2<span class="token operator">/</span>auto<span class="token operator">-</span>orient<span class="token operator">/</span>strip<span class="token operator">%</span>7CimageView2<span class="token operator">/</span><span class="token number">2</span><span class="token operator">/</span>w<span class="token operator">/</span><span class="token number">1240</span><span class="token punctuation">)</span>这里我设置的是圆形：</code></pre><p>&lt;com.makeramen.roundedimageview.RoundedImageView<br> android:layout_width=”wrap_content”<br> android:layout_height=”wrap_content”<br> android:src=”@drawable/zr”<br> app:riv_oval=”true” /&gt;```</p><p>控件属性：<br> riv_border_width： 边框宽度<br> riv_border_color： 边框颜色<br> riv_oval： 是否圆形<br> riv_corner_radius： 圆角弧度<br> riv_corner_radius_top_left：左上角弧度<br> riv_corner_radius_top_right： 右上角弧度<br> riv_corner_radius_bottom_left：左下角弧度<br> riv_corner_radius_bottom_right：右下角弧度</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.makeramen.roundedimageview.RoundedImageView</span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/avatar<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_border_color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#333333<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_border_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2dp<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_oval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.makeramen.roundedimageview.RoundedImageView</span>          <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>scaleType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fitCenter<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/avatar<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_border_color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#333333<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_border_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2dp<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_corner_radius</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10dp<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_mutate_background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_oval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_tile_mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>repeat<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.makeramen.roundedimageview.RoundedImageView</span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>scaleType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fitCenter<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/avatar<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_border_color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#333333<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_border_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2dp<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_corner_radius_top_left</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25dp<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_corner_radius_bottom_right</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25dp<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_mutate_background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_oval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_tile_mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>repeat<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.makeramen.roundedimageview.RoundedImageView</span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>scaleType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fitCenter<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/avatar<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_border_color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#333333<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_border_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2dp<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_corner_radius_top_right</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25dp<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_corner_radius_bottom_left</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25dp<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_mutate_background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_oval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_tile_mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>repeat<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>com.makeramen.roundedimageview.RoundedImageView</span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>96dp<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>72dp<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>scaleType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">android:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@mipmap/avatar<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_border_color</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#333333<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_border_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2dp<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_corner_radius</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25dp<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_mutate_background</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_oval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span>          <span class="token attr-name"><span class="token namespace">app:</span>riv_tile_mode</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>repeat<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><p><img src="https:////upload-images.jianshu.io/upload_images/5423625-e3e2d33d549bfa20.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/186/format/webp" alt="img"></p><p>Paste_Image.png</p><p><img src="https:////upload-images.jianshu.io/upload_images/5423625-a6401c1aeb4a661a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/196/format/webp" alt="img"></p><p>Paste_Image.png</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio打包apk文件</title>
      <link href="/2020/09/12/Android%20Studio%E6%89%93%E5%8C%85apk%E6%96%87%E4%BB%B6/"/>
      <url>/2020/09/12/Android%20Studio%E6%89%93%E5%8C%85apk%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img-blog.csdnimg.cn/20200311125918238.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW9qaWU5MTEyNzI1MDc=,size_16,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/2020031113001656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW9qaWU5MTEyNzI1MDc=,size_16,color_FFFFFF,t_70" alt="img"></p><p>产生一个签名的apk文件，</p><p><img src="https://img-blog.csdnimg.cn/20200311130205287.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW9qaWU5MTEyNzI1MDc=,size_16,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20200311130309518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW9qaWU5MTEyNzI1MDc=,size_16,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20200808184943526.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW9qaWU5MTEyNzI1MDc=,size_16,color_FFFFFF,t_70" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20200311130858229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW9qaWU5MTEyNzI1MDc=,size_16,color_FFFFFF,t_70" alt="img"></p><p>Alias是key的别名，</p><p>Validate签名的有效期，</p><p>Certificate中只有第一个是必填的，输入名字即可。</p><p>点击ok，</p><p><img src="https://img-blog.csdnimg.cn/20200311131242514.png" alt="img"></p><p>此页面忽略不用管，点击ok</p><p><img src="https://img-blog.csdnimg.cn/20200311131322851.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW9qaWU5MTEyNzI1MDc=,size_16,color_FFFFFF,t_70" alt="img"></p><p>点击Next，</p><p><img src="https://img-blog.csdnimg.cn/20200311131717674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poYW9qaWU5MTEyNzI1MDc=,size_16,color_FFFFFF,t_70" alt="img"></p><p>处于安全考虑，V1和V2全部选中，V1来自JDK，，V2是从安卓7.0以后引进的，这种签名提供更加安全的签名方式，使用后，签名后的文件是不能更改的，即安全性会更高。如果只勾选V1则在安卓7.0以上的机器将不能使用更加安全的签名方式，如果只选中V2则在安卓7.0以下的机器中，如果你安装完一个app，那么将会显示还没有安装。为了适用于所有机型，两个都选中。点击finish。</p><p><img src="https://img-blog.csdnimg.cn/20200311132903251.png" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/20200311134416421.png" alt="img"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android studio中可视化界面（preview）和文本界面（TEXT）切换</title>
      <link href="/2020/09/11/Android%20studio%E4%B8%AD%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2%EF%BC%88preview%EF%BC%89%E5%92%8C%E6%96%87%E6%9C%AC%E7%95%8C%E9%9D%A2%EF%BC%88TEXT%EF%BC%89%E5%88%87%E6%8D%A2/"/>
      <url>/2020/09/11/Android%20studio%E4%B8%AD%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2%EF%BC%88preview%EF%BC%89%E5%92%8C%E6%96%87%E6%9C%AC%E7%95%8C%E9%9D%A2%EF%BC%88TEXT%EF%BC%89%E5%88%87%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Android studio中可视化界面（preview）和文本界面（TEXT）切换</p><p>左下角design|text切换按钮</p><p><img src="https://img-blog.csdn.net/20180301201926411?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzYzMzIxMzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>效果预览：</p><p><img src="https://img-blog.csdn.net/20180301202013331?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzYzMzIxMzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p><img src="https://img-blog.csdn.net/20180301201957489?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzYzMzIxMzM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>import android.support.v7.app.ActionBarActivity; 报错问题</title>
      <link href="/2020/09/10/import%20android.support.v7.app.ActionBarActivity;%20%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/"/>
      <url>/2020/09/10/import%20android.support.v7.app.ActionBarActivity;%20%E6%8A%A5%E9%94%99%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>问题是这样的：</p><p>昨天在家里练习写了一个简单的adnroid apk， 提交到github。</p><p>其实当时 我就很奇怪， 我只是写了一个project， 为什么eclipse上有两个project。 如图：</p><p><img src="https://img-blog.csdn.net/20150414142447478?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc21hbGxtYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>（这个图是在公司截的， 和家里的不一样，我把其他的项目都擦除了。）</p><p>我到了公司后，下载了QuizActivity代码， 导入eclipse，却发现编译不过。</p><p>原因： support-v7是android的 Support Library，是为了兼容低平台的android，即我现在eclipse用的是5.1(api 22）的sdk， 但是生成的apk可以运行在低于5.1（2.2-5.1）的设备上。android-support-v7-appcompat是在eclipse中新建一个项目时自动生成的（准确的讲是在建立第一个activity的时候生成的）。 如果我新建一个项目不想自动生成这个v7怎办， 解决方法就是牺牲低版本的兼容性，如下图：<img src="https://img-blog.csdn.net/20150414143645079?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc21hbGxtYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>只要在Ｍinimum Required SDK ，那里选择4.0（及以上版本的sdk）， 那么就不会生成v7了。</p><p>言归正传：</p><p>解决我们问题的方法：</p><p>1.首先，我们要确保我们的sdk里有Support Library， 打开 SDK Ｍanager， 在最底下的Extra 里看看“Android Support Library”的状态是”not install”, 还是“installed”， 如果是“not install”， 那就选中，下载吧。</p><p>\2. 完成第一步， 就新建一个android project,如图</p><p><img src="https://img-blog.csdn.net/20150414144039270?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc21hbGxtYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>， next，</p><p><img src="https://img-blog.csdn.net/20150414144304503?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc21hbGxtYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>这一步，主要是v7 代码路径， 前面的路径是我本地sdk的路径，要替换成你自己的路径，后面的“sdk/extras/android/support/v7/appcompat”是一致的。</p><p>完成，v7项目就被添加成功了。</p><p>最后一步，在package explorer 中右键你的项目，点击属性（也就是进入项目属性中）， 点击左侧的android， 如图</p><p><img src="https://img-blog.csdn.net/20150414144801281?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc21hbGxtYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>点击 最右边上的Ａdd，弹出对话框，这个时候里有我们刚才添加的v7项目，点击ok</p><p>如图</p><p><img src="https://img-blog.csdn.net/20150414145038358?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvc21hbGxtYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>如果顺利的话， 我们的import android.support.v7.app.ActionBarActivity; 报错问题应该会解决了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>android studio 全套入门教学视频（点开即看）无需下载</title>
      <link href="/2020/09/09/android%20studio%20%E5%85%A8%E5%A5%97%E5%85%A5%E9%97%A8%E6%95%99%E5%AD%A6%E8%A7%86%E9%A2%91%EF%BC%88%E7%82%B9%E5%BC%80%E5%8D%B3%E7%9C%8B%EF%BC%89%E6%97%A0%E9%9C%80%E4%B8%8B%E8%BD%BD/"/>
      <url>/2020/09/09/android%20studio%20%E5%85%A8%E5%A5%97%E5%85%A5%E9%97%A8%E6%95%99%E5%AD%A6%E8%A7%86%E9%A2%91%EF%BC%88%E7%82%B9%E5%BC%80%E5%8D%B3%E7%9C%8B%EF%BC%89%E6%97%A0%E9%9C%80%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>android studio教学视频资源（点开即看） </p><p>自从Google推出android studio之后，包括github在内的很多第三方代码库项目更多的采用的android studio编译的，越来越多的项目使用android studio也变成了大势所趋，所以赶紧放下你的eclipse，开始学习android studio吧。</p><p>以下是网上搜集的android studio的教学视频，讲的很详细，全英文中字幕，点开即看。</p><p><a href="http://ask.android-studio.org/uploads/article/20150602/49e627d8b62d6c877c805ded9c2ec964.jpg" target="_blank" rel="noopener"><img src="http://ask.android-studio.org/uploads/article/20150602/49e627d8b62d6c877c805ded9c2ec964.jpg" alt="img"></a></p><p><strong>Android Studio Essential Training</strong><br><strong>内容包括</strong> ：<br>- Android Studio安装，<br>- 设置Android SDK<br>- 创建Android Studio Project<br>- 使用虚拟设备<br>- 连接真实设备<br>- 导入ADT项目<br>- Android Studio工具窗口<br>- Gradle相关设置<br>- Git和Github设置<br>- Logcat使用<br>- 键盘快捷键<br>- 内存监测器工具使用 </p><p><a href="http://ask.android-studio.org/uploads/article/20150602/53e181e4f60c4251d398e76da7893cd7.jpg" target="_blank" rel="noopener"><img src="http://ask.android-studio.org/uploads/article/20150602/53e181e4f60c4251d398e76da7893cd7.jpg" alt="img"></a></p><p><a href="http://ask.android-studio.org/uploads/article/20150602/c34c3ac68f8e5bd473ea6d25e4cd88b0.png" target="_blank" rel="noopener"><img src="http://ask.android-studio.org/uploads/article/20150602/c34c3ac68f8e5bd473ea6d25e4cd88b0.png" alt="img"></a></p><p><strong>快捷目录</strong> ：<br>- 视频教程-001 Welcome | <a href="http://pan.baidu.com/s/1gdKWIWz" target="_blank" rel="noopener"> http://pan.baidu.com/s/1gdKWIWz</a><br>- 视频教程-002 What You Should Know Before Watching This Course | <a href="http://pan.baidu.com/s/1dDOy8yl" target="_blank" rel="noopener">http://pan.baidu.com/s/1dDOy8yl</a><br>- 视频教程-003 Using The Exercise Files | <a href="http://pan.baidu.com/s/1bnVosR9" target="_blank" rel="noopener">http://pan.baidu.com/s/1bnVosR9</a><br>- 视频教程-004 About Android Studio And Intellij Idea | <a href="http://pan.baidu.com/s/1o7jfjsQ" target="_blank" rel="noopener">http://pan.baidu.com/s/1o7jfjsQ</a><br>- 视频教程-005 Installing The Java Developer Kit (jdk) | <a href="http://pan.baidu.com/s/1kUoAN23" target="_blank" rel="noopener">http://pan.baidu.com/s/1kUoAN23</a><br>- 视频教程-006 Installing Android Studio On Mac Os X | <a href="http://pan.baidu.com/s/1skzTZCp" target="_blank" rel="noopener"> http://pan.baidu.com/s/1skzTZCp</a><br>- 视频教程-007 Installing The Intel Hardware Accelerated Execution Manager (haxm) On Mac Os X | <a href="http://pan.baidu.com/s/1bqUXUe" target="_blank" rel="noopener">http://pan.baidu.com/s/1bqUXUe</a><br>- 视频教程-008 Installing Android Studio On Windows | <a href="http://pan.baidu.com/s/1c1qkSRe" target="_blank" rel="noopener">http://pan.baidu.com/s/1c1qkSRe</a><br>- 视频教程-009 Managing Android Studio Updates | <a href="http://pan.baidu.com/s/1sjRxWmD" target="_blank" rel="noopener">http://pan.baidu.com/s/1sjRxWmD</a><br>- 视频教程-010 Downloading Additional Components With Android Sdk Manager | <a href="http://pan.baidu.com/s/1c1oPg1y" target="_blank" rel="noopener">http://pan.baidu.com/s/1c1oPg1y</a><br>- 视频教程-011 Creating Your First Android Project | <a href="http://pan.baidu.com/s/1skcTybV" target="_blank" rel="noopener">http://pan.baidu.com/s/1skcTybV</a><br>- 视频教程-012 Exploring The Structure Of An Android Studio Project | <a href="http://pan.baidu.com/s/1nuq8CHV" target="_blank" rel="noopener">http://pan.baidu.com/s/1nuq8CHV</a><br>- 视频教程-013 Configuring Android Studio | <a href="http://pan.baidu.com/s/1mho8T8s" target="_blank" rel="noopener">http://pan.baidu.com/s/1mho8T8s</a><br>- 视频教程-014 Using The Emulator And Virtual Devices For | <a href="http://pan.baidu.com/s/1eRjvooM" target="_blank" rel="noopener">http://pan.baidu.com/s/1eRjvooM</a><br>- 视频教程-015 Creating New Virtual Devices | <a href="http://pan.baidu.com/s/1dDU4mbR" target="_blank" rel="noopener">http://pan.baidu.com/s/1dDU4mbR</a><br>- 视频教程-016 Installing A Device Driver On Windows | <a href="http://pan.baidu.com/s/1K0VOa" target="_blank" rel="noopener">http://pan.baidu.com/s/1K0VOa</a><br>- 视频教程-017 Connecting Physical Devices For Testing | <a href="http://pan.baidu.com/s/1eQRe0Jg" target="_blank" rel="noopener">http://pan.baidu.com/s/1eQRe0Jg</a><br>- 视频教程-018 Importing Projects From Eclipse With Adt |<br>- 视频教程-019 Importing Projects With Unrecognized Jar Files | <a href="http://pan.baidu.com/s/1geiDqIB" target="_blank" rel="noopener">http://pan.baidu.com/s/1geiDqIB</a><br>- 视频教程-020 Setting The Java Coding Style After Importing A Project | <a href="http://pan.baidu.com/s/1pKvonQb" target="_blank" rel="noopener">http://pan.baidu.com/s/1pKvonQb</a><br>- 视频教程-021 Importing Android Sdk Sample Apps | <a href="http://pan.baidu.com/s/1gdTeyxP" target="_blank" rel="noopener">http://pan.baidu.com/s/1gdTeyxP</a><br>- 视频教程-022 Using Menus And Toolbars | <a href="http://pan.baidu.com/s/1i4a1EfV" target="_blank" rel="noopener">http://pan.baidu.com/s/1i4a1EfV</a><br>- 视频教程-023 Searching For Files And Folders | <a href="http://pan.baidu.com/s/1mhg1zuC" target="_blank" rel="noopener">http://pan.baidu.com/s/1mhg1zuC</a><br>- 视频教程-024 Exploring Other Tool Windows | <a href="http://pan.baidu.com/s/1o6ZBAga" target="_blank" rel="noopener">http://pan.baidu.com/s/1o6ZBAga</a><br>- 视频教程-025 Manipulating The Window Layout | <a href="http://pan.baidu.com/s/1dEhv0Al" target="_blank" rel="noopener">http://pan.baidu.com/s/1dEhv0Al</a><br>- 视频教程-026 Working With Gradle And Other Configuration Files | <a href="http://pan.baidu.com/s/1i40khXb" target="_blank" rel="noopener">http://pan.baidu.com/s/1i40khXb</a><br>- 视频教程-027 Adding Jar Files With Dependencies And Modules | <a href="http://pan.baidu.com/s/1kUwIqqF" target="_blank" rel="noopener">http://pan.baidu.com/s/1kUwIqqF</a><br>- 视频教程-028 Adding Remote Libraries With Maven Dependencies | <a href="http://pan.baidu.com/s/1bnZYdIn" target="_blank" rel="noopener">http://pan.baidu.com/s/1bnZYdIn</a><br>- 视频教程-029 Installing Git On Windows | <a href="http://pan.baidu.com/s/1hrwOvWS" target="_blank" rel="noopener">http://pan.baidu.com/s/1hrwOvWS</a><br>- 视频教程-030 Installing Git On Mac Os X | <a href="http://pan.baidu.com/s/1boeHL6n" target="_blank" rel="noopener">http://pan.baidu.com/s/1boeHL6n</a><br>- 视频教程-031 Creating Repositories On Github | <a href="http://pan.baidu.com/s/1o75zLJO" target="_blank" rel="noopener">http://pan.baidu.com/s/1o75zLJO</a><br>- 视频教程-032 Sharing An Android Project Through Github | <a href="http://pan.baidu.com/s/1i4x2rhr" target="_blank" rel="noopener">http://pan.baidu.com/s/1i4x2rhr</a><br>- 视频教程-033 Restoring A Repository From Github | <a href="http://pan.baidu.com/s/1mhqAGNe" target="_blank" rel="noopener">http://pan.baidu.com/s/1mhqAGNe</a><br>- 视频教程-034 Creating New Java Files | <a href="http://pan.baidu.com/s/1o7pQKgq" target="_blank" rel="noopener">http://pan.baidu.com/s/1o7pQKgq</a><br>- 视频教程-035 Refactoring Java Code | <a href="http://pan.baidu.com/s/1c1hxB1m" target="_blank" rel="noopener">http://pan.baidu.com/s/1c1hxB1m</a><br>- 视频教程-036 Filtering And Searching Logcat Messages | <a href="http://pan.baidu.com/s/1gdKWJLp" target="_blank" rel="noopener">http://pan.baidu.com/s/1gdKWJLp</a><br>- 视频教程-037 Using Breakpoints And Watch Expressions | <a href="http://pan.baidu.com/s/1sktOs1J" target="_blank" rel="noopener">http://pan.baidu.com/s/1sktOs1J</a><br>- 视频教程-038 Inspecting A Device With Android Device Monitor | <a href="http://pan.baidu.com/s/1hr18phU" target="_blank" rel="noopener">http://pan.baidu.com/s/1hr18phU</a><br>- 视频教程-039 Inspecting An App`s Memory Usage | <a href="http://pan.baidu.com/s/1o6WnNXC" target="_blank" rel="noopener">http://pan.baidu.com/s/1o6WnNXC</a><br>- 视频教程-040 Learning Useful Code-editing Shortcuts | <a href="http://pan.baidu.com/s/1hrbPFCg" target="_blank" rel="noopener">http://pan.baidu.com/s/1hrbPFCg</a> </p><p>- 视频教程-041 Next Steps | <a href="http://pan.baidu.com/s/1hrfT51E" target="_blank" rel="noopener">http://pan.baidu.com/s/1hrfT51E</a></p><p>视频数: 41 （001-041）<br>总时长: 02:40:40<br>练习文件： <a href="http://pan.baidu.com/s/1eQU2nzO" target="_blank" rel="noopener">Ex_Files_AndroidStudio_EssT.zip</a><br>课程中使用<a href="http://lib.csdn.net/base/android" target="_blank" rel="noopener">Android</a> Studio 1.0.2版本<br>本课程帮助新手快速熟悉使用<a href="http://lib.csdn.net/base/android" target="_blank" rel="noopener">android</a> Studio</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>AS的安装及第一个AS中android项目的搭建**</title>
      <link href="/2020/09/08/AS%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AC%AC%E4%B8%80%E4%B8%AAAS%E4%B8%ADandroid%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/09/08/AS%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E7%AC%AC%E4%B8%80%E4%B8%AAAS%E4%B8%ADandroid%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>AS的安装及第一个AS中android项目的搭建</strong></p><p>前言：前段时间公司搞了个 “校企合作” 的项目，要求公司人员去学校对学生进行阶段性的专业培训，荣幸的我被派去当了回“老师”；哈哈，真的有点“打肿脸充胖子”的感觉；不过，也算是复习下as的安装过程吧，顺便有空了就记录下来，后面万一忘了也好查看。</p><p>正文： </p><p>首先需要确定好电脑是否有安装java环境：直接电脑桌面windows+R 输入cmd：  上代码：分别输入java 、javac 、javadoc、java -version + enter键  成功的有输出，说明java环境安装成功；</p><p>(如果不成功那就得重新研究研究java环境的配置咯)</p><p>确定好环境过后，就需要进行AS的安装了，直接百度搜索android studio 下载就OK：</p><p><img src="https://img-blog.csdn.net/20171017131645105?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>顺便附上百度网盘AS的下载地址：<a href="http://pan.baidu.com/s/1dFxqtK9" target="_blank" rel="noopener">http://pan.baidu.com/s/1dFxqtK9</a> 密码：6c9f</p><p>下载完成后直接双击安装：</p><p><img src="https://img-blog.csdn.net/20171017132642254?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>然后跟着提示走：</p><p><img src="https://img-blog.csdn.net/20171017132805312?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>next：</p><p><img src="https://img-blog.csdn.net/20171017132850762?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>继续，然后是一个都有的套路，点击I agree：</p><p><img src="https://img-blog.csdn.net/20171017132926765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>然后是选择安装路径：第一个是as的安装路径第二个是android-sdk的安装路径，这里我选择在D盘，自定义的文件夹，原因是as这套工程本就大，运行的内存也大，所以尽可能的避免安装在C盘，都懂的(＾∀＾)。</p><p><img src="https://img-blog.csdn.net/20171017133106114?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>然后继续next–&gt;Install 就到了等待的过程：</p><p><img src="https://img-blog.csdn.net/20171017133639597?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>一段时间等待过后，发现状态框中出现 Completed 说明OK了，继续Next：</p><p><img src="https://img-blog.csdn.net/20171017133837682?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>到这里说明as安装基本完成，接下来就finish，启动程序：</p><p><img src="https://img-blog.csdn.net/20171017134016531?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>之后会进入欢迎界面：</p><p><img src="https://img-blog.csdn.net/20171017134121947?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>继续next，有一个选择type的界面，不用管，直接默认的就ok，下一步：</p><p><img src="https://img-blog.csdn.net/20171017134301733?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>这里就是一个最最最漫长的等待了，因为这里工程会下载一些组件、sdk检测更新什么的，这里我们要保持电脑网络状态良好也需要短者十几二十分钟，长着高达几个小时。为节省时间也可以绕过这步，不让程序去下载和检测更新。</p><p>通常可以这样做：</p><p>找到as的安装目录 –&gt; bin文件 –&gt; 找到idea.properties文件，打开编辑，在最后面加上：disable.android.first.run=true</p><p><img src="https://img-blog.csdn.net/20171017135309069?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>这样我们第一次打开as就不会去检测sdk了，但是我们还的自己手动去网上下载android-sdk </p><p>百度网盘androidsdk下载地址：<a href="http://pan.baidu.com/s/1mizJR40" target="_blank" rel="noopener">http://pan.baidu.com/s/1mizJR40</a> 密码：bdav；</p><p>一切完成之后，android studio就会出现：</p><p><img src="https://img-blog.csdn.net/20171017135659810?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>选择start a new android studio project开始创建一个新的as工程：</p><p><img src="https://img-blog.csdn.net/20171017135914242?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>第一个输入框为项目名称、第二个为域名（这里和项目包名相反，创建的时候注意就行）、第三个是项目创建后存放路径，然后下一步；</p><p>然后是选择SDK，一般默认的就可以，不用管继续next：</p><p>ADD Mobile 选择最初创建的项目：AS自带的有很多初始框架如底部菜单（Bottom Navigation Activity）、侧滑框架（Navigation Drawer Activity）等</p><p><img src="https://img-blog.csdn.net/20171017140350125?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>选择一个空的项目（Empty Activity），出现一个类似于eclipse创建android项目一样的界面：</p><p>包括第一个activity的名字和第一个布局的名字</p><p><img src="https://img-blog.csdn.net/20171017141003464?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>然后直接finish；</p><p>这样我们的第一个android项目就创建完成。</p><p><img src="https://img-blog.csdn.net/20171017141245130?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>由ec转到as的我开始使用时对开发快捷键不是很习惯，可以根据自己的需求修改：</p><p>直接ctrl+alt+S 或者工具栏中File —&gt;Setting —&gt; keymap  然后选择eclipse 然后点右下角的copy；</p><p><img src="https://img-blog.csdn.net/20171017141858525?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>但毕竟是在as中还是有区别与ec的，所以可以自己定义快捷键：鼠标右键选择 add keyboard shortcut 修改快捷键</p><p><img src="https://img-blog.csdn.net/20171017142118671?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>Android Studio默认的主题颜色是灰白色，可以根据自己的喜好修改：</p><p>ctrl+alt+S 或者工具栏中File —&gt;Setting  找到Appearance 通过选择theme主题来改变颜色：</p><p>as工具自带的有三个主题：Darcula（黑）、Intellij（灰白）、Windows（白） ，当然网上还有很多as主题框架，也可以根据自己的喜好去下载安装。</p><p><img src="https://img-blog.csdn.net/20171017142552409?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>作为一个程序猿，经常坐在电脑前，所以要尽可能的保护眼睛，一般选择黑色为主题颜色。</p><p>修改字体的步骤：setting —&gt; editor —&gt;colors &amp;font —&gt;font</p><p>可以通过font as…添加主题，再通过 Primary font (字体样式)、size（字体大小）、Line spacing（行间距）来修改样式</p><p><img src="https://img-blog.csdn.net/20171017143226450?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>修改之后as界面如下：</p><p><img src="https://img-blog.csdn.net/20171017143548490?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>还可以修改project的状态来查看目录一般通用的有 android 和 project两个状态</p><p><img src="https://img-blog.csdn.net/20171017144030781?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>project状态下 目录是这样的：</p><p><img src="https://img-blog.csdn.net/20171017144107140?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzQ1ODQwNDk=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></p><p>可以清楚的看到在project状态下，app下的java文件下类容和ec差不多了，值得一提的是as中有一个mipmap文件夹，这个是存放图片的。</p><p>对于as中图片的位置存放在mipmap中呢还是存放在drawable中，网上的说法各有不一，在网上看了很多资料总结下来个人认为还是把资源图片放于drawable，而工程的主题图片（如app的logo）则放于mipmap中。</p><p>接下来就可以根据项目需求进行开发了。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android Studio 教程：入门开发第一个程序</title>
      <link href="/2020/09/06/Android%20Studio%20%E6%95%99%E7%A8%8B%EF%BC%9A%E5%85%A5%E9%97%A8%E5%BC%80%E5%8F%91%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/"/>
      <url>/2020/09/06/Android%20Studio%20%E6%95%99%E7%A8%8B%EF%BC%9A%E5%85%A5%E9%97%A8%E5%BC%80%E5%8F%91%E7%AC%AC%E4%B8%80%E4%B8%AA%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Android-Studio-教程：入门开发第一个程序"><a href="#Android-Studio-教程：入门开发第一个程序" class="headerlink" title="Android Studio 教程：入门开发第一个程序"></a>Android Studio 教程：入门开发第一个程序</h1><p>2018.09.11 14:30 16005浏览</p><h2 id="开发第一应用"><a href="#开发第一应用" class="headerlink" title="开发第一应用"></a>开发第一应用</h2><p>可以开发属于自己的应用，是否有点小激动？好吧！让我们开始，首先点击Start a new Android Studio Project创建工程：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyLm11a2V3YW5nLmNvbS81Yjk3NjBjYjAwMDE0NWFmMDk4MzA3MzEuanBn" alt="img"></p><p>接下来需要输入应用名称(第一个字母要大写)、公司域以及指定应用存放目录，点击Next按钮进入下一步：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWc0Lm11a2V3YW5nLmNvbS81Yjk3NjBjYzAwMDFhZjM5MDg3MDA4NzQuanBn" alt="img"></p><p>如果第一个字母不是大写，会提示：<code>The application name for most app begins with an uppercase letter</code></p><p>接下来需要选择开发什么设备（可选“手机和平板”、“穿戴（Wear）”、“TV”，“车载(Android Auto)”等）上的应用，以及确定最小SDK的版本号。</p><p>Minimum SDK的作用是在应用安装前，会对设备的Android版本做校验，如果设备的Android版本低于这个最小版本会阻止用户安装应用。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyLm11a2V3YW5nLmNvbS81Yjk3NjBjYzAwMDE3YzgyMDkyOTA4NTcuanBn" alt="img"></p><p>如果不知道怎么选择最小版本可以点击Help me choose看看每个版本的分布图表和描述：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWc0Lm11a2V3YW5nLmNvbS81Yjk3NjBjZDAwMDE2MmI0MTEwMjA3MTguanBn" alt="img"></p><p>继续点击Next按钮进行下一步，我们需要通过形象友好的GUI模板，来选择我们第一个Activity的样式：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubXVrZXdhbmcuY29tLzViOTc2MGNkMDAwMWI4NzgwODQwMDg1Ny5qcGc" alt="img"></p><p>然后需要给Activity和Layout起一个名字。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWc0Lm11a2V3YW5nLmNvbS81Yjk3NjBjZTAwMDE4YTgxMDg0MDA4NTcuanBn" alt="img"></p><p>点击Finish按钮后，Android Studio开始创建并编译应用。编译结束后，我们就可以看到Android Studio的IDE界面了。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyLm11a2V3YW5nLmNvbS81Yjk3NjBjZjAwMDE2MGYzMTEwNDA3MTAuanBn" alt="img"></p><p>从图上可以看出Android Studio已经帮我们将工程组织的很好了。</p><h2 id="界面介绍"><a href="#界面介绍" class="headerlink" title="界面介绍"></a>界面介绍</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyLm11a2V3YW5nLmNvbS81Yjk3NjBjZjAwMDEwZDcwMTEwNDA3MTAuanBn" alt="img"></p><p>如上图所示，我将界面分为5个区域做详细的讲解：</p><h3 id="区域1介绍"><a href="#区域1介绍" class="headerlink" title="区域1介绍"></a>区域1介绍</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWc0Lm11a2V3YW5nLmNvbS81Yjk3NjBkMDAwMDFmZjNlMDM5MTAyMzUuanBn" alt="说明: C:\Users\wqm\AppData\Local\Temp\SNAGHTML5a24778.PNG"></p><p>这个区域是运行和调试相关的操作。</p><p>1、编译2中显示的模块</p><p>2、当前项目的模块列表</p><p>3、运行2中显示的模块</p><p>4、调试2中显示的模块</p><p>5、测试2中显示的模块代码覆盖率</p><p>6、调试安卓运行的进程</p><p>7、重新运行2中显示的模块</p><p>8、停止运行2中显示的模块</p><h3 id="区域2介绍"><a href="#区域2介绍" class="headerlink" title="区域2介绍"></a>区域2介绍</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWczLm11a2V3YW5nLmNvbS81Yjk3NjBkMDAwMDFjYTczMDI5MDAyMDkuanBn" alt="说明: C:\Users\wqm\AppData\Local\Temp\SNAGHTML5a94cd5.PNG"></p><p>这个区域主要是和Android设备和虚拟机相关的操作。</p><p>1、虚拟设备管理。</p><p>2、同步工程的Gradle文件，一般在Gradle配置被修改的时候需要同步一下。</p><p>3 、项目结构，一些项目相关的属性配置。</p><p>4、Android SDK管理</p><p>5、Genymontion模拟器（需要装Genymontion插件，<a href="http://www.open-open.com/lib/view/1468118887690.html" target="_blank" rel="noopener">安装篇</a>[模拟器安装]部分）</p><h3 id="区域3介绍"><a href="#区域3介绍" class="headerlink" title="区域3介绍"></a>区域3介绍</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubXVrZXdhbmcuY29tLzViOTc2MGUyMDAwMWQ0Y2YwMzk1MDI4MC5qcGc" alt="说明: C:\Users\wqm\AppData\Local\Temp\SNAGHTML5bde3b7.PNG"></p><p>这个区域主要是工程文件资源等相关的操作。</p><p>1、展示项目中文件的组织方式，默认是以Android方式展示的，可选择“Project、Packages、Scratches、ProjectFiles、Problems…”等展示方式。平时用的最多的就Android和Project两种。</p><p>2、定位当前打开文件在工程目录中的位置。</p><p>3、关闭工程目录中所有的展开项。</p><p>4、额外的一些系统配置，点开后是一个弹出菜单:<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWczLm11a2V3YW5nLmNvbS81Yjk3NjBlMjAwMDE3M2JhMDI3MzA0MDEuanBn" alt="img"><br>Autoscroll to Source 和 Autoscroll from Source两个勾选起来后，Android Studio会自动定位当前编辑文件在工程中的位置，用起来会很爽。其他功能大家可以自己摸索摸索。</p><h3 id="区域4介绍"><a href="#区域4介绍" class="headerlink" title="区域4介绍"></a>区域4介绍</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWc0Lm11a2V3YW5nLmNvbS81Yjk3NjBlMjAwMDEzMjdjMDY5MjAzODEuanBn" alt="说明: C:\Users\wqm\AppData\Local\Temp\SNAGHTML5cee482.PNG"></p><p>这个区域主要是用来编写代码和设计布局。</p><p>1、已打开的文件的Tab页。（在Tab页上按下Ctrl键 + 点击鼠标会出现一个弹出菜单会有惊喜哦！）</p><p>2、UI布局预览区域。</p><p>3、布局编辑模式切换，对于一些老鸟来说更喜欢通过Text来编辑布局，新手可以试试Design编辑布局，编辑后再切换到Text模式，对于学习Android布局设计很有帮助。</p><h3 id="区域5介绍"><a href="#区域5介绍" class="headerlink" title="区域5介绍"></a>区域5介绍</h3><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWc0Lm11a2V3YW5nLmNvbS81Yjk3NjBlMzAwMDFlODA4MDg4MzAyNDYuanBn" alt="img"></p><p>这个区域大部分是用来查看一些输出信息的。</p><p>1、终端 - 喜欢命令行操作的伙伴不用额外启动终端了。</p><p>2、监控 - 可以查看应用的一些输出信息。</p><p>3、信息 - 工程编译的一些输出信息。</p><p>4、运行 - 应用运行后的一些相关信息。</p><p>5、TODO - 标有TOTO注释的列表。</p><p>6、事件 - 一些事件日志。</p><p>7、Gradle控制台，通过这个可以了解Gradle构建应用的时候一些输出信息。</p><h2 id="Android-Studio目录结构"><a href="#Android-Studio目录结构" class="headerlink" title="Android Studio目录结构"></a>Android Studio目录结构</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWc0Lm11a2V3YW5nLmNvbS81Yjk3NjBlNDAwMDE4NGM1MDQ5ODA4NzguanBn" alt="说明: C:\Users\wqm\AppData\Local\Temp\SNAGHTML6038007.PNG"></p><p>1、Gradle编译系统，版本由wrapper指定</p><p>2、Android Studio IDE所需要的文件</p><p>3、应用相关文件的存放目录</p><p>4、编译后产生的相关文件</p><p>5、存放相关依赖库</p><p>6、代码存放目录</p><p>7、资源文件存放目录（包括：布局、图像、样式等等）</p><p>8、应用程序的基本信息清单，描述哪些个组件是存在的</p><p>9、git版本管理忽略文件，标记出哪些文件不用进入git库中</p><p>10、Android Studio的工程文件</p><p>11、模块的gradle相关配置</p><p>12、代码混淆规则配置</p><p>13、工程的gradle相关配置</p><p>14、gradle相关的全局属性设置</p><p>15、本地属性设置（key设置，android sdk位置等属性）</p><h2 id="应用开发调试"><a href="#应用开发调试" class="headerlink" title="应用开发调试"></a>应用开发调试</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcxLm11a2V3YW5nLmNvbS81Yjk3NjBlNDAwMDE4NWU3MDY5MjA0OTcuanBn" alt="说明: C:\Users\wqm\AppData\Local\Temp\SNAGHTML60a7a4d.PNG"></p><p>如上图1所示在需要调试的行号处点击设置断点，然后点击2所示的Debug按钮（或直接按下Shift+F9快捷键）开始调试。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWczLm11a2V3YW5nLmNvbS81Yjk3NjBlNTAwMDE2YTlkMDg5MzA4NTkuanBn" alt="img"></p><p>如上图所示Android Studio下方出现了调试视图。</p><p>1、当前程序停留的代码行</p><p>2、调试相关的一些按钮</p><p>3、程序调用栈区，该区域显示了程序执行到断点处所调用过的所有方法，越下面的越早被调用。</p><p>4、局部变量观察区</p><p>5、用户自定义变量观察区</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWczLm11a2V3YW5nLmNvbS81Yjk3NjBlNjAwMDEzODRkMDY5MjAyODMuanBn" alt="说明: C:\Users\wqm\AppData\Local\Temp\SNAGHTML6cc60f7.PNG"></p><p>1、Step Over(F8) - 程序向下执行一行，如果当前行有方法调用，这个方法执行完毕返回，然后到下一行。</p><p>2、Step Into(F7) - 程序向下执行一行，如果当前行有用户自定义方法（非官方类库方法）调用，则进入该方法。</p><p>3、Force Step Into(Alt+Shift+F7) - 程序向下执行一行，如果当前行有方法调用，则进入该方法。</p><p>4、Step Out(Shift+F8) - 如果在调试的时候你进入了一个方法，并觉得该方法没有问题，你就可以使用Step Out跳出该方法，返回到该方法被调用处的下一行语句。值得注意的是，该方法已执行完毕。</p><p>5、Drop Frame - 点击该按钮后，你将返回到当前方法的调用处重新执行，并且所有上下文变量的值也回到那个时候。只要调用链中还有上级方法，可以跳到其中的任何一个方法。</p><p>6、Run to Cursor(Alt+F9) - 一直运行到光标所在的位置。</p><p>7、Resume Program（F9) - 一直运行程序直到碰到下一个断点。</p><p>8、View Backpoints（Ctrl + Shift +F8) - 查看你设置过的所有断点并可以设置断点的一些属性</p><p>9、Mute Backpoints - 选中后所有的断点别设置成无效状态。再次点击可以重新设置所有断点有效。</p><p>在点击了View Backpoints按钮后，会出现一个断点属性窗口，可以对断点进行一些更高级的设置。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcxLm11a2V3YW5nLmNvbS81Yjk3NjBlNjAwMDEzZjcxMDY5MjA0NjIuanBn" alt="说明: C:\Users\wqm\AppData\Local\Temp\SNAGHTML6dbfefa.PNG"></p><p>1、列出了所有程序中设置的断点</p><p>2、可以输入条件，在条件成立后断点才起作用（例如：在输入框中输入 i == 8），这种带条件断点在实际开发过程中非常有用。也可以通过右键点击断点来设置条件断点，如下图：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWczLm11a2V3YW5nLmNvbS81Yjk3NjBlODAwMDEzMmE4MDc5NDA0NTQuanBn" alt="说明: C:\Users\wqm\work\open-open\document\Android Studio2.0 教程从入门到精通Windows版\image\2016-07-09_16-15-35.gif"></p><p>好了，到这里调试相关的功能都介绍完了。</p><h2 id="应用打包签名"><a href="#应用打包签名" class="headerlink" title="应用打包签名"></a>应用打包签名</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>一个 Android Studio 项目中，会存在多个 .gradle 文件。其中， project 目录下存在一个 build.gradle 文件和每一个 module 会存在一个 build.gradle 文件。</p><p>工程中的build.gradle</p><pre><code>buildscript {    repositories {           jcenter()   // 声明使用 maven 仓库    }    dependencies {           // 依赖android提供的2.1.0-alpha5的gradle build      classpath 'com.android.tools.build:gradle:2.1.0-alpha5'    }}// 为所有的工程的repositories配置为jcentersallprojects {    repositories {    jcenter()    }}// 清楚工程的任务task clean(type: Delete) {    delete rootProject.buildDir}</code></pre><p>模块中的build.gradle</p><pre><code>// 这表示该module是一个app moduleapply plugin: 'com.android.application'android {    // 基于哪个版本编译    compileSdkVersion 23    // 基于哪个构建工具版本进行构建的    buildToolsVersion "23.0.3"    // 缺省配置主要包括：应用ID，最小SDK版本，目标SDK版本，应用版本号、应用版本名    defaultConfig {        applicationId "open_open.com.helloworld"        minSdkVersion 10        targetSdkVersion 23        versionCode 1        versionName "1.0"    }    // buildTypes是构建类型，常用的有release和debug两种，可以在这里面启用混淆，启用zipAlign以及配置签名信息等。    buildTypes {        release {            minifyEnabled false            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'        }    }}// dependencies它定义了该module需要依赖的jar，aar，jcenter库信息。dependencies {    compile fileTree(dir: 'libs', include: ['*.jar'])    testCompile 'junit:junit:4.12'    compile 'com.android.support:appcompat-v7:23.2.1'}</code></pre><h3 id="打包签名"><a href="#打包签名" class="headerlink" title="打包签名"></a>打包签名</h3><p>选择Build-&gt;Generate Signed APK…，如下图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyLm11a2V3YW5nLmNvbS81Yjk3NjBmOTAwMDE4YjgwMDY5MjA2MzguanBn" alt="说明: C:\Users\wqm\AppData\Local\Temp\SNAGHTML3715a3.PNG"></p><p>在弹窗中一直Next直到下面这个界面：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWczLm11a2V3YW5nLmNvbS81Yjk3NjBmYTAwMDE4OTcwMDY1MzA0MTkuanBn" alt="说明: C:\Users\wqm\AppData\Local\Temp\SNAGHTML39f279.PNG"></p><p>在没有Key的情况下，我们可以先点击Create new…按钮来创建一个Key，创建过程很简单，如下图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcubXVrZXdhbmcuY29tLzViOTc2MGZiMDAwMTJjYTAwNjkyMDcxNC5qcGc" alt="说明: C:\Users\wqm\AppData\Local\Temp\SNAGHTML4335d0.PNG"></p><p>如果你已经存在Key了，那就点击Choose existing…按钮指定.jks文件位置,如下图：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWczLm11a2V3YW5nLmNvbS81Yjk3NjBmYjAwMDEzYjg0MDY3ODA3NzQuanBn" alt="说明: C:\Users\wqm\AppData\Local\Temp\SNAGHTML448c19.PNG"></p><p>输入Key store password和Key password（在创建Key的时候输入的那两个密码），点击Next按钮：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWcyLm11a2V3YW5nLmNvbS81Yjk3NjBmYzAwMDEyNzE2MDY1MzA0MTkuanBn" alt="说明: C:\Users\wqm\AppData\Local\Temp\SNAGHTML4627eb.PNG"></p><p>接下来就点击Finish按钮，坐等AS打包签名完成，签名完成后AS会提示我们：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWc0Lm11a2V3YW5nLmNvbS81Yjk3NjBmYzAwMDFhMjYyMDUzMDAzNTUuanBn" alt="说明: C:\Users\wqm\AppData\Local\Temp\SNAGHTML48b922.PNG"></p><p>点击Show in Explorer，可以找到我们签名好的APK文件：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWc0Lm11a2V3YW5nLmNvbS81Yjk3NjBmYzAwMDEwZTJlMDYxMTA1NDQuanBn" alt="说明: C:\Users\wqm\AppData\Local\Temp\SNAGHTML4a9d0a.PNG"></p><p>原文链接：<a href="http://www.apkbus.com/blog-822715-68465.html" target="_blank" rel="noopener">http://www.apkbus.com/blog-822715-68465.html</a></p><p><a href="http://www.imooc.com/article/tag/12" target="_blank" rel="noopener">Android</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse中New菜单没有Android Application Project的解决方法</title>
      <link href="/2020/09/06/Eclipse%E4%B8%ADNew%E8%8F%9C%E5%8D%95%E6%B2%A1%E6%9C%89Android%20Application%20Project%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2020/09/06/Eclipse%E4%B8%ADNew%E8%8F%9C%E5%8D%95%E6%B2%A1%E6%9C%89Android%20Application%20Project%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>升级了下Eclipse为最新版（Eclipse 23.0.3），点击Eclipse中的New菜单找不到Android Application Project，只能在Other中找，每次都这样做太麻烦了，随后在网上找了下解决方法，挺简单的：</p><p>1.在<strong>Window</strong>中点击<strong>Customize Perspective…</strong></p><p><img src="https://img-blog.csdn.net/20140924161529804?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXlhdGxhbnRpcw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><p>2.在弹出的新窗口中点击<strong>Shortcuts</strong>，如图设置即可，除了New菜单还可以设置其他菜单</p><p><img src="https://img-blog.csdn.net/20140924162056422?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbXlhdGxhbnRpcw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>史上最全的Android开发学习教程集锦【初学者】</title>
      <link href="/2020/09/06/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E7%9A%84Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%E9%9B%86%E9%94%A6%E3%80%90%E5%88%9D%E5%AD%A6%E8%80%85%E3%80%91/"/>
      <url>/2020/09/06/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E7%9A%84Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E6%95%99%E7%A8%8B%E9%9B%86%E9%94%A6%E3%80%90%E5%88%9D%E5%AD%A6%E8%80%85%E3%80%91/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://www.theverge.com/2017/5/17/15654454/android-reaches-2-billion-monthly-active-users" target="_blank" rel="noopener"><strong>*<em>\</em>根据\</strong>*<em>Google的报告****</em></a>，截止2017年5月为止，Android活跃用户已超过20亿，并还在持续增长中。Android系统在几个主要的市场上已超过了iOS系统，特别是在美国，欧洲和日本，然而苹果确实在中国市场找到了一席之地。未来的市场到底谁是“霸主”我们还无从得知，但Android现在的趋势已经超过iOS。这也是为什么越来越多的设计师投身于Android开发设计。本篇文章从不同角度给Android开发提供丰富的教程资源：初级Android开发教程，YouTube视频教程，丰富的Android开发资源以及工具使用等。</p><h2 id="初级Android开发教程："><a href="#初级Android开发教程：" class="headerlink" title="初级Android开发教程："></a>初级Android开发教程：</h2><p><a href="https://developer.android.com/training/basics/firstapp/creating-project" target="_blank" rel="noopener">https://developer.android.com/training/basics/firstapp/creating-project</a></p><p> 当然，我们还是要从Google给的Android教程开始学起。“开发你的第一个Android应用程序”这个教程一开始就是为初学者准备的，如果你没有一点编程知识，那么学习起来会很困难，但如果你有一些编程背景，那很容易。</p><p>在教程的背后有几个“最佳实践”，这个可以说是非常重要的内容，这是你必须阅读的部分。</p><p> <img src="https://img-blog.csdn.net/20180704100625918?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2pvbmdkZTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p><a href="https://www.raywenderlich.com/120177/beginning-android-development-tutorial-installing-android-studio" target="_blank" rel="noopener">https://www.raywenderlich.com/120177/beginning-android-development-tutorial-installing-android-studio</a></p><p>这个Android教程没有任何附件的条件，只要你有一颗想学习的心和Mac。对的，Mac, 当然你也可以在PC端上开发Android应用程序，但这个教程是基于Mac开发人员的。从这个教程中你将学习到：</p><p>如何设置Android开发过程中使用的所有工具</p><p>如何下载并安装Android studio</p><p>如何在不同设备和模拟器中测试你的应用程序</p><p>创建简单的“hello world”Android应用程序，并可以打印到你的设备以及模拟器</p><p>如何将示例项目导入Android studio</p><p> <img src="https://img-blog.csdn.net/2018070410063515?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2pvbmdkZTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p><a href="https://www.tutorialspoint.com/android/index.htm" target="_blank" rel="noopener">https://www.tutorialspoint.com/android/index.htm</a></p><p>Android编程是基于Java语言的，如果你对Java编程有基本了解，那么学习起来会相对轻松些。这个教程会教你基本的Android编程，并带你了解一些与Android应用程序相关的高级概念。本篇教程完全是为初学者准备的，当你了解完这篇教程后，你将发现自己已达到了Android编程中等水平的专业知识，从而就可以进入下个阶段。值得一提的是，这个网站上涵盖了几乎所有的Android开发的知识，包括：Android的用户界面，Android高阶概念，Android应用程序样例以及各种Android资源。</p><p> <img src="https://img-blog.csdn.net/20180704100642902?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2pvbmdkZTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p><a href="https://www.raywenderlich.com/185299/building-android-library-tutorial" target="_blank" rel="noopener">https://www.raywenderlich.com/185299/building-android-library-tutorial</a></p><p>Android库在结构上与Android应用程序模块相同。 它可以包括构建应用程序所需的一切，包括源代码，资源文件和Android清单。在本教程中，你将学习到构建Android库的所有内容，从创建到发布以供其他人使用。教程内容包括：</p><p>如何创建Android库</p><p>如何发布你的Android库</p><p>如何使用你的Android库</p><p>Android库的最佳实践</p><p> <img src="https://img-blog.csdn.net/20180704100650558?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2pvbmdkZTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><h2 id="YouTube视频教程："><a href="#YouTube视频教程：" class="headerlink" title="YouTube视频教程："></a>YouTube视频教程：</h2><p><a href="https://www.youtube.com/playlist?list=PLS1QulWo1RIbb1cYyzZpLFCKvdYV_yJ-E" target="_blank" rel="noopener">https://www.youtube.com/playlist?list=PLS1QulWo1RIbb1cYyzZpLFCKvdYV_yJ-E</a> </p><p>这个教程是Android开发系列教程，涵盖56个视频教程。从基础的介绍和安装配置Java JDK到安装Android studio以及开发应用程序，你可以了解到你想了解的一切关于Android开发的知识。</p><p><a href="https://www.youtube.com/playlist?list=PLshdtb5UWjSrOJfpFOE-u55s3SnY2EO9v" target="_blank" rel="noopener">https://www.youtube.com/playlist?list=PLshdtb5UWjSrOJfpFOE-u55s3SnY2EO9v</a> </p><p>本教程总共有69个视频，从基础的开发知识到如何创建一个Android应用程序，你想知道的Android所有知识，都涵盖在这77个视频里。在学习完本系列教程，你可以创建自己的Android应用程序，并可以在Play store中发布你的应用程序。这个系列教程是2018年最新的。</p><p><a href="https://www.youtube.com/watch?v=EOfCEhWq8sg" target="_blank" rel="noopener">https://www.youtube.com/watch?v=EOfCEhWq8sg</a></p><p>本教程是由在线学习网站Treehouse提供的。顺便说一句，这个网站的学习资源很丰富，有时间可以去看看。目前， Android开发都是有Android studio这个工具完成的，它有助于组织我们的项目，并提供一种用户友好的方式来创建我们找寻的东西。在本视频中，我们将学习到如何安装Android studio，然后制作应用程序，如果你没有一点编程知识，也没关系，跟着视频学习，你将了解更多Android应用程序。</p><p> <img src="https://img-blog.csdn.net/20180704100658505?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2pvbmdkZTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><p>Android开发资源：</p><p><a href="https://www.udemy.com/java-tutorial/" target="_blank" rel="noopener">https://www.udemy.com/java-tutorial/</a></p><p>本课程是为初学者准备的，如何学习Java编程语言，没有编程背景也不影响，并且是免费的。</p><p><a href="https://www.youtube.com/playlist?list=PL9DF6E4B45C36D411" target="_blank" rel="noopener">https://www.youtube.com/playlist?list=PL9DF6E4B45C36D411</a></p><p>Java编程学习的系列YouTube视频教程，涵盖47个视频。</p><p><a href="https://www.youtube.com/watch?v=WPvGqX-TXP0&amp;feature=youtu.be" target="_blank" rel="noopener">https://www.youtube.com/watch?v=WPvGqX-TXP0&amp;feature=youtu.be</a></p><p>这个教程能够在30分钟内教你Java的核心知识。</p><p><a href="https://academy.realm.io/posts/eric-maxwell-mvc-mvp-and-mvvm-on-android/" target="_blank" rel="noopener">https://academy.realm.io/posts/eric-maxwell-mvc-mvp-and-mvvm-on-android/</a></p><p>学习如何为复杂的Android应用程序选择合适的架构，实现更好的开发、测试、调试和维护。</p><p><a href="https://www.w3schools.com/xml/" target="_blank" rel="noopener">https://www.w3schools.com/xml/</a></p><p>如果还对XML不熟悉的，现在是你学习它的最佳时机，因为你需要大量的使用它来设计Android布局，这个还比较简单，你不需要花费太多时间。</p><p><a href="https://code.tutsplus.com/tutorials/a-beginners-guide-to-http-and-rest--net-16340" target="_blank" rel="noopener">https://code.tutsplus.com/tutorials/a-beginners-guide-to-http-and-rest--net-16340</a></p><p>如果你需要通过Android应用程序进行API调用，那么了解HTTP和REST非常重要。</p><p><a href="https://www.mockplus.com/blog/post/android-app-design" target="_blank" rel="noopener">https://www.mockplus.com/blog/post/android-app-design</a></p><p>Android开发同样需要学习APP 设计，和设计师能够更好的沟通。</p><p><a href="https://www.mockplus.cn/blog/post/947" target="_blank" rel="noopener">https://www.mockplus.cn/blog/post/947</a></p><p>这篇文章给我们提供了最全的材料设计 UI kit。</p><p><a href="https://blog.google/products/android/" target="_blank" rel="noopener">https://blog.google/products/android/</a></p><p>如果你想获得Android最新消息，那么不如直接从Google获取。</p><p><img src="https://img-blog.csdn.net/20180704100706641?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2pvbmdkZTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"> </p><p><a href="https://android-developers.googleblog.com/" target="_blank" rel="noopener">https://android-developers.googleblog.com/</a></p><p>如果你是Android的开发人员，那么这个博客可以获得Android所有的最新时讯，并提供最新的一些开发应用程序技巧以及丰富的培训资源。</p><p><a href="http://www.androidguys.com/" target="_blank" rel="noopener">http://www.androidguys.com/</a></p><p>这个博客为Android用户提供关于Android的产品、使用技巧以及最新的时讯。如果你想了解某个Android的操作系统以及设备，那么这个博客你绝对值得收藏。</p><p><a href="https://www.androidauthority.com/how-to-use-material-design-in-your-android-apps-809937/" target="_blank" rel="noopener">https://www.androidauthority.com/how-to-use-material-design-in-your-android-apps-809937/</a></p><p>本文教你如何使用材料设计让你的Android应用程序更加美观吸引人。</p><h2 id="Android-开发工具："><a href="#Android-开发工具：" class="headerlink" title="Android 开发工具："></a>Android 开发工具：</h2><h3 id="Android-Studio"><a href="#Android-Studio" class="headerlink" title="Android Studio"></a>Android Studio</h3><p>所有Android应用程序离不开Android studio，它是Google推出的Android开发环境，开发者可以在编写程序的同时看到自己的应用在不同尺寸屏幕中的样子。Android Studio还提供了更多功能，可在构建Android应用程序时提高你的工作效率，例如：C ++和NDK支持。</p><p><a href="https://www.mockplus.cn/" target="_blank" rel="noopener"><strong><em>Mockplus</em></strong></a></p><p>Mockplus是一款Android原型设计工具。快速原型设计是设计师与移动app软件需求方沟通的最好工具，我的理解就是在软件开发初期，先对所要开发的软件有一个大致的整体设计，毕竟现在的移动端多种多样，原型的重要性是降低开发成本，此阶段应该被充分利用，以避免后期因为不符合需求而改写大量代码。如果没有一个好的设计，很难做出一个比较优秀的软件，快速原型更有利于用户与开发人员的交互，使设计细致入微。</p><p><img src="https://img-blog.csdn.net/20180704100715801?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2pvbmdkZTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><h1 id="Android-Device-Monitor"><a href="#Android-Device-Monitor" class="headerlink" title="Android Device Monitor"></a>Android Device Monitor</h1><p>Android Device Monitor是一个独立的调试监控服务工具，可为多个Android应用调试和分析工具提供UI。</p><h3 id="APKAnalyser"><a href="#APKAnalyser" class="headerlink" title="APKAnalyser"></a>APKAnalyser</h3><p>这是一个静态、虚拟分析工具，你可以全面地概览应用的架构。可以用它来检查API参考文档，反编译字节码。APKAnalyser是一个完整的开源工具链，它支持修改应用的二进制代码，你可以重新打包、安装、运行以及验证logcat的结果。</p><p><img src="https://img-blog.csdn.net/20180704100725100?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2pvbmdkZTE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>假如开始没有任何的开发经验的话，千万不要着急，不要想着在短时间内就把一个语言学习好，因为你之前没有任何的学习经验，在这个过程中需要有耐心地学习完JAVA的基础知识，然后才开始踏上Android开发之旅。有开发经验的，可以在Android上迅速上手，但是同样的是不可忽略Android的一些基础知识，只有把基础掌握好了，才能在后期取得大的进步。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>安卓开发-开发工具及环境配置</title>
      <link href="/2020/09/05/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91-%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/09/05/%E5%AE%89%E5%8D%93%E5%BC%80%E5%8F%91-%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7%E5%8F%8A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="安卓app开发-01-开发工具及环境配置"><a href="#安卓app开发-01-开发工具及环境配置" class="headerlink" title="安卓app开发-01-开发工具及环境配置"></a>安卓app开发-01-开发工具及环境配置</h2><p>请大家根据推荐指数和自己的意愿选择</p><h2 id="使用-Android-Studio"><a href="#使用-Android-Studio" class="headerlink" title="使用 Android Studio"></a>使用 Android Studio</h2><ul><li>1.可以使用 Android Studio</li><li>下载地址：<a href="http://www.android-studio.org/" target="_blank" rel="noopener">http://www.android-studio.org/</a></li><li>配置方法我就不转载了，请参考：<a href="https://blog.csdn.net/jklinux/article/details/77888804" target="_blank" rel="noopener">https://blog.csdn.net/jklinux/article/details/77888804</a></li><li>推荐指数： ☆☆☆☆</li><li>提示：最好下载那个压缩包</li></ul><h2 id="使用-Eclipse-ADT-Android-SDK"><a href="#使用-Eclipse-ADT-Android-SDK" class="headerlink" title="使用 Eclipse+ADT+Android SDK"></a>使用 Eclipse+ADT+Android SDK</h2><ul><li>1.如果详细配置的话，这个比较麻烦</li><li>所以我提供一个<strong>集成好的 eclipse 开发工具</strong>，解压即可使用</li><li>下载地址：<a href="https://pan.baidu.com/s/1vE6tNAkTz-5C9rSIRpy00g" target="_blank" rel="noopener">https://pan.baidu.com/s/1vE6tNAkTz-5C9rSIRpy00g</a> 密码：oq7c</li><li>推荐指数： ☆☆☆☆</li><li>打开即可使用者请忽略本段；有个需要注意的地方，一般打开即可使用，如果你之前下载过 Android SDK 不要使用，要使用压缩包的 sdk，不然版本不匹配找不到解决办法，所以如果你打开，新建安卓项目，报错的话，进行下面设置</li><li>将SDK路径设置成压缩包里解压后的SDK路径：<br><img src="https://img-blog.csdn.net/2018091818594119?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></li><li>2.如果不想再下一个 eclipse，就想在自己 eclipse 上配置</li><li>推荐指数：☆</li><li>帮你找好了，请参考：<a href="https://www.cnblogs.com/zh719588366/p/5928140.html" target="_blank" rel="noopener">https://www.cnblogs.com/zh719588366/p/5928140.html</a></li></ul><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><ul><li>关于环境配置主要是针对 jdk 的环境变量，如果之前配置好，也可以参考看一下</li><li>如果你配置过了，确保没有问题，请打开 cmd</li><li>然后测试：1.java 2.javac 3. java -version 3条命令</li><li>有一条任何一条命令出错，就说明变量配置有错</li></ul><h3 id="配置变量方法"><a href="#配置变量方法" class="headerlink" title="配置变量方法"></a>配置变量方法</h3><ul><li>所有地址根据自己安装的路径，要自己对应</li><li>1.JAVA_HOME</li><li>变量值为 jdk 的路径：<br><img src="https://img-blog.csdn.net/20180918190553855?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></li><li>2.Path变量中添加路径</li><li>…\jdk…\bin<br><img src="https://img-blog.csdn.net/20180918190931468?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQwMTQ3ODYz/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="在这里插入图片描述"></li><li>3.新建变量：CLASSPATH</li><li>变量值为：</li></ul><blockquote><p>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</p></blockquote><ul><li>4.再次测试：</li><li>有错重新检查</li></ul><h3 id="使用-Eclipse-Tomcat-MAVEN"><a href="#使用-Eclipse-Tomcat-MAVEN" class="headerlink" title="使用 Eclipse+Tomcat+MAVEN"></a>使用 Eclipse+Tomcat+MAVEN</h3><ul><li>如果想使用 Eclipse+Tomcat+MAVEN</li><li>对新手推荐指数：☆</li><li>请参考：<a href="http://www.cnblogs.com/Li-Cheng/p/4335418.html" target="_blank" rel="noopener">http://www.cnblogs.com/Li-Cheng/p/4335418.html</a></li></ul><h3 id="更多文章链接：安卓app开发"><a href="#更多文章链接：安卓app开发" class="headerlink" title="更多文章链接：安卓app开发"></a>更多文章链接：<a href="https://blog.csdn.net/qq_40147863/article/category/8054657" target="_blank" rel="noopener">安卓app开发</a></h3><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>PI使用教程</title>
      <link href="/2020/07/08/PI/"/>
      <url>/2020/07/08/PI/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="Pi注册教程"><a href="#Pi注册教程" class="headerlink" title="Pi注册教程"></a>Pi注册教程</h1><p>2020-07-03<a href="https://www.xuanyes.com/userhome/0049aacaac684db78e00cd33b6ff7cd5.html" target="_blank" rel="noopener">13182821815</a>阅读 112举报</p><p>邀请码weierxiao</p><p>不懂的加q:1722539998</p><p>微信扫描二维码下载，苹果用户使用海外ID:账号：<a href="mailto:shangrong5555@sina.cn">shangrong5555@sina.cn</a></p><p>密码：314Shangxueyuan</p><p>登陆后搜索Pi Network下载。</p><p> 苹果海外ID</p><p>卡号：<a href="mailto:a27cx9aj@icloud.com">a27cx9aj@icloud.com</a> 密码：Aa112211 美国</p><p><img src="http://182.92.64.215:8080/temp/1.jpg" alt="img"></p><p>安全密保问题(修改密码用)：</p><p><a href="https://appleid.apple.com/#!&amp;page=signin" target="_blank" rel="noopener">https://appleid.apple.com/#!&amp;page=signin</a>  </p><p>你少年时代最好的朋友叫什么名字？—111</p><p>你的理想工作是什么？——– ——–112</p><p>你的父母是在哪里认识的？————113</p><p>生日：1990年1月1日</p><p><img src="http://182.92.64.215:8080/temp/2.jpg" alt="img"></p><p><img src="http://182.92.64.215:8080/temp/3.jpg" alt="img"></p><p><img src="http://182.92.64.215:8080/temp/4.jpg" alt="img"></p><p><img src="http://182.92.64.215:8080/temp/5.jpg" alt="img"></p><p><img src="http://182.92.64.215:8080/temp/6.jpg" alt="img"></p><p><img src="http://182.92.64.215:8080/temp/7.jpg" alt="img"></p><p><img src="http://182.92.64.215:8080/temp/12.jpg" alt="img"></p><p>下面是手机认证流程</p><p><img src="http://182.92.64.215:8080/temp/8.jpg" alt="img"></p><p><img src="http://182.92.64.215:8080/temp/9.jpg" alt="img"></p><p><img src="http://182.92.64.215:8080/temp/10.jpg" alt="img"></p><p><img src="http://182.92.64.215:8080/temp/11.jpg" alt="img"></p><p><img src="http://182.92.64.215:8080/temp/13.jpg" alt="img"></p><p><img src="http://182.92.64.215:8080/temp/14.jpg" alt="img"></p><p><img src="http://182.92.64.215:8080/temp/15.jpg" alt="img"></p><p><img src="http://182.92.64.215:8080/temp/16.jpg" alt="img"></p><p><img src="http://182.92.64.215:8080/temp/17.jpg" alt="img"></p><p><img src="http://182.92.64.215:8080/temp/18.jpg" alt="img"></p><p>最后放一个加入安全圈教程，新人三天后才可以加入安全圈，加入后算力翻倍。<a href="https://apage.xuanyes.com/index.html?tmp=in&amp;workId=54cba190651042dcb5a074488f95fc4d&amp;ak=N6M7mvc8drgDHWFi&amp;datetime=1593357788915&amp;signature=2d68530545b654f72f18fd03bb18aee6b06abae2a87354c0742fc8d28025335c&amp;nobg=1" target="_blank" rel="noopener">https://apage.xuanyes.com/index.html?tmp=in&amp;workId=54cba190651042dcb5a074488f95fc4d&amp;ak=N6M7mvc8drgDHWFi&amp;datetime=1593357788915&amp;signature=2d68530545b654f72f18fd03bb18aee6b06abae2a87354c0742fc8d28025335c&amp;nobg=1</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Qt软件打包后报错“无法定位程序输入点_ZN10QArrayData10deallocateEPs_jj于动态链接库</title>
      <link href="/2020/06/13/Qt%E8%BD%AF%E4%BB%B6%E6%89%93%E5%8C%85%E5%90%8E%E6%8A%A5%E9%94%99%E2%80%9C%E6%97%A0%E6%B3%95%E5%AE%9A%E4%BD%8D%E7%A8%8B%E5%BA%8F%E8%BE%93%E5%85%A5%E7%82%B9%E4%BA%8E%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/"/>
      <url>/2020/06/13/Qt%E8%BD%AF%E4%BB%B6%E6%89%93%E5%8C%85%E5%90%8E%E6%8A%A5%E9%94%99%E2%80%9C%E6%97%A0%E6%B3%95%E5%AE%9A%E4%BD%8D%E7%A8%8B%E5%BA%8F%E8%BE%93%E5%85%A5%E7%82%B9%E4%BA%8E%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Qt软件打包后报错“无法定位程序输入点_ZN10QArrayData10deallocateEPs_jj于动态链接库….. .exe上。”解决办法</p><p>在将 Qt 程序构建、运行、打包之后点击生成的 exe 文件发现出现以下“无法找到入口”错误。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzAwNjJhSU9FbHkxZzd3dXdicGcya2ozMGN6MDRxdDhzLmpwZw?x-oss-process=image/format,png" alt=""></p><p>无法定位程序输入点_ZN10QArrayData10deallocateEPs_jj于动态链接库….. .exe上。<br>1<br>之后发现是因为构建项目时使用的编译工具和打包软件时使用的编译工具不一样所导致的。<br>打包Qt项目的过程如下：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzAwNjJhSU9FbHkxZzd3djg3ZzNmM2ozMDl6MDdpYWE2LmpwZw?x-oss-process=image/format,png" alt=""></p><p>使用 Qt Create 打开项目。<br>如下图所示，选择 release ，有时需要选择编译工具，可以看到图中的编译工具是MinGW 32bit。</p><p>编译之后在工程项目文件夹下可看到 release 文件夹</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzAwNjJhSU9FbHkxZzd3dmFmcmRnbGozMGdsMDJnbXg3LmpwZw?x-oss-process=image/format,png" alt=""></p><p>打开关于release相关的文件夹，找到该目录下release目录下的.exe程序。将这个.exe文件拷贝出来，创建一个单独的文件夹，放在这个文件夹下。<br>从Windows图标找到Qt软件，如下图所示，本人电脑里有5个编译工具，找到与第一步里相同的编译工具，打开。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzAwNjJhSU9FbHkxZzd3dmVvdnhua2ozMDh3MGd4MHhyLmpwZw?x-oss-process=image/format,png" alt=""></p><p>如图所示：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzAwNjJhSU9FbHkxZzd3dmk1MGtwYmozMDl2MDNjMHNsLmpwZw?x-oss-process=image/format,png" alt=""></p><p>在该命令行窗口中通过盘符和cd命令转到才拷贝出来的exe程序所在的目录。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzAwNjJhSU9FbHkxZzd3dmxnZ21yOWozMDhxMDRhYTl5LmpwZw?x-oss-process=image/format,png" alt=""></p><p>使用windeployqt命令打包，即windeployqt 文件名.exe 敲击回车。这一步操作是将所需的库文件全都拷贝到exe程序的当前文件：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzAwNjJhSU9FbHkxZzd3dm92YWk2MmozMGs3MG5sNzViLmpwZw?x-oss-process=image/format,png" alt=""></p><p>此时程序目录如下，点击exe文件即可正常运行程序。将该目录整体拷贝到其它Windows系统中也可直接运行。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cDovL3d3MS5zaW5haW1nLmNuL2xhcmdlLzAwNjJhSU9FbHkxZzd3dnFlMmozd2ozMGc3MDlrbXllLmpwZw?x-oss-process=image/format,png" alt=""></p><p>有数据库编程的需要将对应libmysql.dll添加到exe文件同目录下，我这里用的是qt安装包里的libmysql.dll</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ValueError threshold must be numeric and non-NAN, try sys.maxsize for untruncated representation</title>
      <link href="/2020/05/12/ValueError%20threshold%20must%20be%20numeric%20and%20non-NAN,try%20sys.maxsize%20for%20untruncated%20representation/"/>
      <url>/2020/05/12/ValueError%20threshold%20must%20be%20numeric%20and%20non-NAN,try%20sys.maxsize%20for%20untruncated%20representation/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>python3不支持, 改成:<br>import sys<br>np.set_printoptions(threshold=sys.maxsize)</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里云CentOS 7.6 crontab定时任务|定时执行python脚本</title>
      <link href="/2020/05/06/%E9%98%BF%E9%87%8C%E4%BA%91centos%E5%AE%9A%E6%97%B6%E6%9C%8D%E5%8A%A1%E5%B9%B6%E6%89%A7%E8%A1%8Cpython/"/>
      <url>/2020/05/06/%E9%98%BF%E9%87%8C%E4%BA%91centos%E5%AE%9A%E6%97%B6%E6%9C%8D%E5%8A%A1%E5%B9%B6%E6%89%A7%E8%A1%8Cpython/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>编辑定时任务：<br>crontab -e   </p><hr><p>*所代表的的含义<br>M: 分（0-59）<br>H：时（0-23）<br>D：天（1-31）<br>m: 月（1-12）<br>d: 周（0-6） 0为星期日</p><p>加入：<br>#!/usr/local/bin/python3</p><ul><li>*/1 * * * /usr/local/bin/python3  /root/apache-tomcat-7.0.103/webapps/xchh/china_nc_map.py</li></ul><p>centos下启动、重启、停止、查询状态的命令<br>service crond start<br>service crond restart<br>service crond stop<br>service crond status</p><p>centos下设置crond【定时任务】为开机启动和开机不启动<br>systemctl is-enabled crond.service — 查看crond是否为开机自启动<br>systemctl enable crond.service — 将服务设置为开启启动<br>systemctl disable crond.service — 关闭服务开机自启动</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能之paddlepaddle</title>
      <link href="/2020/05/02/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B9%8Bpaddlepaddle/"/>
      <url>/2020/05/02/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E4%B9%8Bpaddlepaddle/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://blog.csdn.net/qq_45779334/article/details/105416868" target="_blank" rel="noopener">https://blog.csdn.net/qq_45779334/article/details/105416868</a><br>1、在Windows中安装GPU版paddle深度学习框架及过程中遇到问题的解决方法<br>环境准备<br>Windows 7/8/10 专业版/企业版 (64bit)</p><p>GPU版本支持CUDA 9.0/9.1/9.2/10.0/10.1，且仅支持单卡</p><p>Python 版本 2.7.15+/3.5.1+/3.6/3.7 (64 bit)</p><p>pip 版本 9.0.1+ (64 bit)</p><p>选择CPU/GPU<br>如果您的计算机没有 NVIDIA® GPU，请安装CPU版的PaddlePaddle</p><p>如果您的计算机有 NVIDIA® GPU，并且满足以下条件，推荐安装GPU版的PaddlePaddle</p><p>CUDA 工具包 9.0/10.0 配合 cuDNN v7.3+</p><p>GPU运算能力超过1.0的硬件设备</p><p>安装步骤<br>CPU版PaddlePaddle：<br>python -m pip install paddlepaddle -i <a href="https://mirror.baidu.com/pypi/simple（推荐使用百度源）" target="_blank" rel="noopener">https://mirror.baidu.com/pypi/simple（推荐使用百度源）</a> 或 python -m pip install paddlepaddle -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a></p><p>GPU版PaddlePaddle：<br>python -m pip install paddlepaddle-gpu -i <a href="https://mirror.baidu.com/pypi/simple" target="_blank" rel="noopener">https://mirror.baidu.com/pypi/simple</a> 或 python -m pip install paddlepaddle-gpu -i <a href="https://pypi.tuna.tsinghua.edu.cn/simple" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple</a><br>————————————————<br>版权声明：本文为CSDN博主「Irving.Gao」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/qq_45779334/article/details/105416868" target="_blank" rel="noopener">https://blog.csdn.net/qq_45779334/article/details/105416868</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python之数据导入excel</title>
      <link href="/2020/04/29/python%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5excel/"/>
      <url>/2020/04/29/python%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%AF%BC%E5%85%A5excel/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>导入包<br>import pandas as pd<br>定义列<br>col = [‘title’,’rate’,’url’]<br>创建<br>data = pd.DataFrame(index=range(number),columns=col)<br>#number为导入行数<br>修改参数<br>    for i in range(number):<br>        data.loc[i,’title’] = json_response[‘subjects’][i][‘title’]<br>        data.loc[i, ‘rate’] = json_response[‘subjects’][i][‘rate’]<br>        data.loc[i, ‘url’] = json_response[‘subjects’][i][‘url’]<br>    print(data)<br>导入excel<br>    data.to_excel(‘output.xlsx’)#导出到excel表格</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>windowsjavaweb项目部署到云服务器tomcat上</title>
      <link href="/2020/04/28/windowsjavaweb%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8tomcat%E4%B8%8A/"/>
      <url>/2020/04/28/windowsjavaweb%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8tomcat%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Eclipse开发好的Web项目如何部署到服务器的Tomcat上：<br><a href="https://blog.csdn.net/weixin_40327259/article/details/80467049" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40327259/article/details/80467049</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>学习django遇到的问题及解决</title>
      <link href="/2020/04/28/%E5%AD%A6%E4%B9%A0django%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/04/28/%E5%AD%A6%E4%B9%A0django%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E5%8F%8A%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这次学习django是为了更加深入学习用python搭建web项目<br>其中遇到一下问题：<br>配置django需要配置环境：<br>sudo pip install mysqlclient<br>运行上述命令时报错<br>Command “python setup.py egg_info” failed with error code 1 in /tmp/pip-install-denc2_l0/mysqlclient/<br>先是把python3设置为默认：<br>一、下载python3：<br>wget <a href="https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz" target="_blank" rel="noopener">https://www.python.org/ftp/python/3.7.4/Python-3.7.4.tgz</a><br>二，解压文件，添加一些安装依赖<br>　在/usr/local/目录下解压 (习惯将这里当做文件下载，解压的地方，根据个人情况而定)<br>tar zxvf Python-3.7.4.tgz<br> 　安装依赖</p><p>yum -y install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel gcc libffi-devel gcc make automake autoconf libtool libffi-devel</p><p>　且需要安装一个包，libffi-devel为3.7版本需要的一个新的包，否则安装的时候报错<br>　ModuleNotFoundError: No module named ‘_ctypes’<br>yum install libffi-devel -y<br> 　进入解压目录</p><p>cd Python-3.7.4<br>　进行初始配置<br>　注意：在这之前先将安装目录创建好，否则…….，这里我安装到 /usr/local/python3 目录下<br>mkdir /usr/local/python3</p><p>./configure –prefix=/usr/local/python3　</p><p>　执行安装<br>make &amp;&amp; make install<br> 　安装完成就配置软连接</p><p>ln -s /usr/local/python3/bin/python3 /usr/bin/python3<br>ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3<br>　验证<br>1 python3 -V<br>2<br>3 pip3 -V</p><p>三、配置软连接：<br> 1.若不需要将python3设置为默认:</p><p>ln -s /usr/local/python3/bin/python3 /usr/bin/python3<br> 2.若需要将python3设置为默认:</p><p> 即ln -s /usr/local/python3/bin/python3 /usr/bin/python，还需要修改yum配置，使用vi打开 /usr/bin/yum 即：<br>vi /usr/bin/yum<br>   将第一行的#! /usr/bin/python修改为#! /usr/bin/python2</p><pre><code>2.同理 vi /usr/libexec/urlgrabber-ext-down 将文件里面的#! /usr/bin/python 也要修改为#! /usr/bin/python2</code></pre><p>3.删除原有的软连接:</p><p>rm -rf /usr/bin/python<br>4.建立新的软连接:</p><p>ln -s /usr/local/python3/bin/python3 /usr/bin/python</p><p>最后解决pip install mysqlclient 安装报错：<br>pip install mysqlclient<br>解决成功！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里云服务器问题</title>
      <link href="/2020/04/27/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%97%AE%E9%A2%98/"/>
      <url>/2020/04/27/%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、为Linux实例安装图形化桌面环境：<br>CentOS 7<br>此处以安装MATE桌面环境为例，步骤如下。</p><p>说明：在安装重启后，如果卡在启动页面，需要执行以下命令，更新系统的软件包。</p><p>yum -y upgrade<br>远程连接并登录到Linux实例。<br>依次执行如下命令，安装MATE桌面环境。<br>yum groups install “X Window System”<br>yum groups install “MATE Desktop”<br>执行如下命令，设置默认使用图形化桌面环境启动系统。<br>systemctl set-default graphical.target<br>通过reboot命令，重启ECS实例。您也可以在ECS管理控制台中操作重启实例。</p><p>2、Centos7 安装python3环境方法：<br><a href="https://jingyan.baidu.com/article/67508eb4f854cbddca1ce481.html" target="_blank" rel="noopener">https://jingyan.baidu.com/article/67508eb4f854cbddca1ce481.html</a></p><p><a href="https://blog.csdn.net/qq_42353939/article/details/94609591" target="_blank" rel="noopener">https://blog.csdn.net/qq_42353939/article/details/94609591</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>远程ssh时出现自动ctrl+c问题</title>
      <link href="/2020/04/26/%E8%BF%9C%E7%A8%8Bssh%E6%97%B6%E5%87%BA%E7%8E%B0%E8%87%AA%E5%8A%A8ctrl+c%E9%97%AE%E9%A2%98/"/>
      <url>/2020/04/26/%E8%BF%9C%E7%A8%8Bssh%E6%97%B6%E5%87%BA%E7%8E%B0%E8%87%AA%E5%8A%A8ctrl+c%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这段时间突然发现莫名其妙ssh的时候会自动ctrl+c(确切来说应该是拖动窗口的时候),特别是任务正在进行的时候来一个ctrl+c，真要抓狂，百度一下发现网上有说是词霸取词的问题，but我的词霸取词是关着的。。忽然想起前端时间词霸自动更新了，于是查看软件果然，附带了一个什么词霸秒译~</p><p>搜索词霸，关闭自启动或卸载</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python 飞机大战源码（附带图片img文件）</title>
      <link href="/2020/04/22/%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98/"/>
      <url>/2020/04/22/%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>简易飞机大战<br>链接：<a href="https://pan.baidu.com/s/1h58GGz2P5bhxHC5jmrQ2ow" target="_blank" rel="noopener">https://pan.baidu.com/s/1h58GGz2P5bhxHC5jmrQ2ow</a><br>提取码：pkxi<br>复制这段内容后打开百度网盘手机App，操作更方便哦</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>poj刷题</title>
      <link href="/2020/03/30/poj%E5%88%B7%E9%A2%98/"/>
      <url>/2020/03/30/poj%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>2479：<br>Maximum sum<br>Time Limit: 1000MS        Memory Limit: 65536K<br>Total Submissions: 46793        Accepted: 14439<br>Description</p><p>Given a set of n integers: A={a1, a2,…, an}, we define a function d(A) as below:</p><p>Your task is to calculate d(A).<br>Input</p><p>The input consists of T(&lt;=30) test cases. The number of test cases (T) is given in the first line of the input.<br>Each test case contains two lines. The first line is an integer n(2&lt;=n&lt;=50000). The second line contains n integers: a1, a2, …, an. (|ai| &lt;= 10000).There is an empty line after each case.<br>Output</p><p>Print exactly one line for each test case. The line should contain the integer d(A).<br>Sample Input</p><p>1</p><p>10<br>1 -1 2 2 3 -3 4 -4 5 -5<br>Sample Output</p><p>13<br>Hint</p><p>In the sample, we choose {2,2,3,-3,4} and {5}, then we can get the answer. </p><p>Huge input,scanf is recommended.</p><p>解：<br>#include<cstdio><br>#include<cstring><br>#include<algorithm><br>using namespace std;<br>#define maxn 50010<br>int a[maxn],left[maxn],right[maxn];<br>int main()<br>{<br>    int t,n,i;<br>    scanf(“%d”,&amp;t);<br>    while(t–)<br>    {<br>        scanf(“%d”,&amp;n);<br>        for(i=0;i&lt;n;++i)<br>            scanf(“%d”,&amp;a[i]);<br>        left[0]=a[0];<br>        for(i=1;i&lt;n;++i)//此时left[i]为包含i的最大字段和<br>        {<br>            if(left[i-1]&lt;0)<br>                left[i]=a[i];<br>            else<br>                left[i]=left[i-1]+a[i];<br>        }<br>        for(i=1;i&lt;n;++i)//此时left[i]为i左边（包含i这个点）的最大字段和<br>            left[i]=max(left[i],left[i-1]);<br>        right[n-1]=a[n-1];<br>        for(i=n-2;i&gt;=0;–i)<br>        {<br>            if(right[i+1]&lt;0)<br>                right[i]=a[i];<br>            else<br>                right[i]=right[i+1]+a[i];<br>        }<br>        for(i=n-2;i&gt;=0;–i)<br>            right[i]=max(right[i],right[i+1]);<br>        int ans=-10000*maxn;<br>        for(i=1;i&lt;n;++i)<br>            ans=max(ans,left[i-1]+right[i]);<br>        printf(“%d\n”,ans);<br>    }<br>    return 0;<br>} </algorithm></cstring></cstdio></p><p>poj2593：<br>#include <iostream><br>#include <cstdio><br>#include <climits></climits></cstdio></iostream></p><p>int main()<br>{</p><pre><code>int m, i, s,max,a[100001],pre[100001];while(std::cin&gt;&gt;m,m){    s = 0;    max = INT_MIN;    for(i = 0;i != m;++i){        scanf("%d",&amp;a[i]);        s += a[i];        if(s&gt;max){            max = s;        }        pre[i] = max;        if(s&lt;0){            s = 0;        }    }    s = 0;    max = INT_MIN;    for(i = m-1;i!=0;--i){        s +=a[i];        if(s+pre[i-1]&gt;max){            max = s+pre[i-1];        }        if(s&lt;0){            s = 0;        }    }    std::cout &lt;&lt; max &lt;&lt; std::endl;}return 0;</code></pre><p>}</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>名言警句</title>
      <link href="/2020/03/28/%E5%90%8D%E8%A8%80%E8%AD%A6%E5%8F%A5/"/>
      <url>/2020/03/28/%E5%90%8D%E8%A8%80%E8%AD%A6%E5%8F%A5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>徐志摩说:<br>“一生至少该有一次，<br>为了某个人而忘了自己，<br>不求结果,不求同行，<br>不求曾经拥有,甚至不求你爱我，<br>只求在我最美的年华里,遇见你。”</p><p>到处都是奸淫的现象：贪心搂抱者正义，猜忌逼迫着同情，怯懦狎亵着勇敢，肉欲悔弄着恋爱，暴力侵凌着人道，黑暗践踏着光明。</p><p>我送你一个雷锋塔影，<br>满天稠密的黑云与白云；<br>我送你一个雷锋塔顶，<br>明月泻影在眼熟的波心。</p><p>深深的黑夜，依依的塔影，<br>团团的月彩，纤纤的波鳞——-<br>假如你我荡一支无遮的小艇，<br>假如你我创一个完全的梦境！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库原理</title>
      <link href="/2020/03/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/"/>
      <url>/2020/03/23/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>考研笔记</title>
      <link href="/2020/03/23/%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/23/%E8%80%83%E7%A0%94%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>毛概大题答出著作有加分<br>1、中国共产党为什么是历史的选择，人民的选择。</p><p>360分好的计算机大学</p><p>330普通211大学</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>论文经验</title>
      <link href="/2020/03/22/%E8%AE%BA%E6%96%87%E7%BB%8F%E9%AA%8C/"/>
      <url>/2020/03/22/%E8%AE%BA%E6%96%87%E7%BB%8F%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>先从国外论文搜索相关论文，如果近几年没有在研究的，就没必要写了（可能以及解决或者没有需要），<br>参考至少20篇以上国外论文，挑相关性大的看，参考过程中要有注释，为了方便后续工作的进行，写论文之前要先做相关的实验，记录实验结果并设定相关指标（一般4~5个）来表明算法的可靠性，wps行数一般14页左右（核心期刊），水刊7页左右。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>牛客刷题笔记</title>
      <link href="/2020/03/22/%E7%89%9B%E5%AE%A2%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"/>
      <url>/2020/03/22/%E7%89%9B%E5%AE%A2%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>3.22：<br>线分平面：[n(n+1)]/2+1<br>平面分空间：(n^3+5n+6)/6</p><p>线性回归中的残差服从均值为0的正态分布</p><p>4元集到3元集满射个数为<br>FantDing_nk<br>先讲4个元素分成3组，再将三组映射到另3个元素: C(4,2)*A(3,3)=36</p><p>算法题：<br>在一个二维数组中（每个一维数组的长度相同），每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。<br>解答：<br>链接：<a href="https://www.nowcoder.com/questionTerminal/abc3fe2ce8e146608e868a70efebf62e?orderByHotValue=1&amp;page=1&amp;onlyReference=false" target="_blank" rel="noopener">https://www.nowcoder.com/questionTerminal/abc3fe2ce8e146608e868a70efebf62e?orderByHotValue=1&amp;page=1&amp;onlyReference=false</a><br>来源：牛客网</p><p>class Solution {<br>public:<br>    bool Find(vector&lt;vector<int> &gt; array,int target) {<br>        int rowCount = array.size();<br>        int colCount = array[0].size();<br>        int i,j;<br>        for(i=rowCount-1,j=0;i&gt;=0&amp;&amp;j&lt;colCount;)<br>        {<br>            if(target == array[i][j])<br>                return true;<br>            if(target &lt; array[i][j])<br>            {<br>                i–;<br>                continue;<br>            }<br>            if(target &gt; array[i][j])<br>            {<br>                j++;<br>                continue;<br>            }<br>        }<br>        return false;<br>    }<br>};</int></p><p>3.23：<br>int func(x)<br>{<br>    int countx = 0;<br>    while(x)<br>    {<br>          countx ++;<br>          x = x&amp;(x-1);<br>     }<br>    return countx;<br>}<br>功能：将x转化为2进制，看含有的1的个数。<br>注: 每执行一次x = x&amp;(x-1)，会将x用二进制表示时最右边的一个1变为0，因为x-1将会将该位(x用二进制表示时最右边的一个1)变为0。<br>这是“位运算”中的一种很经典的用法，“&amp;”是“位于”的意思。它具体点的意思就是把x的二进制表示数最右边的一个1变成0  例如：<br>  e1:<br>  x      = 01001000<br>  x-1    = 01000111<br>  x&amp;(x-1)= 01000000</p><p>文件的顺序结构是一种最简单的物理结构，只要知道文件在存储设备上的起始地址(首块号)和文件长度(总块数)就能很快地进行存取。</p><p>坑点应该是加了客户端安全。似乎除了TRACE其他方法都可能会涉及到发送或请求信息和资源，所以被列为不安全。而TRACE方法只是记录路径信息，不会引起不安全行为<br>1    GET    请求指定的页面信息，并返回实体主体。<br>2    HEAD    类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头<br>3    POST    向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。<br>4    PUT    从客户端向服务器传送的数据取代指定的文档的内容。<br>5    DELETE    请求服务器删除指定的页面。<br>6    CONNECT    HTTP/1.1协议中预留给能够将连接改为管道方式的***服务器。<br>7    OPTIONS    允许客户端查看服务器的性能。<br>8    TRACE    回显服务器收到的请求，主要用于测试或诊断。</p><p>两个大数相加：<br>public static void main(String[] args) {<br>    String str1 = “123459”;<br>    String str2 = “123”;<br>    System.out.println(add(str1, str2));//123582<br>}</p><p>private static String add(String str1, String str2) {<br>    //任何一个字符串为null或空字符串，都不需要相加了<br>    if (str1 == null || “”.equals(str1)) {<br>        return str2;<br>    }<br>    if (str2 == null || “”.equals(str2)) {<br>        return str1;<br>    }<br>    int maxLength = Math.max(str1.length(), str2.length());<br>    //定义一个存贮结果的字符串，长度要比最大长度字符串还长一位，用于存储可能出现的进位<br>    StringBuffer result = new StringBuffer(maxLength + 1);</p><pre><code>//翻转两个字符串str1 = new StringBuffer(str1).reverse().toString();str2 = new StringBuffer(str2).reverse().toString();//反转后的结果分别为：//954321//321int minLength = Math.min(str1.length(), str2.length());//进位int carry = 0;//当前位上的数值int currentNum = 0;//循环变量int i = 0;for (; i &lt; minLength; i++) {    //分别获取两个字符对应的字面数值，然后相加，再加上进位    currentNum = str1.charAt(i) + str2.charAt(i) - 2 * '0' + carry;    //获取进位    carry = currentNum / 10;    //处理当前位的最终值    currentNum %= 10;    //保存当前位的值到最终的字符缓冲区中    result.append(String.valueOf(currentNum));}if (str1.length() &lt; str2.length()) {    //选择    str1 = str2;}for (; i &lt; str1.length(); i++) {    //分别获取两个字符对应的字面数值，然后相加，再加上进位    currentNum = str1.charAt(i) - '0' + carry;    //获取进位    carry = currentNum / 10;    //处理当前位的最终值    currentNum %= 10;    //保存当前位的值到最终的字符缓冲区中    result.append(String.valueOf(currentNum));}//处理最后一个的进位(当循环结束后，是不是还可能会有一个进位)if (carry &gt; 0) {    result.append(String.valueOf(carry));}//最后翻转恢复字符串，再返回return result.reverse().toString();</code></pre><p>}</p><p>3.24<br>数据传输的可靠性指标是误码率</p><p>下列哪个查找最快?<br>哈希表法（散列表）</p><p>IP数据报的最大长度为<br>IP数据包中的段总长度字段为16位，因此数据包的最大长度就是65535字节，计算公式是（2∧16-1）</p><p>链接：<a href="https://www.nowcoder.com/questionTerminal/1811e57dd62e47c9852ea5cee1ac519c" target="_blank" rel="noopener">https://www.nowcoder.com/questionTerminal/1811e57dd62e47c9852ea5cee1ac519c</a><br>来源：牛客网</p><p>用户程序发出磁盘I/O 请求后， 系统的处理流程是：用户程序→系统调用处理程序→设备驱动程序→中断处理程序。其中，计算数据所在磁盘的柱面号、磁头号、扇区号的程序是（ ）。 </p><p>用户程序<br>系统调用处理程序<br>设备驱动程序<br>中断处理程序</p><p>计算磁盘柱面号、磁头号和扇区号就是设备驱动程序要做的事……<br>我的理解是，磁盘I/O是要直接和硬件打交道，一般来说不同的硬件需要用不同的设备驱动程序，然后针对具体的某个硬件来计算物理存储位置。</p><p>为提高操作系统自身的可适应性和可扩展性，现代操作系统通过引入和实现( ) 的概念而实现了设备独立性。</p><p>正确答案: D   你的答案: C (错误)<br>共享设备<br>循环缓冲<br>独占设备<br>逻辑设备</p><p>现代操作系统为了提高系统的可适应性和可扩展性，都实现了设备独立性或设备无关性。基本含义是应用程序独立于具体使用的物理设备，应用程序以逻辑设备名请求使用某类设备。实现了设备独立性功能可带来两方面的好处：<br>（1）设备分配时的灵活性；</p><p>（2）易于实现I/O 重定向。为了实现设备的独立性，应引入逻辑设备和物理设备概念。在应用程序中，使用逻辑设备名请求使用某类设备；系统执行时是使用物理设备名。鉴于驱动程序是与硬件或设备紧密相关的软件，必须在驱动程序之上设置一层设备独立性软件，执行所有设备的公有操作、完成逻辑设备名到物理设备名的转换（为此应设置一张逻辑设备表）并向用户层（或文件层）软件提供统一接口，从而实现设备的独立性。</p><p>下列关于链接描述，错误的是 。<br>正确答案: B   你的答案: D (错误)<br>硬链接就是让链接文件的i节点号指向被链接文件的i节点<br>硬链接和符号连接都是产生一个新的i节点<br>链接分为硬链接和符号链接<br>硬连接不能链接目录文件</p><p>（1）软连接可以跨文件系统，硬连接不可以<br>（2）硬连接不管有多少个，都指向的是同一个I节点，会把结点连接数增加，只要结点的连接数不是0，文件就一直存在不管你删除的是源文件还是连接的文件。只要有一个存在文件就存在。 当你修改源文件或者连接文件任何一个的时候，其他的文件都会做同步的修改。软链接不直接使用i节点号作为文件指针, 而是使用文件路径名作为指针。所以删除连接文件对源文件无影响，但是删除源文件，连接文件就会找不到要指向的文件。软链接有自己的inode, 并在磁盘上有一小片空间存放路径名。<br>（3）软连接可以对一个不存在的文件名进行连接 。<br>（4）软连接可以对目录进行连接。</p><p>3.26：<br>在unix系统下执行chmod(“/usr/test/sample”,0753)之后该文件sample的访问权限为<br>正确答案: C   你的答案: B (错误)<br>拥有者可读写执行，同组用户可写可执行，其他用户可读可执行<br>拥有者可读写执行，同组用户可读写，其他用户可读可执行<br>拥有者可读写执行，同组用户可读可执行，其他用户可写可执行<br>拥有者可读写执行，同组用户可读可执行，其他用户可读写</p><p>r：读取权限，数字代号为”4”。<br>w：写入权限，数字代号为”2”。<br>x：执行或切换权限，数字代号为”1”。<br>7：421  5:41 3:12 分别为三种不同用户对文件所执行的操作，7代表对文件拥有者所能执行的操作，为4+2+1的组合， 代表可读客写可执行；5代表同组用户客执行的操作，只能为4+1的组合，代表可读可执行；3为其他用户所能执行的操作，为2+1的组合，代表可写可执行。</p><p>重复的数据，会增加磁盘空间的占有率，延长操作数据的时间。可以使用规范化处理数据冗余，以下对符合第一范式的表述正确的是：<br>正确答案: C   你的答案: D (错误)<br>非键属性和键（主键）属性间没有传递依赖<br>非键属性和键（主键）属性间没有部分依赖<br>表中不应该有重复组。列重复拆成另外一张表；行重复拆成多行<br>一个表中的列值与其他表中的主键匹配</p><p>1NF：关系中的每个属性都不可分。<br>2NF：消除了非主属性对于码（键）的部分函数依赖。<br>3NF：消除了非主属性对于码（键）的传递函数依赖。<br>BCNF：消除了主属性对于码（键）的部分或传递函数依赖。</p><p>控制令牌是一种传输媒体访问控制方法。下列说法中正确的是(    )。<br>正确答案: D   你的答案: A (错误)<br>一个站即使不拥有令牌时，同样可以发送数据帧<br>一个站发送完数据帧之后，其占有的令牌不能释放<br>一个站占有令牌时，不一定能够发送数据帧<br>一个站只有它占有令牌时，才能发送数据帧</p><p>下列有关InnoDB和MylSAM说法正确的是()<br>正确答案: B C   你的答案: D (错误)<br>InnoDB不支持FULLTEXT类型的索引<br>InnoDB执行DELETE FROM table 命令时，不会重新建表<br>MylSAM的索引和数据是分开保存的<br>MylSAM支持主外键，索引及事务的存储</p><p>3.27：<br>要求主表中没有相关记录进就不能将记录添加到相关表中，则应该在表关系中设置（）。<br>正确答案: A   你的答案: B (错误)<br>参照完整性<br>有效性规则<br>输入掩码<br>级联更新相关字段</p><p>实体完整性约束</p><p>实体完整性(Entity integrity)是指关系的主关键字不能重复也不能取“空值”。</p><p>域完整性约束</p><p>域完整性是保证数据库字段取值的合理性。</p><p>参照完整性约束</p><p>参照完整性(Referential Integrity)是定义建立关系之间联系的主关键字与外部关键字引用的约束条件。</p><p>用户完整性约束</p><p>实体完整性和参照完整性适用于任何关系型数据库系统，它主要是针对关系的主关键字和外部关键字取值必须有效而做出的约束。用户定义完整性(user defined integrity)则是根据应用环境的要求和实际的需要，对某一具体应用所涉及的数据提出约束性条件。这一约束机制一般不应由应用程序提供，而应有由关系模型提供定义并检验</p><p>用户定义完整性主要包括字段有效性约束和记录有效性。</p><p>关于回溯搜索法的介绍，下面（ ） 是不正确描述。</p><p>正确答案: D   你的答案: A (错误)<br>回溯法有“通用解题法”之称，它可以系统地搜索一个问题的所有解或任意解<br>回溯法是一种既带系统性又带有跳跃性的搜索算法<br>回溯算法在生成解空间的任一结点时，先判断该结点是否可能包含问题的解，如果肯定不包含，则跳过对该结点为根的子树的搜索，逐层向祖先结点回溯<br>回溯算法需要借助队列这种结构来保存从根结点到当前扩展结点的路径</p><p>回溯法，又被称为通用解题法，用它可以系统地搜索问题的所有解。回溯法是一个既带有系统性又带有跳跃性的搜索算法。它在问题的解空间中按深度优先策略，从根结点出发搜索解空间树。算法搜索到解空间树的任意结点时，首先判断该结点是否包含问题的解。如果不包含则跳过对以该结点为根的子树的搜索，逐层向其祖先结点回溯；否则进入这棵子树继续按深度优先搜索。如收费公路重建问题。</p><p>通道能够完成（）之间数据的传输。<br>正确答案: B   你的答案: C (错误)<br>CPU与外设<br>内存与外设<br>CPU与主存<br>外设与外设</p><p>通道是独立于CPU的、专门负责数据共享以及传输工作的处理单元。</p><p>通道是计算机系统中传送信息和数据的装置。主要有主存储器读写通道和输入、输出通道。能接收<strong><em>处理机的命令，独立执行通道程序，协助</em></strong>处理机控制与管理外部设备。一个独立于CPU的专门I/O控制的处理机，控制设备与内存直接进行数据交换。它有自己的通道命令，可由CPU执行相应指令来启动通道，并在操作结束时向CPU发出中断信号。通道指令的格式一般由：操作码，记数段，内存地址段，结束标志组成。一个系统中可设立三种类型的通道：字节多路通道、数组多路通道、选择通道。</p><p>以下关于线程以下描述正确的是（）<br>1.windows线程创建时，默认绑定在1个特定的CPU上<br>2.可采用SetThreadAffinityMask接口设置线程与某个cpu绑定<br>3._beginthreadex比CreateThread创建线程安全是因为使用_beginthreadex会创建一个_tiddata,在调用一些诸如strtok函数时会将需要保护的数据存入_tiddata<br>4.使用_beginthread创建线程时，线程执行函数必须为_cdecl约束规范，而_beginthreadex指定的线程执行函数必须为_stdcall<br>正确答案: D   你的答案: C (错误)<br>1，2<br>1，3<br>1<br>以上都不正确</p><p>解释：1：不正确。windows线程创建时，不会绑定在特定的CPU上，需要手动绑定，或者调用 SetThreadAffinityMask接口进行绑定；<br>           2：正确。参考  <a href="http://blog.csdn.net/beyond_cn/article/details/15813361" target="_blank" rel="noopener">http://blog.csdn.net/beyond_cn/article/details/15813361</a><br>           3：不正确。参考2的链接。欢迎各位纠正。<br>           4：正确。参考msdn:<br>            _beginthread 函数可创建在 start_address 开始执行例程的线程。  start_address 中的例程必须使用  __cdecl （用于本机代码）或  __clrcall （用于托管代码）调用约定，并且应没有返回值。<br>            传递给  _beginthreadex   的   start_address   中的例程必须使用   __stdcall （用于本机代码）或   __clrcall （用于托管代码）调用约定，并且必须返回线程退出代码。<br>            所以，通过1，就能选出D。</p><p>下列哪一个选项是引入缓冲的原因（）。<br>正确答案: A B D   你的答案: A (错误)<br>缓冲CPU和I/O设备间速度不匹配的矛盾<br>减少对CPU的中断频率，放宽对蓄洪大响应时间的限制<br>减少CPU对I/O控制的干预<br>提高CPU和I/O设备之间的并行性</p><p>引入缓冲的主要目的：<br>1．缓和处理机和I/O设备间速度不匹配的矛盾<br>2．减少对CPU的中断次数<br>3．提高CPU和I/O设备之间的并行性</p><p>3.29：<br>下列代码运行结果是？<br>a = map(lambda x: x**3, [1, 2, 3])<br>list(a)</p><p>正确答案: C   你的答案: C (正确)<br>[1, 6, 9]<br>[1, 12, 27]<br>[1, 8, 27]<br>(1, 6, 9)</p><p>map() 会根据提供的函数对指定序列做映射。</p><p>第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。</p><p>语法<br>map() 函数语法：</p><p>1<br>map(function, iterable, …)<br>参数<br>function – 函数<br>iterable – 一个或多个序列<br>返回值<br>Python 2.x 返回列表。</p><p>Python 3.x 返回迭代器。</p><p>以下程序输出为：<br>def test(a,b,*args):<br>print(a)<br>print(b)<br>print(args)<br>test(11,22,33,44,55,66,77,88,99)<br>正确答案: A   你的答案: B (错误)<br>11 22 (33, 44, 55, 66, 77, 88, 99)<br>编译错误<br>运行错误<br>11 22 (11,22，33, 44, 55, 66, 77, 88, 99)</p><p>def test(a,b,<em>args)<br>a,b位置参数；</em>args为不定长位置参数，传入的参数被放入一个元祖里。<br>所以，a,b分别被赋值11、22，而其他的数被存到一个元组里。</p><p>下列Python语句正确的是<br>正确答案: D   你的答案: B (错误)<br>min = x  if  x &lt; y   = y<br>max = x &gt; y ? x : y<br>if (x &gt; y)        print x<br>while True : pass</p><p>本题主要考察 Python 基本语法与运算符的使用，下面逐个分析每个选项：</p><p>A、三元运算符的使用。基本语法为：</p><p>1<br>a if condition else b<br>上述语句当 condition 为真时等于 a，为假时等于 b。因此 A 选项改为下列语句则正确：</p><p>1<br>min = x if x&lt;y else y<br>B、还是三元运算符的使用，只不过 B 选项的用法在 C、Java 等语言中成立，在 Python 中没有此用法，正确用法参见选项 A。</p><p>C、if 语句缺少冒号，并且正确用法如下：</p><p>1<br>if (x&gt;y): print x<br>D、while 语句与 pass 语句的使用。pass语句为空语句，意义只是为了保持程序结构的完整性。该选项写法正确，故选 D。</p><p>4.11：</p><p>攻击者使用无效IP地址，利用TCP连接的三次握手过程，连续发送会话请求，使受害主机处于开放会话的请求之中，直至连接超时，最终因耗尽资源而停止响应。这种攻击被称为<br>正确答案: C   你的答案: B (错误)<br>DNS欺骗攻击<br>DDoS攻击<br>SYN Flooding攻击<br>重放攻击</p><p>A,B两台机器都正常工作,B机器未监听任何端口.如果A机器向B机器80端口发送SYN包,会收到何种类型的回包?<br>正确答案: A   你的答案: D (错误)<br>RST包<br>ACK包<br>FIN包<br>无回应</p><p>RST包用来强制关闭TCP链接。 什么时候发送RST包      1.  建立连接的SYN到达某端口，但是该端口上没有正在 监听的服务。       2. TCP收到了一个根本不存在的连接上的分节。       3. 请求超时。 使用setsockopt的SO_RCVTIMEO选项设置recv的超时时间。接收数据超时时，会发送RST包。 </p><p>awk里的内置变量NF指的是 </p><p>正确答案: A   你的答案: D (错误)<br>以指定分隔符号作为分隔的列数<br>AWK处理文件的个数<br>单个输入文件记录的行数<br>所有输入文件记录的行数</p><p>堆排序的额外空间复杂度是（） </p><p>正确答案: C   你的答案: D (错误)<br>O(n)<br>O(logn)<br>O(1)<br>视情况而定</p><p>下面哪个数据库不属于NoSQL的范畴？<br>正确答案: D   你的答案: B (错误)<br>HBase<br>Cassandra<br>MongoDB<br>PostgreSQL</p><p>Hbase、Cassandra是按列存储，MongoDB是文档存储，都是NoSql </p><p>如果try或catch中有return语句，finally中对返回变量的改变不会影响最终的返回结果 </p><p>当（）时，进程从执行状态转变为就绪状态<br>正确答案: B   你的答案: A (错误)<br>进程被调度程序选中<br>时间片到<br>等待某一事件<br>等待的事件发生</p><p>以下哪一种设计模式适合解决对象之间的依赖关系？<br>正确答案: D   你的答案: A (错误)<br>工厂模式<br>外观模式<br>单例模式<br>观察者模式</p><p>程序开发出现代码复用需要时，根据设计模式原则应当优先考虑使用的思想是？<br>正确答案: B   你的答案: D (错误)<br>创建<br>组合<br>继承<br>封装</p><p>哪种设计模式能够在不改变对象自身的基础上，在程序运行期间给对象动态的添加职责（方法或属性）?<br>正确答案: B   你的答案: D (错误)<br>代理模式<br>装饰器模式<br>适配器模式<br>策略模式</p><p>以下对数据事务四大特性(ACID)的描述不完全正确的是？<br>正确答案: B   你的答案: C (错误)<br>事务开始之前和事务结束以后，数据库的完整性没有被破坏<br>事务处理结束后，对主从数据库的数据修改都彻底完成<br>一个事务中所有操作要么全部成功，要么全部失败<br>多个并发执行的事务相互隔离</p><p>1.原子性（Atomicity）：说的是一个事物内所有操作共同组成一个原子包，要么全部成功，要么全部失败。这是最基本的特性，保证了因为一些其他因素导致数据库异常，或者宕机。<br>2.一致性（consistency）：数据库事物的一致性就规定了事物提交前后，永远只可能存在事物提交前的状态和事物提交后的状态，从一个一致性的状态到另一个一致性状态，而不可能出现中间的过程态。也就是说事物的执行结果是量子化状态，而不是线性状态。<br>3.隔离性（lsolation）：事物的隔离性，基于原子性和一致性，因为事物是原子化，量子化的，所以，事物可以有多个原子包的形式并发执行，但是，每个事物互不干扰。但是，由于多个事物可能操作同一个资源，不同的事物为了保证隔离性，会有很多锁方案。<br>4.持久性（durability）：当一个事物提交之后，数据库状态永远的发生了改变，这个事物只要提交了，哪怕提交后宕机，他也确确实实的提交了，不会出现因为刚刚宕机了而让提交不生效，是要事物提交，他就像洗不掉的纹身，永远的固化了，除非你毁了硬盘。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>arduino</title>
      <link href="/2020/03/16/arduino/"/>
      <url>/2020/03/16/arduino/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Arduino实战全攻略，15个创客喜爱的Arduino实例制作项目 <a href="https://blog.csdn.net/monkey2018/article/details/81004206" target="_blank" rel="noopener">https://blog.csdn.net/monkey2018/article/details/81004206</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>参考的博客（实验室项目）</title>
      <link href="/2020/03/16/%E5%8F%82%E8%80%83%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/03/16/%E5%8F%82%E8%80%83%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考链接：<br>linux 编译指定库、头文件的路径问题  <a href="https://blog.csdn.net/jiaweizou/article/details/8153897" target="_blank" rel="noopener">https://blog.csdn.net/jiaweizou/article/details/8153897</a><br>gcc指定头文件路径及动态链接库路径 <a href="https://www.cnblogs.com/lidabo/p/5565827.html" target="_blank" rel="noopener">https://www.cnblogs.com/lidabo/p/5565827.html</a><br>gcc如何指定编译头文件的位置 <a href="https://www.jianshu.com/p/7d0f9d987dc9" target="_blank" rel="noopener">https://www.jianshu.com/p/7d0f9d987dc9</a><br>Makefile经典教程(掌握这些足够) <a href="https://blog.csdn.net/ruglcc/article/details/7814546/" target="_blank" rel="noopener">https://blog.csdn.net/ruglcc/article/details/7814546/</a><br>Linux下Makefile的编写及四个特殊符号的意义@、$@、$^、$ <a href="https://blog.csdn.net/runfarther/article/details/50036115" target="_blank" rel="noopener">https://blog.csdn.net/runfarther/article/details/50036115</a><br>网络高并发服务器之epoll接口、epoll反应堆模型详解及代码实现 <a href="https://blog.csdn.net/qq_36359022/article/details/81355897" target="_blank" rel="noopener">https://blog.csdn.net/qq_36359022/article/details/81355897</a><br>doxygen安装(doxygen的编译依靠cmake) <a href="https://blog.csdn.net/yamida/article/details/79428515" target="_blank" rel="noopener">https://blog.csdn.net/yamida/article/details/79428515</a><br>mqtt.fx的安装和使用 <a href="https://blog.csdn.net/nicholaszao/article/details/79211965" target="_blank" rel="noopener">https://blog.csdn.net/nicholaszao/article/details/79211965</a><br>Ubuntu常见问题解决方法 <a href="https://blog.csdn.net/xmy306538517/article/details/73469816" target="_blank" rel="noopener">https://blog.csdn.net/xmy306538517/article/details/73469816</a><br>Ubuntu上搭建EMQ MQTT服务器 <a href="https://www.jianshu.com/p/ebbe25d1c4b2?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">https://www.jianshu.com/p/ebbe25d1c4b2?tdsourcetag=s_pctim_aiomsg</a><br>梯形图基础教程 <a href="https://blog.csdn.net/lhyhb/article/details/81675997" target="_blank" rel="noopener">https://blog.csdn.net/lhyhb/article/details/81675997</a><br>PLC梯形图编程基础知识详解 <a href="https://blog.csdn.net/silverywings/article/details/76725239" target="_blank" rel="noopener">https://blog.csdn.net/silverywings/article/details/76725239</a><br>SecureCRT的安装与破解（过程很详细！！！） <a href="https://www.cnblogs.com/yjd_hycf_space/p/7729796.html" target="_blank" rel="noopener">https://www.cnblogs.com/yjd_hycf_space/p/7729796.html</a><br>KepServer 6.5安装 <a href="https://blog.csdn.net/han_better/article/details/81624924" target="_blank" rel="noopener">https://blog.csdn.net/han_better/article/details/81624924</a><br>通信报文格式及编码举例 <a href="https://blog.csdn.net/zzlyx99/article/details/82588164" target="_blank" rel="noopener">https://blog.csdn.net/zzlyx99/article/details/82588164</a><br>写出稳定的Modbus代码之点滴经验 <a href="https://www.cnblogs.com/pingwen/p/6691625.html" target="_blank" rel="noopener">https://www.cnblogs.com/pingwen/p/6691625.html</a><br>Linux 下串口编程入门 <a href="https://www.ibm.com/developerworks/cn/linux/l-serials/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/cn/linux/l-serials/</a><br>libmodbus库的移植与使用 <a href="https://blog.csdn.net/wise18146705004/article/details/85170348" target="_blank" rel="noopener">https://blog.csdn.net/wise18146705004/article/details/85170348</a><br>libmodbus官方手册中文翻译 <a href="https://blog.csdn.net/qq_23670601/article/details/82155378" target="_blank" rel="noopener">https://blog.csdn.net/qq_23670601/article/details/82155378</a><br>PLC-串口通信实例 <a href="https://blog.csdn.net/yqj234/article/details/78158931" target="_blank" rel="noopener">https://blog.csdn.net/yqj234/article/details/78158931</a><br>FX-3U PLC串口与PC通信调试 <a href="https://blog.csdn.net/GuiH168/article/details/46559227" target="_blank" rel="noopener">https://blog.csdn.net/GuiH168/article/details/46559227</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理学习题目</title>
      <link href="/2020/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E9%A2%98%E7%9B%AE/"/>
      <url>/2020/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0%E9%A2%98%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1、某存储器容量为32K X 16位 则地址线有多少根，数据线有多少根，怎么得来的？<br>解答：我觉得好像就是 32<em>1024个存储单位每一个存储单位是16位如果是 32</em>1024个单位就有15条地址线 因为2的15此方就是32K 也就是必须有32个不同的数标志着每一个地址因为每一个存贮单位是16位的所以数据线有16跟<br>2、某计算机的字长是16位，它的存储器容量是64KB，若按字编址那么它的最大寻址范围是<br>解答：某计算机的字长是16位，它的存储器容量是64KB，若按字编址那么它的最大寻址范围是32K。<br>因为该计算机的字长是16位，每个存储单元1个字节，1字节等于8位，所以相当于2个字节。又因为他的存储器容量是64KB，则说明有64K个字节，64/2=32。</p><p>MAR（Memory Address Register）存储器地址寄存答器<br>MDR(Memory Data Register)存储器数据寄存器<br>CB控制总线版<br>CU控制单元权<br>DB数据总线<br>IR指令寄存器<br>CS片选信号</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>win10第一次安装数据库失败解决方案</title>
      <link href="/2020/03/15/win10%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%89%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2020/03/15/win10%E7%AC%AC%E4%B8%80%E6%AC%A1%E5%AE%89%E8%A3%85%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%B1%E8%B4%A5%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>打开c盘，点击查看，勾选隐藏的项目，然后进入ProgramDate找到MySql并删除，如果显示正在使用则打开任务管理器停止即可。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ceshi</title>
      <link href="/2020/03/14/ceshi/"/>
      <url>/2020/03/14/ceshi/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>My New Post</title>
      <link href="/2020/03/14/My-New-Post/"/>
      <url>/2020/03/14/My-New-Post/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/14/hello-world/"/>
      <url>/2020/03/14/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hadoop</title>
      <link href="/2020/03/05/hadoop/"/>
      <url>/2020/03/05/hadoop/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>哔哔哩哩hadoop学习 <a href="https://www.bilibili.com/video/av32081351?from=search&amp;seid=18418052343509611764" target="_blank" rel="noopener">https://www.bilibili.com/video/av32081351?from=search&amp;seid=18418052343509611764</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>人工智能</title>
      <link href="/2020/02/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/"/>
      <url>/2020/02/26/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>百度AL学习 <a href="https://aistudio.baidu.com/aistudio/projectoverview" target="_blank" rel="noopener">https://aistudio.baidu.com/aistudio/projectoverview</a><br>神经网络BP反向传播算法原理和详细推导流程  <a href="https://blog.csdn.net/qq_32865355/article/details/80260212" target="_blank" rel="noopener">https://blog.csdn.net/qq_32865355/article/details/80260212</a></p><p>深度学习：<br>建立模型<br>选择什么样的网络结构<br>选择多少层数，每层选择多少神经元<br>损失函数<br>选择常用损失函数，平方误差，交叉熵….<br>参数学习<br>梯度下降<br>反向传播算法</p><p>卷积神经网络使用步骤：<br>建立模型：<br>选择什么样的网络结构<br>选择多少层数，每层选择多少神经元<br>损失函数：<br>选择常用损失函数，平方误差，交叉熵<br>参数学习：<br>梯度下降<br>反向传播算法</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>notebook报错 ImportError_ No module named ___</title>
      <link href="/2020/02/16/notebook%E6%8A%A5%E9%94%99%20ImportError_%20No%20module%20named%20___/"/>
      <url>/2020/02/16/notebook%E6%8A%A5%E9%94%99%20ImportError_%20No%20module%20named%20___/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>ImportError: No module named<strong>*<br>先pip install *</strong><br><img src="https://img-blog.csdnimg.cn/20200216131611753.png" alt="完成显示如图"><br>再从 d:\python\lib\site-packages中找到<strong><em>包<br>将</em></strong>包复制到D:\ANACONDA\Lib\site-packages下，<br>重启notebook<br><img src="https://img-blog.csdnimg.cn/20200216131818271.png" alt="完成"><br>完成！！！</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>火影系列</title>
      <link href="/2020/01/15/%E7%81%AB%E5%BD%B1/"/>
      <url>/2020/01/15/%E7%81%AB%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>火影忍者迅雷全链接 emmm暂时找不到了~</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>线性代数</title>
      <link href="/2020/01/05/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/"/>
      <url>/2020/01/05/%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>线性代数期末复习 <a href="https://www.sohu.com/a/280972453_600110" target="_blank" rel="noopener">https://www.sohu.com/a/280972453_600110</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Android</title>
      <link href="/2019/11/12/Andriod/"/>
      <url>/2019/11/12/Andriod/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><pre><code>        val intent = Intent(getActivity(), CaptureActivity::class.java)        Log.d(ContentValues.TAG,"111111111111111111")        getActivity()?.startActivityForResult(intent, 1111)</code></pre><p>改为：<br>            val intent = Intent(getActivity(), CaptureActivity::class.java)<br>            Log.d(ContentValues.TAG,”111111111111111111”)<br>            startActivityForResult(intent, 1111)<br>安卓编程学习 <a href="https://blog.csdn.net/m0_37868230/article/details/80748298" target="_blank" rel="noopener">https://blog.csdn.net/m0_37868230/article/details/80748298</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java</title>
      <link href="/2019/10/16/java/"/>
      <url>/2019/10/16/java/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>myeclipse 2015 CI key 破解教程 亲测可用 <a href="https://blog.csdn.net/qq_35324453/article/details/80882031" target="_blank" rel="noopener">https://blog.csdn.net/qq_35324453/article/details/80882031</a></p><p>java中类变量和实例变量：<br>区别：</p><pre><code> 访问：实例变量是通过定义类的对象来访问。类变量可以通过类或类对象来访问。 生存周期  ：实例变量与类对象生存周期共存亡。类变量与类共存亡。 变量修改：多个对象指向不同的实例变量堆内存，即实例变量的值只与对象相关。多个对象指向同一个类变量的堆内存，即类变量的值与类对象无关，为最后一次修改的值。</code></pre><p>int和integer<br>即Integer可以区分出未赋值和值为0的区别，int则无法表达出未赋值的情况，例如，要想表达出没有参加考试和考试成绩为0的区别</p><ul><li>，则只能使用Integer</li></ul><p>解决Exception in thread “main” java.lang.Error: Unresolved compilation problems: 的一种办法：</p><p>可能是你原先的包里边在其他文件中有同名的类</p><p>String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了</p><p>我们知道输出格式化数字可以使用 printf() 和 format() 方法。<br>String 类使用静态方法 format() 返回一个String 对象而不是 PrintStream 对象。<br>String 类的静态方法 format() 能用来创建可复用的格式化字符串，而不仅仅是用于一次打印输出。</p><p>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。然而在应用程序要求线程安全的情况下，则必须使用 StringBuffer 类。</p><p>建议使用 dataType[] arrayRefVar 的声明风格声明数组变量。 dataType arrayRefVar[] 风格是来自 C/C++ 语言 ，在Java中采用是为了让 C/C++ 程序员能够快速理解java语言。  </p><p>关键字implements是一个类，实现一个接口用的关键字，它是用来实现接口中定义的抽象方法</p><p>instanceof 严格来说是Java中的一个双目运算符，用来测试一个对象是否为一个类的实例</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c++总结</title>
      <link href="/2019/09/17/c++%E6%80%BB%E7%BB%93/"/>
      <url>/2019/09/17/c++%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>const在不同位置时的不同意义指针类型前：</p><p>声明一个指向常量的指针，程序中不能通过指针来改变它所指向的值，但指针本身的值可以改变，即指针可以指向其他数据；</p><p>“*”号和指针名之间，声明一个指针常量(常指针)，指针本身的值不可改变，即不能指向其他数据，但指向的数据的值可以改变<br>两个地方都加，声明指向常量的指针常量，指针本身的值不可改变，指向的数据也不能通过指针改变</p><p>函数指针使用函数指针之前，必须先赋值，使它指向一个函数入口地址，赋值语法格式为：函数指针名 = 函数名，其中函数名代表的函数必须是一个已经定义过的，和函数指针具有相同返回类型的函数，</p><p>指针调用函数格式：(*指针变量)(实参列表)<br>访问权限public：可被任意实体访问<br>protected：只允许本类及子类的成员函数访问<br>private：只允许本类的成员函数访问</p><p>构造函数创建对象时，自动调用构造函数，不能在程序中直接调用，可有任意类型参数，但不能有返回类型；<br>构造函数作用：为对象分配空间、为数据成员赋初值、请求其他资源<br>构造函数工作：初始化虚函数表、建立基类对象、建立非静态数据成员对象、安置虚基类对象信息、执行构造函数体中的代码</p><p>若一个类中没有定义构造函数，编译器会自动生成不带参数的默认构造函数，格式为：&lt;类名&gt;::&lt;默认构造函数名&gt;(){}析构函数析构函数作用：清除对象、释放内存<br>析构函数工作：执行析构函数中的代码、将对象占据的存储空间归还系统、做公共及用户要求的善后工作<br>析构函数无参数和返回值，一个类中只能定义一个析构函数，故不能重载，格式为：~&lt;类名&gt;();内存布局全局数据区：存放全局变量、静态数据、常量<br>代码区：存放类成员函数、其他函数代码<br>栈区：存放局部变量、函数参数、返回数据、返回地址<br>堆区：自由存储区<br>运算符重载重载形式重载为类的成员函数，参数个数比原来的运算数少一个&lt;函数类型&gt; operator &lt;运算符&gt; (&lt;形参列表&gt;){&lt;函数体&gt;;}重载为类的友元函数，参数个数与原运算数个数一样多<br>friend &lt;函数类型&gt; operator &lt;运算符&gt; (&lt;形参列表&gt;){&lt;函数体&gt;;}函数重载：返回值类型可以相同可以不同，但形参列表一定不同</p><p>静态数据成员初始化格式：&lt;类型&gt;&lt;类名&gt;::&lt;静态数据成员&gt;=&lt;值&gt;<br>引用格式：&lt;类名&gt;::&lt;静态数据成员&gt;;<br>继承方式私有继承private：父类的公有成员和保护成员作为子类的的私有成员，且不能被子类的派生类访问<br>公有继承public：父类的公有成员和保护成员作为子类的成员时，仍保持原有状态，父类私有成员仍为私有<br>保护继承protected：父类的公有成员和保护成员成为子类的保护成员，且只能被他的派生类成员函数或友元访问，父类私有成员仍为私有</p><p> 派生类构造函数调用顺序：调用基类的构造函数，调用顺序按继承时说明的顺序<br> 调用子对象类的构造函数，调用顺序按在类中说明的顺序<br> 派生类构造函数体中内容<br> 函数模版template &lt; 模板形参表 &gt;template <typename t="">返回值类型 函数名（形式参数列表）{    函数体语句}例：template <typename t="">void swap( T&amp; v1, T&amp; v2){    T temp;    temp = v1;    v1 = v2;    v2 = temp;}虚函数虚函数必须是类的成员函数，不能是友元，但可以是另一个类的友元，不能为全局函数，也不能为静态函数，析构函数可以为虚函数，但构造函数不能为虚函数</typename></typename></p><p> 变量初始化局部变量：定义时，系统不会进行初始化<br> 全局变量：定义时，系统自动初始化，   友元函数在类中定义过，但不是成员函数，定义在类外部，但有权访问类中成员<br> this指针只有成员函数才有this指针，友元函数没有this指针<br> 静态成员函数与普通成员函数区别：静态成员函数没有this指针，只能访问静态成员（包括静态成员变量和静态成员函数）<br> 普通成员函数有this指针，可以访问类中任意成员，而静态成员函数无this指针</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/2019/09/11/mysql/"/>
      <url>/2019/09/11/mysql/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>MySQL菜鸟教程学习 <a href="https://www.runoob.com/mysql/mysql-install.html" target="_blank" rel="noopener">https://www.runoob.com/mysql/mysql-install.html</a><br>MYSQL的安装 <a href="https://blog.csdn.net/fpga_zy/article/details/80689265" target="_blank" rel="noopener">https://blog.csdn.net/fpga_zy/article/details/80689265</a><br>C#的自动拼接Sql语句Insert方法及思路  <a href="https://www.cnblogs.com/chenyanbin/p/10201465.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenyanbin/p/10201465.html</a><br>用navicat连接数据库报错：1130-host … is not allowed to connect to this MySql server如何处理 <a href="https://blog.csdn.net/dabao87/article/details/80571877" target="_blank" rel="noopener">https://blog.csdn.net/dabao87/article/details/80571877</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>qt</title>
      <link href="/2019/09/10/qt/"/>
      <url>/2019/09/10/qt/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>QT 之TCP网络编程（非常值得看的一篇博客！） <a href="https://blog.csdn.net/u014252478/article/details/80377103" target="_blank" rel="noopener">https://blog.csdn.net/u014252478/article/details/80377103</a><br>Qt5 TcpSocket 客户端/服务器 通讯实例 <a href="https://blog.csdn.net/u012997311/article/details/50996701" target="_blank" rel="noopener">https://blog.csdn.net/u012997311/article/details/50996701</a><br>Qt5.9以上 for Android开发环境搭建 <a href="https://blog.csdn.net/qq_32250025/article/details/79106662" target="_blank" rel="noopener">https://blog.csdn.net/qq_32250025/article/details/79106662</a><br>Tools_1_1_3_Windows Qt5.10 for Android移植 <a href="https://blog.csdn.net/yongheng0852/article/details/78875855" target="_blank" rel="noopener">https://blog.csdn.net/yongheng0852/article/details/78875855</a><br>QT5的程序打包发布（将QT5的工程项目打包成一个exe程序） <a href="https://blog.csdn.net/windsnow1/article/details/78004265" target="_blank" rel="noopener">https://blog.csdn.net/windsnow1/article/details/78004265</a><br>解决This application failed to start because it could not find or load the Qt platform plugin “windows <a href="https://blog.csdn.net/perfect_accepted/article/details/80140362" target="_blank" rel="noopener">https://blog.csdn.net/perfect_accepted/article/details/80140362</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于Ubuntu中Could not get lock _var_lib_dpkg_lock解决方案</title>
      <link href="/2019/08/19/%E5%85%B3%E4%BA%8EUbuntu%E4%B8%ADCould%20not%20get%20lock%20_var_lib_dpkg_lock%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2019/08/19/%E5%85%B3%E4%BA%8EUbuntu%E4%B8%ADCould%20not%20get%20lock%20_var_lib_dpkg_lock%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)<br>E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?</p><p>解决：<br>1.<br>ps -A | grep apt<br>杀死进程PID<br>2.<br>sudo rm /var/cache/apt/archives/lock<br>sudo rm /var/lib/dpkg/lock</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>上海之行收获</title>
      <link href="/2019/08/19/%E4%B8%8A%E6%B5%B7%E4%B9%8B%E8%A1%8C%E6%94%B6%E8%8E%B7/"/>
      <url>/2019/08/19/%E4%B8%8A%E6%B5%B7%E4%B9%8B%E8%A1%8C%E6%94%B6%E8%8E%B7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参加的比赛是世界技能大赛的子比赛，虽然我们的参赛队伍是走过程的，但是我通过与复旦大学的学术一起比赛了解到了自身的不足，同样的时间下我只完成了4页的又难看的ppt介绍，而他们完成的是10多页的而且又非常美观ppt，我想这就是差距，而且在比赛演示的时候他们几乎感觉是把ppt给背下来的，全程没有看过ppt而是看着裁判做产品的介绍，我却是全程看着ppt一字不动的读出来，在比赛前半天我将参赛用的ppt自己做了出来，以为自己做的很厉害了，然而看到他们也是一样的时间下做出的成果这么多，我不禁感到羞愧，感觉自己如同井底之蛙一般，去复旦大学吃饭的时候跟那的研究生聊了下天，了解到复旦的学风——学而有用，而且那儿的饭菜的味道是与这没得比的，而且价格也非常便宜，那一顿好像只吃了6.6元，可以用物美价廉来形容复旦的饭菜。<br>说完这场比赛和复旦大学后再讲一些去上海玩了些啥，一谈到景点首先就是上海的外滩，那里晚上的夜景非常漂亮东方明珠是整个上海夜景的亮点，东方明珠散发着五颜六色的光，与周围的金光灿灿的建筑形成鲜明对比，很有一种欧式风格；风景除了外滩之外还有豫园也很漂亮，有一种以前教科书上苏州园林的感觉，当然那个时候好像在搞什么活动，看到了很多穿汉服或唐服的小姐姐。<br><img src="https://img-blog.csdnimg.cn/20191119193111579.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80Mzg3MTY4MA==,size_16,color_FFFFFF,t_70" alt=""></p><p>讲完景点后来讲一下去那吃了啥，后面我强行拉着一起去的几个人去吃上上谦（一种火锅店），在那我跟我心仪的女孩视频聊天，因为她喜欢薛之谦，所以我特地来到了这家火锅店，味道虽然一般，但是里面的服务真的很周到。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
        <tags>
            
            <tag> 比赛经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>c++学习2</title>
      <link href="/2019/07/10/c++%E5%AD%A6%E4%B9%A02/"/>
      <url>/2019/07/10/c++%E5%AD%A6%E4%B9%A02/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>函数重载：在同一个作用域内，可以声明几个功能类似的同名函数，但是这些同名函数的形式参数（指参数的个数、类型或者顺序）必须不同。您不能仅通过返回类型的不同来重载函数注意：重载函数的参数个数，参数类型或参数顺序三者中必须有一个不同 函数重载的规则： 函数名称必须相同。参数列表必须不同（个数不同、类型不同、参数排列顺序不同等）。函数的返回类型可以相同也可以不相同。仅仅返回类型不同不足以成为函数的重载。  指针：<del>~ 对象的基础–结构：   使用对象编程：class Car{public:    std::string color;    std::string engine;    float gaa_tank;    void fill_tank(float liter);    void running(void);    Car(void);     //构造器};  void Car::fill_tank(float liter){    gas_tank +=liter;} Car::Car(void){    color = “while”;    engine = “v8”;    wheel = 4;    gas_tank = FULL_GAS;}   int main (){    return 0;}    构造器：1.与类名相同，无返回，被系统生成对象时自动调用，用于初始化 2.可以有参数，构造器的重载，默认参数 3.若未提供任何构造，系统默认生成一个无参空构造器。若提供，则不再生成默认构造器。析构器：1.函数名：类名前加上</del>2.没有返回值3.没有参数，不可以被重载4.必须公有5.没有析构函数，默认析构函数 6.一个类中只能拥有一个析构函数   #include <iostream>#include<string> class Baseclass//定义一个类{public:    Baseclass();///构造器    <del>Baseclass();//析构器    void dosometing();//方法}; class Subclass : public Baseclass//定义子类{public:    Subclass();    ~Subclass();}; //对基类构造器进行定义Baseclass::Baseclass(){    std::cout&lt;&lt;”进入基类构造器……\n\n”;    std::cout&lt;&lt;”我在基类构造器干某事……\n\n”;} //对基类析构器进行定义Baseclass::</del>Baseclass(){    std::cout&lt;&lt;”进入基类析构器……\n\n”;    std::cout&lt;&lt;”我在基类析构器干某事……\n\n”;}//对类的方法进行编写void Baseclass::dosometing(){    std::cout&lt;&lt;”dosometing函数的调用\n\n”;} //对子类构造器进行定义Subclass::Subclass(){    std::cout&lt;&lt;”进入子类构造器。。\n\n”;    std::cout&lt;&lt;”我在子类构造器干某事……\n\n”;}//对子类析构器进行定义Subclass::<del>Subclass(){    std::cout&lt;&lt;”进入子类析构器。。\n\n”;    std::cout&lt;&lt;”我在子类析构器干某事……\n\n”;} int main(){    Subclass  duixiang;//定义一个对象     duixiang.dosometing();    std::cout&lt;&lt;”完事，收工！\n\n”;    return 0;     this指针：一个对象的this指针并不是对象本身的一部分，不会影响sizeof（对象）的结果。this作用域是在类内部，当在类的非静态成员函数中访问类的非静态成员的时候，编译器会自动将对象本身的地址作为一个隐含参数传递给函数。  类的继承：class SubClass : pubcil SuperClass{    }class Pig(子类) : public Animal（父类）{}； 例如：class Animal{public:    std::string mouth;        void eat();    void sleep();    void drool();    }; class Pig : public Animal{public:    void climb();    }; class Turtle : public Animal{public:    void swim();}; void Animal::sleep(){    std::cout&lt;&lt; “i am sleepingf”&lt;&lt;std :: endl;} void Pig::climb(){    std::cout &lt;&lt; “hhhh会上树”&lt;&lt;std ::endl;} int main(){    Pig pig;    Turtle tyrtle;     pig.sleep();    turtle.sleep();    pig.climb();    turtle.swim();     return 0;}   继承机制中的构造器和析构器：#include <iostream>#include<string> class Baseclass//定义一个类{public:    Baseclass();///构造器    ~Baseclass();//析构器    void dosometing();//方法}; class Subclass : public Baseclass//定义子类{public:    Subclass();    ~Subclass();}; //对基类构造器进行定义Baseclass::Baseclass(){    std::cout&lt;&lt;”进入基类构造器……\n\n”;    std::cout&lt;&lt;”我在基类构造器干某事……\n\n”;} //对基类析构器进行定义Baseclass::</string></iostream></del>Baseclass(){    std::cout&lt;&lt;”进入基类析构器……\n\n”;    std::cout&lt;&lt;”我在基类析构器干某事……\n\n”;}//对类的方法进行编写void Baseclass::dosometing(){    std::cout&lt;&lt;”dosometing函数的调用\n\n”;} //对子类构造器进行定义Subclass::Subclass(){    std::cout&lt;&lt;”进入子类构造器。。\n\n”;    std::cout&lt;&lt;”我在子类构造器干某事……\n\n”;}//对子类析构器进行定义Subclass::~Subclass(){    std::cout&lt;&lt;”进入子类析构器。。\n\n”;    std::cout&lt;&lt;”我在子类析构器干某事……\n\n”;} int main(){    Subclass  duixiang;//定义一个对象     duixiang.dosometing();    std::cout&lt;&lt;”完事，收工！\n\n”;    return 0;     </string></iostream></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于SSH连不上linux</title>
      <link href="/2019/07/10/%E5%85%B3%E4%BA%8ESSH%E8%BF%9E%E4%B8%8D%E4%B8%8Alinux/"/>
      <url>/2019/07/10/%E5%85%B3%E4%BA%8ESSH%E8%BF%9E%E4%B8%8D%E4%B8%8Alinux/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1.打开虚拟机终端，输入sudo apt-get install openssh-server<br>键入密码（装虚拟机时设的密码）<br>2.打开mobaxterm，点击session图标，点击ssh图标，返回虚拟机输入ifconfig<br>查询ip地址（inet addr 后面的192.168.。。。。）<br>将IP地址输入mobaxterm对应的remote host.<br>specify username输入虚拟机名字。<br>点击ok，连接成功。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c++笔记</title>
      <link href="/2019/07/10/c++%E7%AC%94%E8%AE%B0/"/>
      <url>/2019/07/10/c++%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li><p>ungetc（ch，stdin）；//将ch中的字符退回stdin输入流  cin.ignorecin.getline<br>//读入一行 cin.peekcin.readcin.write const int SIZE（静态变量） =<br>50//#difine…. argc       //参数数量argv[]      //参数EOF   —-   (-1)<br>或ifstream in(file,打开方式);     //FILE in； in.open    //打开文件 打开方式：</p><ol><li>List item</li></ol><p>ios::in     //可读ios::out<del>binary</del>app<del>trunk·</del>nocreate<del>noreplece<br>例：fstream fp(“test.txt”,ios::in|ios::out)   以可读可写打开test.txt文件<br>ofstream  out；out.open<br>函数重载：在同一个作用域内，可以声明几个功能类似的同名函数，但是这些同名函数的形式参数（指参数的个数、类型或者顺序）必须不同。您不能仅通过返回类型的不同来重载函数注意：重载函数的参数个数，参数类型或参数顺序三者中必须有一个不同<br>函数重载的规则：<br>函数名称必须相同。参数列表必须不同（个数不同、类型不同、参数排列顺序不同等）。函数的返回类型可以相同也可以不相同。仅仅返回类型不同不足以成为函数的重载。<br>指针：</del> 对象的基础–结构：</p></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sprintf应用</title>
      <link href="/2019/07/08/sprintf%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2019/07/08/sprintf%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>sprintf(“a,b,c”);<br>a要转换成的字符串<br>b–”%d”<br>c要转换的数字</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>参考的博客（实验室项目）</title>
      <link href="/2019/06/16/modbus/"/>
      <url>/2019/06/16/modbus/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>MQTT libmosquitto源码分析 <a href="https://blog.csdn.net/lanhy999/article/details/50779731" target="_blank" rel="noopener">https://blog.csdn.net/lanhy999/article/details/50779731</a><br>linux下串口的阻塞和非阻塞操作 <a href="https://blog.csdn.net/wuhengwudi/article/details/7454629" target="_blank" rel="noopener">https://blog.csdn.net/wuhengwudi/article/details/7454629</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>linux高级操作</title>
      <link href="/2018/12/29/Linux%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C/"/>
      <url>/2018/12/29/Linux%E9%AB%98%E7%BA%A7%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Kvm/qemu-img创建qcow2镜像 <a href="https://blog.csdn.net/qiqishuang/article/details/51541256?utm_source=blogxgwz6" target="_blank" rel="noopener">https://blog.csdn.net/qiqishuang/article/details/51541256?utm_source=blogxgwz6</a><br>制作openstack使用的Ubuntu镜像 <a href="https://blog.csdn.net/svmachine/article/details/51523709?tdsourcetag=s_pctim_aiomsg" target="_blank" rel="noopener">https://blog.csdn.net/svmachine/article/details/51523709?tdsourcetag=s_pctim_aiomsg</a><br>StarlingX/Developer Guide <a href="https://wiki.openstack.org/w/index.php?title=StarlingX/Developer_Guide&amp;oldid=164571" target="_blank" rel="noopener">https://wiki.openstack.org/w/index.php?title=StarlingX/Developer_Guide&amp;oldid=164571</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Paho -物联网 MQTT C Cient的实现和详解</title>
      <link href="/2018/12/07/Paho%20-%E7%89%A9%E8%81%94%E7%BD%91%20MQTT%20C%20Cient%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%92%8C%E8%AF%A6%E8%A7%A3/"/>
      <url>/2018/12/07/Paho%20-%E7%89%A9%E8%81%94%E7%BD%91%20MQTT%20C%20Cient%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%92%8C%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考链接：<a href="https://www.cnblogs.com/homejim/p/8196763.html" target="_blank" rel="noopener">https://www.cnblogs.com/homejim/p/8196763.html</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Paho - MQTT C Cient的实现</title>
      <link href="/2018/12/06/Paho%20-%20MQTT%20C%20Cient%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/12/06/Paho%20-%20MQTT%20C%20Cient%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>参考链接：<a href="https://blog.csdn.net/weixin_37139197/article/details/78934961" target="_blank" rel="noopener">https://blog.csdn.net/weixin_37139197/article/details/78934961</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
